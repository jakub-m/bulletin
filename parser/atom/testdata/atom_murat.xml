<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:georss="http://www.georss.org/georss" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-8436330762136344379</id>
  <updated>2021-08-23T03:19:41.679-04:00</updated>
  <category term="paper-review"/>
  <category term="misc"/>
  <category term="book-review"/>
  <category term="research-question"/>
  <category term="mad-questions"/>
  <category term="research-advice"/>
  <category term="paxos"/>
  <category term="Blockchain"/>
  <category term="distributed consensus"/>
  <category term="tla"/>
  <category term="fault-tolerance"/>
  <category term="teaching"/>
  <category term="mldl"/>
  <category term="writing"/>
  <category term="consistency"/>
  <category term="reading-group"/>
  <category term="big-data"/>
  <category term="trip-report"/>
  <category term="failures"/>
  <category term="my advice"/>
  <category term="facebook"/>
  <category term="CosmosDB"/>
  <category term="tensorflow"/>
  <category term="Cosmos DB"/>
  <category term="my-paper"/>
  <category term="stream-processing"/>
  <category term="Azure"/>
  <category term="formal methods"/>
  <category term="humans"/>
  <category term="seminar"/>
  <category term="time"/>
  <category term="dataflow"/>
  <category term="mlbegin"/>
  <category term="auditability"/>
  <category term="programming"/>
  <category term="stabilization"/>
  <category term="wpaxos"/>
  <category term="bestof"/>
  <category term="presenting"/>
  <category term="automated reasoning"/>
  <category term="indexing"/>
  <category term="scheduling"/>
  <category term="Rust"/>
  <category term="chaos"/>
  <category term="distributed transactions"/>
  <category term="links"/>
  <category term="mobile"/>
  <category term="smartphones"/>
  <category term="graph-processing"/>
  <category term="serverless"/>
  <category term="sonification"/>
  <category term="time synchronization"/>
  <title type="text">Metadata</title>
  <subtitle type="html">On distributed systems broadly defined and other curiosities. The opinions on this site are my own.</subtitle>
  <link rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/posts/default"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default"/>
  <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/"/>
  <link rel="hub" href="http://pubsubhubbub.appspot.com/"/>
  <link rel="next" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default?start-index=26&amp;max-results=25"/>
  <author>
    <name>Murat</name>
    <uri>http://www.blogger.com/profile/07842046940394980130</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
  </author>
  <generator version="7.00" uri="http://www.blogger.com">Blogger</generator>
  <openSearch:totalResults>538</openSearch:totalResults>
  <openSearch:startIndex>1</openSearch:startIndex>
  <openSearch:itemsPerPage>25</openSearch:itemsPerPage>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-8449165989112346419</id>
    <published>2021-08-17T09:35:00.008-04:00</published>
    <updated>2021-08-17T11:53:07.365-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="automated reasoning"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="distributed consensus"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="paxos"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="research-question"/>
    <title type="text">There is plenty of room at the bottom</title>
    <content type="html">&lt;p&gt;This is a pun on the saying "there is always room at the top". This is also the title of a &lt;a href="https://en.wikipedia.org/wiki/There's_Plenty_of_Room_at_the_Bottom"&gt;famous Feynman lecture from 1959&lt;/a&gt;, where he made a case for nanotechnology.&amp;nbsp;&lt;/p&gt;&lt;p&gt;In this post, I will try to argue that there is plenty of room at the bottom for distributed algorithms. Most work on distributed algorithms are done at a high-level abstraction plane. These high level solutions do not transfer well to the implementation level, and this opens a lot of space to explore at the implementation level.&lt;/p&gt;&lt;p&gt;But this is not just an opportunistic argument. It is imperative to target the implementation level with our distributed algorithms work, otherwise they remain as theoretical, unused, inapplicable.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Let me try to demonstrate using consensus protocols as examples. Someone else can make the same case using another subdomain.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Be mindful of what is swept under the rug&lt;/h2&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;What is succinct at the high level could be very hard to implement and get right at the low level.&lt;/i&gt;&lt;/b&gt; &lt;a href="https://lamport.azurewebsites.net/pubs/paxos-simple.pdf"&gt;Paxos seems simple&lt;/a&gt;, but even after several papers on it, &lt;a href="https://static.googleusercontent.com/media/research.google.com/en//archive/paxos_made_live.pdf"&gt;it was difficult to implement&lt;/a&gt;. In fact the whole point of &lt;a href="https://raft.github.io/"&gt;Raft&lt;/a&gt; was to show how to implement Paxos while limiting its generality.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;What seems to be a harmless assumption could be the source of a liveness bug that brings down the deployment.&lt;/i&gt;&lt;/b&gt; &lt;a href="https://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/"&gt;Assuming nodes are strongly connected, Raft does not have a liveness problem.&lt;/a&gt; And this does not seem like a big deal at the design level. &lt;a href="https://blog.cloudflare.com/a-byzantine-failure-in-the-real-world/"&gt;But when that assumption is violated in deployment, you have a 6 hour outage impacting production.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;What seems to be implementation detail can determine the scalability of the algorithm.&lt;/i&gt;&lt;/b&gt; By employing intermediate proxy nodes to relay the communication between the leader and followers, &lt;a href="http://muratbuffalo.blogspot.com/2020/03/pigpaxos-devouring-communication_18.html"&gt;PigPaxos is able to achieve 3.5 folds improvement in Paxos throughput.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;What is fast under low contention environments could be sluggish under increased contention.&lt;/i&gt;&lt;/b&gt; EPaxos uses dependency tracking to achieve more concurrency and throughput, but &lt;a href="http://muratbuffalo.blogspot.com/2019/07/dissecting-performance-bottlenecks-of.html"&gt;when contention increases the benefits disappear quickly.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;What seems to be an operational/deployment problem can require a new consensus read algorithm to be developed.&lt;/i&gt;&lt;/b&gt; &lt;a href="http://muratbuffalo.blogspot.com/2019/09/linearizable-quorum-reads-in-paxos.html"&gt;PQR algorithm enables clients to do linearizable reads just using the followers&lt;/a&gt;, and relieves the leader off the job of serving reads, which allows it to be able to serve more writes.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;What seems to be a crazy relaxation of guaranteed commits can open a new field of consensus algorithms. &lt;/i&gt;&lt;/b&gt;I am talking about Nakamoto consensus which amalgamated known techniques to rewrite the book on consensus. &lt;a href="http://muratbuffalo.blogspot.com/2018/03/anatomical-similarities-and-differences.html"&gt;It used proof of work to achieve leader election without needing communication, and used hash-chain based multi-synod log to achieve eventual implicit commit finalization.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;The lesson is clear. &lt;b&gt;&lt;u&gt;Be mindful of what is swept under the rug!&lt;/u&gt;&lt;/b&gt;&amp;nbsp;&lt;b&gt;What is not a concern at high level can be a feature that makes or breaks the implementation.&lt;/b&gt; It is possible to think of other dimensions/concerns, even though I may not be able to match them to Paxos variants. Ok here goes nothing.&lt;/p&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/CI/CD"&gt;Continuous Integration Continuous Delivery&lt;/a&gt; (CI/CD) concerns are &lt;b&gt;&lt;i&gt;the&lt;/i&gt;&lt;/b&gt; big thing in the industry, but I haven't seen them addressed in Paxos/consensus variants. Is there a Paxos variant designed for being easier to change/modify?&amp;nbsp;&lt;/p&gt;&lt;p&gt;How about Paxos variants that play nicer with other protocols, such as storage, networking, and commit protocols. (Well, actually, &lt;a href="http://muratbuffalo.blogspot.com/2016/03/paper-review-building-consistent.html"&gt;TAPIR&lt;/a&gt; did consider consensus together with storage for transactions, and &lt;a href="http://muratbuffalo.blogspot.com/2020/05/unifying-consensus-and-atomic.html"&gt;this paper&lt;/a&gt; among others considered unifying consensus protocols with commits.)&lt;/p&gt;&lt;p&gt;How would disaster tolerance work? Flexible and graceful fault-tolerance is better than &lt;a href="http://muratbuffalo.blogspot.com/2013/06/antifragility-from-engineering.html"&gt;being robust to a point and then being a brittle mess after that without notice.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;How would debuggability/observability work for consensus?&lt;/p&gt;&lt;p&gt;Can we have a fully verified (via automated reasoning) implementation of consensus for a deployment system?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Cloud computational model changes everything&lt;/h2&gt;&lt;p&gt;&lt;a href="https://lh3.googleusercontent.com/-92Gi27u-3Fk/YRuo2Y7zf3I/AAAAAAAAJ0U/Nq1DP8N24d8X8iUVVmKdDjOMeR1yZvcewCLcBGAsYHQ/image.png" style="margin-left: 1em; margin-right: 1em; text-align: center;"&gt;&lt;img alt="" data-original-height="576" data-original-width="1024" height="360" src="https://lh3.googleusercontent.com/-92Gi27u-3Fk/YRuo2Y7zf3I/AAAAAAAAJ0U/Nq1DP8N24d8X8iUVVmKdDjOMeR1yZvcewCLcBGAsYHQ/w640-h360/image.png" width="640" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;There was plenty of room to begin with, and we now have even more room at the bottom with a drastically changed terrain: Algorithm design still uses the traditional computer paradigm from 1970s. But&amp;nbsp; the cloud computational model toppled many of the assumptions of the traditional CPU+memory+storage-on-box model.&lt;/p&gt;&lt;p&gt;Cloud has a new resource and cost model based on containers and sometimes on even serverless platforms. The incentive at the traditional on-box model is to use all CPU+memory+storage without any being a bottleneck. Things change in the cloud where bottlenecks are less of an issue because of disaggregation, and you pay based on what you use so using-all-you-can does not make as much sense. Recently, &lt;a href="http://charap.co/scalable-but-wasteful-or-why-fast-replication-protocols-are-actually-slow/"&gt;the scalable but wasteful paper&lt;/a&gt; looked at how Paxos variants designed for the on-box model fare for the cloud model.&lt;/p&gt;&lt;p&gt;Cloud also gives you novel distributed building blocks and primitives. Most cloud environments provide distributed transactional logs as part of infrastructure used by existing protocols. Why not leverage these to build consensus on them. &lt;a href="http://muratbuffalo.blogspot.com/2021/01/virtual-consensus-in-delos.html"&gt;Delos&lt;/a&gt; and followup work is an example of this.&lt;/p&gt;&lt;p&gt;Containers and abundant resources in the cloud make it possible to migrate computation for pro-actively controlling and strengthening availability. Recently, &lt;a href="http://muratbuffalo.blogspot.com/2020/03/millions-of-tiny-databases.html"&gt;the Physalia paper&lt;/a&gt; investigated how infrastructure aware placement can significantly reduce the effect of network partitions, infrastructure failures, and even software bugs.&amp;nbsp;&lt;/p&gt;&lt;p&gt;We are just getting starting in this line of work. &lt;b&gt;We are two decades in to the cloud era, but distributed algorithms are still designed and evaluated with the single dedicated box model from the 1970s. This is an anomaly, and this is cue &lt;a href="https://en.wikipedia.org/wiki/The_Structure_of_Scientific_Revolutions"&gt;there will be a revolutionary science period where a new paradigm will emerge.&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Are you saying we should not use abstractions and avoid abstract thinking?&lt;/h2&gt;&lt;p&gt;No, I am not saying that. I am just saying: &lt;b&gt;&lt;i&gt;&lt;u&gt;don't abstract away the features that are important to the implementation.&lt;/u&gt;&lt;/i&gt;&lt;/b&gt; Have one foot in the implementation plane. Use tools that forces you to deal with the implementation/deployment relevant concerns.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;"The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise." --Dijkstra&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/8449165989112346419/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=8449165989112346419" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/8449165989112346419"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/8449165989112346419"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/08/there-is-plenty-of-room-at-bottom.html" title="There is plenty of room at the bottom"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh3.googleusercontent.com/-92Gi27u-3Fk/YRuo2Y7zf3I/AAAAAAAAJ0U/Nq1DP8N24d8X8iUVVmKdDjOMeR1yZvcewCLcBGAsYHQ/s72-w640-h360-c/image.png" height="72" width="72"/>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-3267652187920899412</id>
    <published>2021-08-08T23:40:00.002-04:00</published>
    <updated>2021-08-08T23:46:02.656-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="distributed consensus"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="time"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="time synchronization"/>
    <title type="text">Do tightly synchronized clocks help consensus?</title>
    <content type="html">&lt;p&gt;Let's start with the impossibility results, a good place to start distributed systems discussion. The &lt;a href="http://en.wikipedia.org/wiki/Two_Generals'_Problem"&gt;coordinated attack result&lt;/a&gt; says that if the communication channels can drop messages arbitrarily and undetectably you cannot solve distributed consensus using a deterministic protocol in finite rounds. This result is all about *the curse of asymmetry of information*. Reliable channels are needed for two parties to agree on something. Otherwise the two parties are stuck in a Zeno's paradox of "You may not know that I know that you know that I know" kind of information chaining. A classic paper to checkout on the topic is "&lt;a href="https://arxiv.org/abs/cs/0006009"&gt;Knowledge and common knowledge in a distributed environment&lt;/a&gt;".&lt;/p&gt;&lt;p&gt;Assuming mostly reliable channels and demanding majority acks, it is possible to solve consensus in a partially synchronous system. &lt;a href="http://muratbuffalo.blogspot.com/search?q=paxos"&gt;Paxos shows us how to do this.&lt;/a&gt; Paxos uses quorum of acks to get around the problem of "the agreement having to occur in one shot" as in the coordinated attack problem. In Paxos, the quorum acks mark the point where the system agrees, and the stragglers can learn or re-learn this information because agreement was stored in a quorum of nodes. As a result, the agreed value does not change.&lt;/p&gt;&lt;p&gt;What does this have to do with time synchronization? Specifically, where is time synchronization in Paxos? Nowhere! Paxos preserves safety in an asynchronous system, and achieves progress when the failure detectors do not suspect the eligible and alive leader. For this, it is sufficient to use diamond S failure detectors (&lt;a href="https://www.cs.utexas.edu/~lorenzo/corsi/cs380d/papers/p225-chandra.pdf"&gt;Chandra-Toueg 96&lt;/a&gt;), which do not need time synchronization. These detectors are implementable by using per process clocks measuring local time passing under the assumption that time does not advance at unboundedly different rates across processes.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Now the question is this: &lt;i&gt;If we had perfect time synchronization, would we be able to solve consensus easier, better, more robust, or more efficiently?&lt;/i&gt;&amp;nbsp; &lt;b&gt;&lt;i&gt;No!&lt;/i&gt;&lt;/b&gt; &lt;b&gt;The curse of asymmetry of information is the core challenge in consensus.&lt;/b&gt;&amp;nbsp;The leader needs to hear acks from a quorum in order to anchor consensus. (&lt;a href="http://muratbuffalo.blogspot.com/2016/11/modeling-paxos-and-flexible-paxos-in.html"&gt;The quorum should be more than F and the phase1 and phase2 quorums should intersect with each other so the consensus state persists.&lt;/a&gt;)&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Time synchronization with clock uncertainty bound, epsilon, less than microsecond are not useful for consensus because consensus is bound by communication, and communication between computers&amp;nbsp; even in the same cluster takes many microseconds.&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The guarantee we would require from time synchronization is that causality is not violated by the physical clock timestamps. That means epsilon should be less than the communication latency. If epsilon is larger than the communication latency we may order the events incorrectly. Consider this example. Event A and event B have the same clock timestamp but they are farther apart in time because of the epsilon uncertainty. If we were to use A and B as a snapshot of the distributed system, this would be an inconsistent snapshot. Another event happens after A which then sends a message that affects B, and taints the snapshot. Causality sneaks in between A and B and the integrity of the snapshot is violated.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://lh3.googleusercontent.com/-sLmS9NbRs9E/YRCiAFC_6MI/AAAAAAAAJzw/ZKaBAXyEtscIL0hssUHlPJun2xjIZcr3wCLcBGAsYHQ/image.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="154" data-original-width="400" height="154" src="https://lh3.googleusercontent.com/-sLmS9NbRs9E/YRCiAFC_6MI/AAAAAAAAJzw/ZKaBAXyEtscIL0hssUHlPJun2xjIZcr3wCLcBGAsYHQ/w400-h154/image.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;As long as epsilon is less than communication latency, this problem does not happen and we won't have problems building linearizability or consistent snapshots using the synchronized clocks' timestamps as the basis.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Don't get me wrong. There could be uses for nanosecond-precise time synchronization for telemetry applications, like measuring network delays, performance hickups, etc. But those would not be useful for consensus, linearizability, or even taking consistent snapshots. Clock synchronization with epsilon on the order of microseconds would be plenty sufficient for them.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;b&gt;A more robust epsilon is more important than smaller epsilon.&lt;/b&gt; A time synchronization protocol that can provide guaranteed epsilon at the order of 10s of microseconds would be preferable to one that can provide epsilon less than microsecond under ideal conditions but may have milliseconds clock uncertainty under some corner cases.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Some related posts&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/2019/09/do-leases-buy-us-anything.html"&gt;http://muratbuffalo.blogspot.com/2019/09/do-leases-buy-us-anything.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/2021/03/sundial-fault-tolerant-clock.html"&gt;http://muratbuffalo.blogspot.com/2021/03/sundial-fault-tolerant-clock.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/search?q=failure+detector"&gt;http://muratbuffalo.blogspot.com/search?q=failure+detector&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/search?q=time+synchronization"&gt;http://muratbuffalo.blogspot.com/search?q=time+synchronization&lt;/a&gt;&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/3267652187920899412/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=3267652187920899412" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/3267652187920899412"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/3267652187920899412"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/08/does-tightly-synchronized-clocks-help.html" title="Do tightly synchronized clocks help consensus?"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh3.googleusercontent.com/-sLmS9NbRs9E/YRCiAFC_6MI/AAAAAAAAJzw/ZKaBAXyEtscIL0hssUHlPJun2xjIZcr3wCLcBGAsYHQ/s72-w400-h154-c/image.png" height="72" width="72"/>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-8909680176098986305</id>
    <published>2021-08-06T22:48:00.001-04:00</published>
    <updated>2021-08-06T22:48:36.392-04:00</updated>
    <title type="text">Progress beats perfect</title>
    <content type="html">&lt;p&gt;This is a favorite saying of mine. I use it to motivate myself when I feel disheartened about how much I have to learn and improve. If I do a little every day or every week, I will get there. If I get one percent better each day for one year, I'll end up &lt;a href="https://jamesclear.com/continuous-improvement"&gt;thirty-seven times better by the end of the year.&lt;/a&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;$1.01^{365}=37.78$&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Years ago I had read this idea in one of John Ousterhouts life lessons, and it stuck with me.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://gist.github.com/gtallen1187/e83ed02eac6cc8d7e185"&gt;"A little bit of slope makes up for a lot of y-intercept"&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Recently I noticed another advantage of progress over perfect. The emotional&amp;nbsp; advantage.&lt;/p&gt;&lt;p&gt;Progress is better because it makes you feel better as you see improvement. You are getting there, you are making ... progress. Progress is &lt;a href="http://muratbuffalo.blogspot.com/2017/11/book-review-growth-mindset.html"&gt;growth mindset&lt;/a&gt;. You have an opportunity ahead of you.&lt;/p&gt;&lt;p&gt;Perfect feels bad.. It puts you on defense. You have to defend the perfect, you have to keep the appearances. You can only go downwards from perfect, or maintain status quo.&lt;/p&gt;&lt;p&gt;Progress gives you momentum. As long as you &lt;a href="http://muratbuffalo.blogspot.com/2021/03/your-attitude-determines-your-success.html"&gt;manage your emotional status&lt;/a&gt; and don't get disheartened and don't get too impatient.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Ok, I made an AI-generated art for "progress beats perfect" using &lt;a href="https://colab.research.google.com/drive/1n_xrgKDlGQcCF6O-eL3NOd_x4NSqAUjK"&gt;Hillel's Notebook&lt;/a&gt;. If you squint enough you can see the word "perfect" written in letters at the bottom, and a boxer standing on top of it beating it (like the iconic Muhammad Ali pose). For some reason, the boxer has a beatbox face and red hair.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://lh3.googleusercontent.com/--05YdBT8K8E/YQ30CG_MrBI/AAAAAAAAJzY/y5QAUdGtegE97sxsw8UN6cduYadXN41mACLcBGAsYHQ/0800.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="400" data-original-width="400" height="640" src="https://lh3.googleusercontent.com/--05YdBT8K8E/YQ30CG_MrBI/AAAAAAAAJzY/y5QAUdGtegE97sxsw8UN6cduYadXN41mACLcBGAsYHQ/w640-h640/0800.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/8909680176098986305/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=8909680176098986305" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/8909680176098986305"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/8909680176098986305"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/08/progress-beats-perfect.html" title="Progress beats perfect"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh3.googleusercontent.com/--05YdBT8K8E/YQ30CG_MrBI/AAAAAAAAJzY/y5QAUdGtegE97sxsw8UN6cduYadXN41mACLcBGAsYHQ/s72-w640-h640-c/0800.png" height="72" width="72"/>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-3636337118573473839</id>
    <published>2021-07-06T11:19:00.010-04:00</published>
    <updated>2021-07-06T11:19:55.068-04:00</updated>
    <title type="text">Humans of Computer Systems: Frenchie</title>
    <content type="html">&lt;h2 style="text-align: left;"&gt;Programming&lt;/h2&gt;&lt;p&gt;&lt;i&gt;How did you learn to program?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I was lucky that our 5th grade (age 9-10) teacher knew how to use the computers in the school. I learned a little bit of BASIC on a Thomson MO-5. Then I had other hobbies until high school, at which point I joined a semi-formal programming class hosted by a math teacher. That's where I really cut my teeth with Pascal and x86 assembly. Later I got a degree in software engineering.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Tell us about the most interesting/significant piece of code you wrote.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I would mention two.&amp;nbsp;&lt;/p&gt;&lt;p&gt;One is a critical component in a distributed system: several thousand lines of code, highly concurrent, performance sensitive, high risk (data corruption), lots of tests, months to get it right, years of refinements (optimizations, new use cases). Very valuable. It is far from perfect in several ways, but it worked very well in production for many years across many customers. An invisible part of a complex system.&lt;/p&gt;&lt;p&gt;The other is a short script (a couple hundred lines), a mix of shell and awk. It barely changed after one year, but users kept using it for over a decade. Fun to write, easy to use, with human users.&lt;/p&gt;&lt;p&gt;The first thing paid my salary several times over, it was deep, important work. The second was invisible to the business side but very useful to operations, and very fun to write and to use, and I got to help users solve their problems with it. I wish I could spend more (all?) of my time writing such small, useful programs, and not just large, complex systems.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who did you learn most from about computer systems?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Most of what I learned, I learned reading stuff written by many on the internet. But I think I learned at lot of fundamental things, and in more pleasant ways, from programmer friends in high school and college.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who is the greatest programmer you met, and what is impressive about them?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Probably this guy who could write high-performance HP48 assembly code for a stunning video game, at a time when we should both have been 110% busy with academic duty (and the guy got outstanding academic results).&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What is the best code you have seen?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I'm not sure what I would call best. But I was somewhat impressed by CGEN, the system in GNU binutils that, based on a CPU ISA specification written in Scheme, generates almost all of the C code for an assembler, a disassembler and a simulator.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you believe are the most important skills to be successful in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Some level of optimism and self-confidence, because you need to pick up new tech skills as time goes by. Paired with curiosity, because (almost) nobody is going to tell you what to learn next.&lt;/p&gt;&lt;p&gt;A good command of oral and written communication, because you cannot work alone all the time: at a minimum, you work for someone, you must learn from someone.&lt;/p&gt;&lt;p&gt;Personal management, like time management, idea management, note taking, drafting (to put ideas in writing, but not necessarily in code). Having a sense of what needs to be done now, later, or never. Don't be a mouse constantly running in a wheel, without a sense of direction.&lt;/p&gt;&lt;p&gt;Debugging, because very early in our journey, and then time and again, we reach the limits of our understanding, and must stay on top of the systems we create and manage.&lt;/p&gt;&lt;p&gt;Some amount of problem solving in general, some CS fundamentals (data structures, complexity, basics of OS, hardware and language).&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What quality or ability do you value most in a computer systems person?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The ability to understand or design complex systems, where components interact to solve the right problems without creating (too many) new problems.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Personal&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Which of your work/code/accomplishments are you most proud of?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I reinvented distributed tracing from first principles (then read the relevant papers), promoted the idea, designed and developed a working implementation. I was very proud that I came up with the idea on my own.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What comes to you easy that others find hard? What are your superpowers?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I tend to spot a lot of concurrency bugs. It's rather depressing, because it reminds me that there are so many incorrect programs out there, crashing or corrupting the data!&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was a blessing in disguise for you? What seemed like a failure at the time but led to something better later for you?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;My very first project was not the one I was hired for; turns out, I made most of my career from the expertise acquired then.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you feel most grateful for?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;As a seasoned programmer, I probably never will have a hard time finding a job with a decent pay. Since I graduated, money has never been an issue.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What does your perfect day look like?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Hear about someone's itch, find out I know how to solve it with a small piece of code, write it, give it to them, make them happy!&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What made you most happy in the last year?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;We got vaccines for COVID.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Work&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What was your biggest mess up? What was the aftermath?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;A script I wrote had a bug that corrupted data. The first engineer who used it was careful in rolling it out, sensed a problem, mitigated the issue, notified me: I fixed the bug, tested better, helped the engineer restore the data, and no data got lost in the end. But I felt quite bad for a few hours, and lucky that I worked with a smart guy.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was your most interesting/surprising or disappointing interaction at work?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Some people appear way smarter than they actually are: that guy could juggle with a lot of advanced concepts and lingo, he could write a lot of code very quickly, but his systems were full of glaring holes. Any objection to his designs, he would counter with a proposal adding extra complexity that nobody really understood. Eventually I learned to laugh at the absurdity of the situation, but it took me years.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you like most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The medium (code, data) is infinitely malleable.&lt;/p&gt;&lt;p&gt;The need for decent programmers gives us a lot of bargaining power, so we can enjoy good pay and flexibility that most people can only dream of (which is unfair).&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you dislike most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The field is so new that companies are immature and inefficient (and sometimes plain dangerous), and there is so much demand and money that companies get away with it.&lt;/p&gt;&lt;p&gt;Some days I think that a moderate amount of frugality would set certain things straight. Then I remember: it also makes people cut more corners.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What would be the single change that would improve your work environment most?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;A healthy management structure: people managers who actually know how to manage people, and execs who understand systems of people, and know how to set up culture, incentives, and feedback loops between cooperating humans/teams.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Technical&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What do you think are the hardest questions in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;What problems should we solve.&lt;/p&gt;&lt;p&gt;What should we build, what should acquire, what should we discard.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are you most disappointed about the state-of-the-art in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Most computer users have extraordinarily complex and mature apps to help them do their work.&lt;/p&gt;&lt;p&gt;Most programmers are stuck with ancient text editors, debug with print statement, design with MS Word, test with a few unit tests, and just try to guess what would be valuable to users. Our entire toolbox feels lame, at least in most companies, compared to e.g. a CAD suite or video editing.&lt;/p&gt;&lt;p&gt;Why can't I make good systems like others make good spreadsheets?&lt;/p&gt;&lt;p&gt;We should be using more: simulation, model checking, profiling, data viz (for perf analysis, or debugging).&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are the topics that you wish received more attention? What do you think is a promising future direction in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Modeling in general is great, model checking in particular is a game changer.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What is your favorite computer systems paper? Why?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The first that comes to mind is the Google Dapper paper. It exposes a simple, not new, yet very useful idea, it has useful charts and screenshots, it shows great feedback from field use. And when I read it, I felt a lot of validation for my own findings.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are the most interesting blogs/twitter accounts you follow?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Adrian Colyer's The Morning Paper (no longer updated) &lt;a href="https://blog.acolyer.org/"&gt;https://blog.acolyer.org/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Dan Luu &lt;a href="http://danluu.com"&gt;http://danluu.com&lt;/a&gt;/&lt;/li&gt;&lt;li&gt;Marc Brooker &lt;a href="https://brooker.co.za/blog/"&gt;https://brooker.co.za/blog/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Hillel Wayne &lt;a href="https://www.hillelwayne.com/"&gt;https://www.hillelwayne.com/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The Codeless Code (no longer updated) &lt;a href="http://thecodelesscode.com/contents"&gt;http://thecodelesscode.com/contents&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Seth Godin &lt;a href="https://seths.blog/"&gt;https://seths.blog/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Nick Cave (singer-songwriter) &lt;a href="https://www.theredhandfiles.com/"&gt;https://www.theredhandfiles.com/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;But I really recommend reading books, because books can take you so much deeper.&amp;nbsp; I liked those:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;How to solve it, by G. Polya: problem solving for math, applies to other domains&lt;/li&gt;&lt;li&gt;The mythical man-month, by F. Brooks: a (somewhat dated) view of management issues at IBM in the 70s. Still some good parts, mostly the questions it asks.&lt;/li&gt;&lt;li&gt;High output management, by A. Grove: a view of management at Intel by their star CEO. Biased towards large companies, still some good practical advice for small entities.&lt;/li&gt;&lt;li&gt;Thinking, fast and slow, by D. Kahnemann: how our brains trick us into thinking the wrong things (cognitive biases).&lt;/li&gt;&lt;li&gt;Range, by D. Epstein: how generalists beat experts in many ways (I am prone to glorifying expertise, and found this refreshing).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;If you enjoy&amp;nbsp;&lt;a href="http://muratbuffalo.blogspot.com/search/label/humans"&gt;reading this series&lt;/a&gt;,&amp;nbsp;&lt;a href="https://forms.gle/obfZzhTXeDELVVEr8"&gt;consider taking 10 minutes and submitting a response&lt;/a&gt;. All questions are optional. You can skip most, and tell a lot more on other questions you choose.&amp;nbsp;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/3636337118573473839/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=3636337118573473839" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/3636337118573473839"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/3636337118573473839"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/07/humans-of-computer-systems-frenchie.html" title="Humans of Computer Systems: Frenchie"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-1351196551998845396</id>
    <published>2021-07-01T11:00:00.001-04:00</published>
    <updated>2021-07-01T11:00:00.197-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="humans"/>
    <title type="text">Humans of Computer Systems: Goku</title>
    <content type="html">&lt;h2 style="text-align: left;"&gt;Programming&lt;/h2&gt;&lt;p&gt;&lt;i&gt;How did you learn to program?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;In college&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Tell us about the most interesting/significant piece of code you wrote.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;contributed to zfs, oracle file systems (writeback, journal, snapshot compaction)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who did you learn most from about computer systems?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;books, internet, architects&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who is the greatest programmer you met, and what is impressive about them?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Brian bendelorf (ZFS on Linux) maintainer, Matt Ahrens&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What is the best code you have seen?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;zfs, tintri file systems, yugabytedb, linux kernel&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you believe are the most important skills to be successful in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;understanding the fundamentals, not giving up, digging deep&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What quality or ability do you value most in a computer systems person?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Ability to debug code which others have written, mainly to the point that the RCA (root cause analysis) is correct and not superficial&lt;/li&gt;&lt;li&gt;Ability to write clean decent design code at speed&lt;/li&gt;&lt;li&gt;Simplicity in the complete process of systems software development&lt;/li&gt;&lt;li&gt;Adding meaningful debugging stuff to RCA field issues&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Personal&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Which of your work/code/accomplishments are you most proud of?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;zfs snapshot automounting&lt;/li&gt;&lt;li&gt;Tintri file system (fixing customer issues)&lt;/li&gt;&lt;li&gt;RCAing and fixing the most complex issues, most of which were more than a decade old too&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What comes to you easy that others find hard? What are your superpowers?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Debugging complex systems code&lt;/li&gt;&lt;li&gt;Generalising, simplifying systems concepts&lt;/li&gt;&lt;li&gt;Clarity of what needs to be done&lt;/li&gt;&lt;li&gt;Coming up with new ideas&lt;/li&gt;&lt;li&gt;Not giving up&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was a blessing in disguise for you? What seemed like a failure at the time but led to something better later for you?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Initially I struggled a lot with debugging complex issues. I never use to RCA issues completely correctly. More like yes this might be the issue but never was really sure about it.&lt;/p&gt;&lt;p&gt;But with never giving up and always curious about trying to know what happened. It all fell in place well. These days I am able to RCA many issues very quickly, sometimes complex ones in a day also. Which takes other months to RCA.&lt;/p&gt;&lt;p&gt;So, now I feel all that initial trouble was just worth it and all those failures have improved me a lot.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you feel most grateful for?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Being in the line (systems) which I am very passionate about. Basically earning my bread from what I like to do.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What does your perfect day look like?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Work on the feature (design discussions, code reviewers, write code, RCA issues, meetings)&lt;/p&gt;&lt;p&gt;Work on customer issues (sometimes)&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What made you most happy in the last year?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;RCA of critical issues (fsck, linux inode corruption)&lt;/p&gt;&lt;p&gt;Working on file system feature(can't mention much)&lt;/p&gt;&lt;p&gt;Joining distributed systems reading group&lt;/p&gt;&lt;p&gt;Being on twitter reading blogs, tweets of folks in my line&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Work&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What was your biggest mess up? What was the aftermath?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Very initial in the career, was assigned some work in zfs, for that I took an extra hold and the code was checked in. Later we started to see commands being hung, unmount being hung, only to RCA it, it took 2 months and it was a regression of my change and my companies CTO had RCAed it.&amp;nbsp;&lt;/p&gt;&lt;p&gt;That day I learned you cannot write code based on assumptions. Though having said that, production grade systems code are so complex, that even if we want to make no assumptions, we still end of making some only to later figure out that we have introduced a regression. The effort in this direction would be to think through a lot and rethink again for revalidating the code so that most of the issues are caught during writing code and self review and test the code using all the available testing infra.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was your most interesting/surprising or disappointing interaction at work?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Surprising : Most of the times I pick up tough work and I always think, will I be able to pull it of. But I always do, though it always is a rough ride, but the satisfaction of getting it done is immense.&lt;/p&gt;&lt;p&gt;Interesting : I was working for a startup and writing server storage code, which was needed to integrate with high availability (ha) library. I wrote the integration in a day and it was not working. So, I started root causing the issues, only to notice that all the issues were of halib and asked the halib developer what to do. He said you are welcome in fixing them. So I fixed all the issues in that day itself and the integration was successful and it was working smoothly. What I learnt from this was, halib developer had a big heart, in acknowledging the issues and had an even bigger heart to allow me to fix all those issues. So essentially software development is all about team work. If you have great team members, doing any work is always a pleasure&lt;/p&gt;&lt;p&gt;Disappointing : Management saying focus on quality in all all-hands and when though being a developer, I came up with the innovative idea of incorporating novel testing ideas and found many corruption issues was completely ignored.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you like most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Systems software development.&lt;/p&gt;&lt;p&gt;Reading research papers.&lt;/p&gt;&lt;p&gt;Interacting with other technical folks.&lt;/p&gt;&lt;p&gt;Attending conferences, meetups&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you dislike most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Politics affecting growth of good engineers.&lt;/p&gt;&lt;p&gt;Management saying something is important but that actually was just for saying purpose, they actually never meant it.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What would be the single change that would improve your work environment most?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Management being more objective in growth of engineers.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Technical&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What do you think are the hardest questions in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Production grade stable code. All other stuff are also very challenging, but stability is something which even after years of development is very hard to achieve.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are you most disappointed about the state-of-the-art in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Novelty of ideas (mostly though being called different, are internally the same stuff)&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What is your favorite computer systems paper? Why?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Not one but many in the areas of,&lt;/p&gt;&lt;p&gt;corruption handling, recovery&lt;/p&gt;&lt;p&gt;consensus (though not read many)&lt;/p&gt;&lt;p&gt;file systems&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Story&lt;/h2&gt;&lt;p&gt;I was working on a file system for a customer for 3 months, just got the knowledge transfer. There was a customer issue and I was told to look into. All the file system engineers had left the company (since company was bankrupt and another company bought it)&lt;/p&gt;&lt;p&gt;When I spoke with the customer he was very angry since support was not able to bring the box up and there was 1 month of downtime and this had escalated a lot.&lt;/p&gt;&lt;p&gt;I being new to this file system internally was not sure what is going to happen.&amp;nbsp;&lt;/p&gt;&lt;p&gt;But I assured him, that give me 2 days and I will come up with the solution. He was like we have wasted enough time already. Somehow I pacified him and he was ok with 2 days.&lt;/p&gt;&lt;p&gt;I started going through the issue bundle to figure out what it was, only to my surprise this is some issue hit in clones promotion code path, which I am not even familiar. Digging more through it, I got to know that no way I am going to RCA and fix this issue in 2 days.&lt;/p&gt;&lt;p&gt;Then I started looking at, even without fixing the issue can we bring customer machine back online. So luckily there was a tunable to disable it.&lt;/p&gt;&lt;p&gt;Thats when I spoke with the support team to arrange a call with the customer. Accessed the box changed the tunable to disable the feature and voila the box was up :)&lt;/p&gt;&lt;p&gt;So I thought that the customer would be happy now, but he was not :) He said this all is ok, but this is not the fix, whats the fix and when can I get it.&lt;/p&gt;&lt;p&gt;That time I had to tell him that, the issue is being actively worked on and till now since 6-7 years of production deployments we have never seen this issue, so this issue is as new to us as it is to you. So, we will RCA and fix the issue asap in the upcoming releases and we will not just throw it away. This reasoning resonated well with him.&lt;/p&gt;&lt;p&gt;So learnings were,&lt;/p&gt;&lt;p&gt;- Be confident that you will solve the problem even if you know its your first time in this product. If we ourselves are not confident, customers then tend to panic&lt;/p&gt;&lt;p&gt;- If solving problem takes time, try to give what customer needs, in this case no downtime.&lt;/p&gt;&lt;p&gt;- After going through all the hardwork, try to tell the truth to customers, they do understand that you are humans too and will appreciate your work if you have really worked hard to solve their issue&lt;/p&gt;&lt;p&gt;I got an appreciation throughout the company for this issue.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;If you enjoy&amp;nbsp;&lt;a href="http://muratbuffalo.blogspot.com/search/label/humans"&gt;reading this series&lt;/a&gt;,&amp;nbsp;&lt;a href="https://forms.gle/obfZzhTXeDELVVEr8"&gt;consider taking 10 minutes and submitting a response&lt;/a&gt;. All questions are optional. You can skip most, and tell a lot more on other questions you choose.&amp;nbsp;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/1351196551998845396/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=1351196551998845396" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/1351196551998845396"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/1351196551998845396"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/07/humans-of-computer-systems-goku.html" title="Humans of Computer Systems: Goku"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-447851078820954507</id>
    <published>2021-06-29T12:05:00.003-04:00</published>
    <updated>2021-06-29T12:05:14.065-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="humans"/>
    <title type="text">Humans of Computer Systems: IndianDev</title>
    <content type="html">&lt;h2 style="text-align: left;"&gt;Programming&lt;/h2&gt;&lt;p&gt;&lt;i&gt;How did you learn to program?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I started programming at a relatively young age, around 6th standard (in India). Initially leanred HTML, CSS from w3school and online tutorial blogs/videos, then learned C++, mostly from School curriculum book. In college, I throughly enjoyed reading "Thinking in C++".&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Tell us about the most interesting/significant piece of code you wrote.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I remember the first project I did in school which I'm really proud of, even though it was more of a toy fun project. It was an image editor for BMP files, written in C++.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who did you learn most from about computer systems?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Hacker News, I have been following it since high school.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who is the greatest programmer you met, and what is impressive about them?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Interestingly, my own definition of good programmer has changed few times. In college times, I used to admire programmers who had strong algorithmic skills required for ICPC like competitions, but lately I have realised it's equally important for a good programmer to be able to design and write clean and maintainable code.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you believe are the most important skills to be successful in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Learning, a person who wishes to be successful has to keep up with the ever changing technology. Of course, the fundamental ideas of computer science are as important and would most likely remain useful for your entire career.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What quality or ability do you value most in a computer systems person?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Ability to think clearly, communicate clearly, and supportive.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Personal&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Which of your work/code/accomplishments are you most proud of?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Working in academia, where you start off with ideas and bring it into a full working software all by yourself (many work in teams, I however had the luxury to work alone) with experiments validating your hypothesis has been quite rewarding for me.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What comes to you easy that others find hard? What are your superpowers?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I have been surprised by how some programmers are not so good at googling. Most of the time, I have been able to un-block myself by googling the right query and I have found some people either don't understand or probably underestimate this skill.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you feel most grateful for?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;My family and my research advisor, who inspired me to pursue computer science.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What does your perfect day look like?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Programming, with minimal time spend on debugging. Either very few or 0 meetings.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What made you most happy in the last year?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Work from home, had the luxury to intern remotely and then convert to full time position.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Work&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What was your most interesting/surprising or disappointing interaction at work?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;A person who I noticed in my lab used to sit quietly and was fully absorbed in work most of the time. As I got to know him more, it turned out that he talks a lot and have had pleasure talking to him for hours in a stretch on various topics :)&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you like most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I think the compensation and benefits of working in IT companies are far better than other jobs (in my country at least).&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you dislike most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Countless meetings and late working hours, mostly influenced by the team culture.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What would be the single change that would improve your work environment most?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Restrict work timings more strictly.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Technical&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What do you think are the hardest questions in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I work in distributed database systems, blog poster would be a better person to answer this question :)&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are the topics that you wish received more attention? What do you think is a promising future direction in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I find the work on CRDTs exciting. In particular, I'm looking forward to development of more local first softwares https://www.inkandswitch.com/local-first.html&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What is your favorite computer systems paper? Why?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Back when I was working on distributed graph processing, I read a paper on temporal graph algorithms. It became my favourite paper as I had to put some effort to understand the algorithms described and was able to appreciate the beauty once I understood them.&lt;/p&gt;&lt;p&gt;Path Problems in Temporal Graphs (&lt;a href="https://www.vldb.org/pvldb/vol7/p721-wu.pdf"&gt;https://www.vldb.org/pvldb/vol7/p721-wu.pdf&lt;/a&gt;)&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;If you enjoy&amp;nbsp;&lt;a href="http://muratbuffalo.blogspot.com/search/label/humans"&gt;reading this series&lt;/a&gt;,&amp;nbsp;&lt;a href="https://forms.gle/obfZzhTXeDELVVEr8"&gt;consider taking 10 minutes and submitting a response&lt;/a&gt;. All questions are optional. You can skip most, and tell a lot more on other questions you choose.&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/447851078820954507/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=447851078820954507" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/447851078820954507"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/447851078820954507"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/06/humans-of-computer-systems-indiandev.html" title="Humans of Computer Systems: IndianDev"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-6709658678295276997</id>
    <published>2021-06-28T11:16:00.003-04:00</published>
    <updated>2021-06-28T11:16:31.544-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="humans"/>
    <title type="text">Humans of Computer Systems: Dalecooper</title>
    <content type="html">&lt;h2 style="text-align: left;"&gt;Programming&lt;/h2&gt;&lt;p&gt;&lt;i&gt;How did you learn to program?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Two MOOCs: "Python for Everybody" on Coursera, and University of Helsinki's Java MOOC.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Tell us about the most interesting/significant piece of code you wrote.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Decryption processor for use in Apache NiFi&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who did you learn most from about computer systems?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The Internet&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who is the greatest programmer you met, and what is impressive about them?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;My co-worker. His ability to hold onto macro concepts and think about systems as a whole while coding, instead of tunnel-visioning and focusing only on the "micro" aspect of implementation, is impressive.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you believe are the most important skills to be successful in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Communication, critical thinking, and problem-solving (the latter two often going hand-in-hand).&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What quality or ability do you value most in a computer systems person?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Strong communication skills&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Personal&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Which of your work/code/accomplishments are you most proud of?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Creating a decryption processor for use in our data pipelines&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What comes to you easy that others find hard? What are your superpowers?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Finding and quickly absorbing technical documentation/information that is relevant to the problem at hand.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was a blessing in disguise for you? What seemed like a failure at the time but led to something better later for you?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Rejections at companies from my hometown. They were a blessing in disguise because I would not have received the mentorship or the same opportunities for personal growth/development at those companies that I have had at my current company.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you feel most grateful for?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Being in a field where the desire to learn and grow is all you need to get ahead.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What does your perfect day look like?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Solving a tough problem that teaches me something new.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What made you most happy in the last year?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Getting converted to a full-time employee.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;&lt;span style="font-weight: normal;"&gt;Work&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What was your biggest mess up? What was the aftermath?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Haven't really had any big mess ups.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was your most interesting/surprising or disappointing interaction at work?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;When I was working with a coworker I hadn't worked with before, I had to deal with him constantly explaining technical concepts that were not new to me. It was disappointing to see that he had just assumed I didn't know those things.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you like most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Getting to solve interesting, challenging problems&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you dislike most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;In my current job, I dislike that we have to pair program all of the time. I wish it could be optional or more occasional.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What would be the single change that would improve your work environment most?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Not being forced to pair program everyday&amp;nbsp;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;If you enjoy&amp;nbsp;&lt;a href="http://muratbuffalo.blogspot.com/search/label/humans"&gt;reading this series&lt;/a&gt;,&amp;nbsp;&lt;a href="https://forms.gle/obfZzhTXeDELVVEr8"&gt;consider taking 10 minutes and submitting a response&lt;/a&gt;. All questions are optional. You can skip most, and tell a lot more on other questions you choose.&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/6709658678295276997/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=6709658678295276997" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/6709658678295276997"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/6709658678295276997"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/06/humans-of-computer-systems-dalecooper.html" title="Humans of Computer Systems: Dalecooper"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-6337539960102453388</id>
    <published>2021-06-24T10:56:00.000-04:00</published>
    <updated>2021-06-24T10:56:46.414-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="humans"/>
    <title type="text">Humans of Computer Systems: Obdurodon</title>
    <content type="html">&lt;h2 style="text-align: left;"&gt;Programming&lt;/h2&gt;&lt;p&gt;&lt;i&gt;How did you learn to program?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Some college, some self taught, mostly on the job&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Tell us about the most interesting/significant piece of code you wrote.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Cluster manager (leader election + fault detection/response) for HACMP/6000 in 1983. Primitive by today's standards, but cutting edge for its time. Used in production at a significant percentage of banks, retail stores, etc. for about a decade.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who did you learn most from about computer systems?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Various senior/principal engineers at Encore when I was still junior in ~1990. It was one of the early UNIX SMP systems. Learned much of what I know about kernels, TCP/IP, multi-processor synchronization, memory hierarchies, etc.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who is the greatest programmer you met, and what is impressive about them?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;TBH some of the best programmers I've met worked primarily in Verilog, designing chips and tools around them - e.g. Wilson Snyder and others at SiCortex/Veripool. Huge volume, but also rigorous testing leading to *very* low defect rates even for that domain.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you believe are the most important skills to be successful in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Communication/collaboration skills, with the caveat that one must be willing to use them for good. The skills themselves can also be used for personal glory or to form/maintain cliques, which is not good. Drawing together people with complementary skills/interests (especially those who are under-recognized or under-utilized where they are) and keeping them aligned toward a clear goal can produce a whole *much* greater than the sum of its parts.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What quality or ability do you value most in a computer systems person?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Understanding of what it takes to ensure that a particular type of system (e.g. non-DB storage for me) is correct and maintainable/operable in the long term. Understanding how to design a system (especially a distributed one) for these properties, where/how to apply various forms of validation or testing, etc. can make the difference between a system that serves both developers and users vs. one that burns them out.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Personal&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Which of your work/code/accomplishments are you most proud of?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Teaching some hundreds of others the value/importance of making code correct before it ships, and techniques to that end. The idea that I might have helped improve systems that I'll never work on myself pleases me.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What comes to you easy that others find hard? What are your superpowers?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I seem to be better than most at "visualizing" the state of a system with many concurrently moving parts, and anticipating what states it can get into. This extends all the way from debugging (finding the obscure sequence of events leading to an observed failure state) to developing new algorithms for specific purposes.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was a blessing in disguise for you? What seemed like a failure at the time but led to something better later for you?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Being laid off from my first programming job in Michigan. It was kind of traumatic, but it led directly to me moving to where there were *far* more kinds of programming jobs available. As a direct result of the physical move, I also moved from application-level programming to system-level programming - particularly networking and distributed systems.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you feel most grateful for?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;All the people who gave me a chance, from Karl Zinn at UMich's CRLT when I was still a scruffy student to the people who hired or promoted me, who invited me to speak at conferences, who persuaded me to lead entire projects. In many cases, there was little reason to believe I'd be good at The New Thing.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What made you most happy in the last year?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Retiring. :)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Work&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What was your biggest mess up? What was the aftermath?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;It was kind of a slow-motion mess up, but being product architect at Revivio (continuous data protection) was kind of a disaster. It was my job to create alignment between three other teams that were pulling in different directions, so that we could ship a viable product faster. I failed, in large part because I focused too much on the hands-on details and not enough on the big picture. There were reasons, there were certainly others who contributed more to the outcome, but ultimately the company ceased to exist.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was your most interesting/surprising or disappointing interaction at work?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;On at least two occasions, I had to work with engineers who literally just refused to do the things they were supposed to do, preferring to work on their own alternatives instead. One eventually got fired for it, which was very educational for me. The other, even more surprisingly, never did.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you like most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The intellectual/technical challenges, of solving big sets of very hard problems, making everything fit together, and (eventually) producing something of value to users.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you dislike most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The cargo-culting and factionalism, often driven by the dominance of Big Money trying to create/sustain industry behemoths instead of healthy ecosystems.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What would be the single change that would improve your work environment most?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Adoption of remote-friendly communication methods and workflows. "All in one room at the same time" is just not going to be the primary model going forward, and using video etc. to replicate that doesn't work. It's the shared-memory SMP model of work, and it doesn't scale under even moderate latency. Truly scalable teams have to embrace asynchrony and explicit communication, but few do.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Technical&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What do you think are the hardest questions in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;How to balance needs for unity/efficiency vs. isolation/diversity. At the technical level, this appears e.g. as microservices vs. monoliths, and I've been around long enough to see both overdone. At the organizational level it's more about team structures and workflows.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are you most disappointed about the state-of-the-art in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;As I said on Twitter, the focus on features/performance/profit over correctness/sustainability, *especially* among the organizations that are best placed to shift that direction.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are the topics that you wish received more attention? What do you think is a promising future direction in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Somewhere there's an intersection between correctness (formal methods, testing etc.) and composability that needs to be explored to create larger but still integrated (and efficient) systems. Kind of like the old "software components" idea, kind of serial specialization like the FPGA folks keep claiming to enable at the single-machine level but at a whole-system level instead.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What is your favorite computer systems paper? Why?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Probably the Amazon Dynamo paper. There's a lot that it left unaddressed, and of course it describes a proprietary system, but it drew together a lot of previously disparate threads and set off an explosion of activity interesting to me. For a narrower focus, Karger et al on consistent hashing is just very satisfying intellectually and has found more uses than anyone could have predicted.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are the most interesting blogs/twitter accounts you follow?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Yours, of course. ;) Also Vijay Chidambaram, Eric Brewer, Brendan Gregg, Jonathan Ellis.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Story&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Tell us your story.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://obdurodon.silvrback.com/tags/memoirs"&gt;https://obdurodon.silvrback.com/tags/memoirs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;If you enjoy&amp;nbsp;&lt;a href="http://muratbuffalo.blogspot.com/search/label/humans"&gt;reading this series&lt;/a&gt;,&amp;nbsp;&lt;a href="https://forms.gle/obfZzhTXeDELVVEr8"&gt;consider taking 10 minutes and submitting a response&lt;/a&gt;. All questions are optional. You can skip most, and tell a lot more on other questions you choose.&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/6337539960102453388/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=6337539960102453388" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/6337539960102453388"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/6337539960102453388"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/06/humans-of-computer-systems-obdurodon.html" title="Humans of Computer Systems: Obdurodon"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-652160950820876674</id>
    <published>2021-06-23T11:30:00.010-04:00</published>
    <updated>2021-06-23T11:30:00.196-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="humans"/>
    <title type="text">Humans of Computer Systems: A. Jesse Jiryu Davis</title>
    <content type="html">&lt;h2 style="text-align: left;"&gt;Programming&lt;/h2&gt;&lt;p&gt;&lt;i&gt;How did you learn to program?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;First learned with LOGO on an Apple II in an elementary school summer program. Taught myself C++ from a textbook in high school, and majored in Computer Science in college.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Tell us about the most interesting/significant piece of code you wrote.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I wanted to ensure all MongoDB drivers, in a dozen programming languages, implement the MongoDB wire protocol the same. I encoded sample network protocol conversations in YAML, and wrote a multi-language test framework to check that each driver creates the exact messages in the same sequence as in the YAML samples.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who is the greatest programmer you met, and what is impressive about them?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Ben Darnell, whose async Python framework, Tornado, inspired Python's standard asyncio module.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you believe are the most important skills to be successful in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;First, to recognize the engineering challenges worth doing, and do them instead of those that are the most fun or aesthetically satisfying. Second, to follow cutting-edge research and apply the research community's knowledge.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What quality or ability do you value most in a computer systems person?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The ability to debate ideas constructively and pleasantly, for exactly as long as they are worth debating.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Personal&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Which of your work/code/accomplishments are you most proud of?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;"A Web Crawler With asyncio Coroutines", a chapter explaining async I/O, which I co-authored with Guido van Rossum for the "500 Lines or Less" book in the "The Architecture of Open Source Applications" series.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What comes to you easy that others find hard? What are your superpowers?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I can drive an engineering design process to consensus; not always quickly, but reliably. My superpowers are flexibility about the design details, and stubbornness about my commitment to reaching consensus.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was a blessing in disguise for you? What seemed like a failure at the time but led to something better later for you?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;In my first job after college, I did 3D graphics in C++, which was my goal in life since high school. I was terrible at that job due to my immaturity and mental health problems, and when I asked for a leave of absence my boss told me not to return. As a result, I moved to New York City and started learning distributed systems programming, and I have been here doing this ever since.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you feel most grateful for?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;My patient mentors in my second job who taught me to focus and prioritize.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What does your perfect day look like?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Half coding, half designing, no Zooms.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What made you most happy in the last year?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Rock climbing outdoors.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Work&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What was your biggest mess up? What was the aftermath?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;A few years into my career, I wanted to analyze some data in prod, but it was slow so I added an index. Adding the index made Oracle's optimizer choose a new, worse plan for an existing performance-sensitive application query. That query started timing out, and prod went down.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was your most interesting/surprising or disappointing interaction at work?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The surprising was when my boss told me to make a cross-language test framework to enforce all MongoDB drivers' conformance to a spec. I thought it was a foolish overengineered idea, but it turned out to be one of the best software-quality enhancements I've ever seen.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you like most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Thinking hard and flexible hours.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you dislike most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Recurring Zooms.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What would be the single change that would improve your work environment most?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Fewer meetings.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Technical&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What do you think are the hardest questions in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;How to balance safety with everything else users want from software.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are you most disappointed about the state-of-the-art in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Formal methods like TLA+ are little known, hard to learn, and very arduous to use.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are the topics that you wish received more attention? What do you think is a promising future direction in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Bringing formal specification and implementation closer together.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What is your favorite computer systems paper? Why?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I love the Raft paper, for its commitment to explaining simple things simply for the sake of ordinary coders.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are the most interesting blogs/twitter accounts you follow?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Heather Cox Richardson&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Story&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Tell us your story.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Once upon a time I worked for a company with a monolithic Oracle database. We wanted to partition it into two servers, and the Oracle partitioning solution cost six figures. So we split it manually, keeping 2/3 of our customers on the big old server and moving 1/3 of them to a smaller new server. I was tasked with choosing which customers to move. I wrote a simulation of the load on each server given some partitioning scheme, then used a genetic algorithm to choose the optimal partition. Management said, "That's nice but we can't explain it to others," and they just moved all the customers from small US states to the new server instead.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Rant your heart out.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Everyone admires Amazon's style of meetings, where the organizer must write a document and everyone reads it silently at the start of the meeting. Even though everyone admires it, I have never worked for a company that adopted it.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;If you enjoy &lt;a href="http://muratbuffalo.blogspot.com/search/label/humans"&gt;reading this series&lt;/a&gt;,&amp;nbsp;&lt;a href="https://forms.gle/obfZzhTXeDELVVEr8"&gt;consider taking 10 minutes and submitting a response&lt;/a&gt;. All questions are optional. You can skip most, and tell a lot more on other questions you choose.&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/652160950820876674/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=652160950820876674" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/652160950820876674"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/652160950820876674"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/06/humans-of-computer-systems-jesse-jiryu.html" title="Humans of Computer Systems: A. Jesse Jiryu Davis"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-7856729861257540339</id>
    <published>2021-06-22T10:00:00.002-04:00</published>
    <updated>2021-06-22T10:25:01.242-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="humans"/>
    <title type="text">Humans of Computer Systems: afk</title>
    <content type="html">&lt;p&gt;&amp;nbsp;Continuing with the&amp;nbsp;&lt;a href="http://muratbuffalo.blogspot.com/2021/06/humans-of-computer-systems.html"&gt;Humans of Computer Systems series&lt;/a&gt;...&lt;/p&gt;&lt;p&gt;If you enjoy reading this series and like to read more,&amp;nbsp;&lt;a href="https://forms.gle/obfZzhTXeDELVVEr8"&gt;consider taking 10 minutes and submitting a response&lt;/a&gt;. All questions are optional. You can skip most, and tell a lot more on some questions you choose.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Programming&lt;/h2&gt;&lt;p&gt;&lt;i&gt;How did you learn to program?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;self taught, bit more formally than usual&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Tell us about the most interesting/significant piece of code you wrote.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;A search engine&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who did you learn most from about computer systems?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;open source codebases, wikipedia, specifications, man pages. so really the foss community in general.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you believe are the most important skills to be successful in your field?&lt;/i&gt;&lt;/p&gt;successful as in billionaire? marketing.&lt;br /&gt;successful as in stable job? javascript and css nowadays, unfortunately.&lt;br /&gt;successful as in well known but not a billionaire? blogging.&lt;div&gt;successful as in peaceful? ignorance.&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What quality or ability do you value most in a computer systems person?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;communication&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Personal&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What comes to you easy that others find hard? What are your superpowers?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;good api design&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was a blessing in disguise for you? What seemed like a failure at the time but led to something better later for you?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;getting into devops&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you feel most grateful for?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;foss community&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What does your perfect day look like?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;away from computers&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What made you most happy in the last year?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;quitting&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Work&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What was your biggest mess up? What was the aftermath?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;have dropped my share of databases from production. backups have always saved the day so not much of an aftermath really.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you like most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;fairly accessible to a lot of people&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you dislike most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;overly accessible to way too many people&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What would be the single change that would improve your work environment most?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;keyboard embedded in my pant pockets&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Technical&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What do you think are the hardest questions in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;this one. seriously where do I even start? how arp works in 802.11?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are you most disappointed about the state-of-the-art in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;compilation is dog slow, all kernels suck, static analysis is in its infancy still and browsers have created a new level of sucking&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are the topics that you wish received more attention? What do you think is a promising future direction in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;hci&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What is your favorite computer systems paper? Why?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;discovery of lisp, affine typing. nothing modern.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are the most interesting blogs/twitter accounts you follow?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/tedunangst"&gt;tedunangst&lt;/a&gt;, &lt;a href="https://nullprogram.com/"&gt;null program&lt;/a&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/7856729861257540339/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=7856729861257540339" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/7856729861257540339"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/7856729861257540339"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/06/humans-of-computer-systems-afk.html" title="Humans of Computer Systems: afk"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-5368690034912892363</id>
    <published>2021-06-21T08:12:00.002-04:00</published>
    <updated>2021-06-21T08:18:58.947-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="humans"/>
    <title type="text">Humans of Computer Systems: Rafael</title>
    <content type="html">&lt;p&gt;&amp;nbsp;Continuing with the&amp;nbsp;&lt;a href="http://muratbuffalo.blogspot.com/2021/06/humans-of-computer-systems.html"&gt;Humans of Computer Systems serie&lt;/a&gt;s.&lt;/p&gt;&lt;p&gt;If you enjoy reading this series and like to read more, &lt;a href="https://forms.gle/obfZzhTXeDELVVEr8"&gt;consider taking 10 minutes and submitting a response&lt;/a&gt;. All questions are optional. You can skip most, and tell a lot more on some questions you choose.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Programming&lt;/h2&gt;&lt;p&gt;&lt;i&gt;How did you learn to program?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;When I was 7 my teacher gave me a "My First Computer Book" to read, it was for kids, in the 80s. It taught kids how to program in BASIC and I was hooked.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Tell us about the most interesting/significant piece of code you wrote.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I once implemented the original UNIX filesystem for Linux.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who did you learn most from about computer systems?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Helpful people on IRC.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who is the greatest programmer you met, and what is impressive about them?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I don't really know what a great programmer is supposed to be, but I feel like everyone else is better than me at something so I guess... every programmer?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you believe are the most important skills to be successful in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Persistence.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What quality or ability do you value most in a computer systems person?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Patience and willingness to explain things.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Personal&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Which of your work/code/accomplishments are you most proud of?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I think the distributed systems I built when I was studying were pretty darn impressive when I look back and think about it. At least, relatively so, knowing that I did it alone and had very little experience.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What comes to you easy that others find hard? What are your superpowers?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Ooh this is a tough one. Is there anything at all? I mean, I found The Silmarillion riveting but that's neither relevant nor a superpower.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was a blessing in disguise for you? What seemed like a failure at the time but led to something better later for you?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I don't always see it this way but the environment I live in has very little regard for systems work. Perhaps that drove me to study it even harder.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you feel most grateful for?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;That I'm still alive.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What does your perfect day look like?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Spending the day adventuring alone, having good food, listening to good music.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What made you most happy in the last year?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Maybe knowing that the COVID vaccines are effective, and give us hope for ending the pandemic.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Work&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What was your most interesting/surprising or disappointing interaction at work?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;How little co-workers actually _care_ about learning.&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What would be the single change that would improve your work environment most?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Moving out of this country. There is little creativity or freedom, I need intellectual growth.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Technical&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What do you think are the hardest questions in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Can you truly ever make a guarantee of systems reliability? I feel like the answer is "no, but we can make some good ones."&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What is your favorite computer systems paper? Why?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Ken Thompson's classic one on Reflections on Trusting Trust. Again, it made me think about reliability guarantees. Another isn't a systems paper per se but Dijkstra wrote a letter called "The Cruelty of Really Teaching Computer Science" and I thought about it a lot while I was in school; just how much of my curriculum was based on "industry needs", and how much did that actually help my learning?&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are the most interesting blogs/twitter accounts you follow?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Adrian Colyer's Morning Paper is fantastic.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Story&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Rant your heart out.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I live in a country where systems research is under-valued. Things I've been told by people higher up than me : "Operating systems research is a useless topic." from academia, and "there is no business need for what you're interested in" in industry. Since the pandemic began I've not been working, and instead been reading papers and writing toy operating systems. It's the happiest I've ever been.&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/5368690034912892363/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=5368690034912892363" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/5368690034912892363"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/5368690034912892363"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/06/humans-of-computer-systems-rafael.html" title="Humans of Computer Systems: Rafael"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-441524499285256444</id>
    <published>2021-06-20T09:58:00.001-04:00</published>
    <updated>2021-06-21T22:13:37.080-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="humans"/>
    <title type="text">Humans of Computer Systems: Arcot</title>
    <content type="html">&lt;p&gt;&lt;a href=" http://muratbuffalo.blogspot.com/2021/06/humans-of-computer-systems.html"&gt;I had sent out a call for this yesterday&lt;/a&gt;. The idea is to share stories from people working on computer systems (including distributed, security, databases, webservices, OS, hardware, enterprise, cloud etc).&lt;/p&gt;&lt;p&gt;Today one response arrived. Here it is. I enjoyed reading this. I learned about the nature of software work in manufacturing companies. I learned about an interesting blog to follow.&amp;nbsp;&lt;/p&gt;&lt;p&gt;If you enjoy reading this response, and like to read more like that, please take 10 minutes and submit a response. &lt;b&gt;All questions are optional&lt;/b&gt;. (Yesterday I messed up about this due to the bad UI in Google forms. It wasn't clear which direction of "Required" was turning it on vs off. Sorry about it.) You can skip most, and tell a lot more on some questions you choose.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Programming&lt;/h2&gt;&lt;p&gt;&lt;i&gt;How did you learn to program?&amp;nbsp;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Reading manuals, and practice.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Tell us about the most interesting/significant piece of code you wrote.&amp;nbsp;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Code downloader for Comcast Cable card.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who did you learn most from about computer systems?&amp;nbsp;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Usenet discussions&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Who is the greatest programmer you met, and what is impressive about them?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;X: very smart, open to discussion, wrote clear code&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you believe are the most important skills to be successful in your field?&amp;nbsp;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Attention to detail, logical thinking, creativity, at least minimal social skills.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What quality or ability do you value most in a computer systems person?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Being smart. Not being an asshole is a close second.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Personal&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Which of your work/code/accomplishments are you most proud of?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Projects that I help to get working that get used.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you feel most grateful for?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Health; loving family; secure, interesting work; peaceful residence.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What does your perfect day look like?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Programming: coding, design, getting the hardware to work.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What made you most happy in the last year?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Work from home&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Work&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What was your biggest mess up? What was the aftermath?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Took far longer to get something working than I estimated. Project got canceled.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What was your most interesting/surprising or disappointing interaction at work?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Very occasional instances of patronizing condescension.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you like most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Solving puzzles.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What do you dislike most about your job/profession?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Meetings.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What would be the single change that would improve your work environment most?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Work from home.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Technical&lt;/h2&gt;&lt;p&gt;&lt;i&gt;What do you think are the hardest questions in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;How to get projects to work correctly, on time, and on budget.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are you most disappointed about the state-of-the-art in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I generally work for manufacturing companies, which tend to be conservative in their tech. The software tech in the places I've worked is far behind the state of the art in other fields.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are the topics that you wish received more attention? What do you think is a promising future direction in your field?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The software development process in industry, informed by academic research.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What is your favorite computer systems paper? Why?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Not much of a paper reader.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;What are the most interesting blogs/twitter accounts you follow?&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://irreal.org/"&gt;http://irreal.org/&lt;/a&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/441524499285256444/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=441524499285256444" title="1 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/441524499285256444"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/441524499285256444"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/06/humans-of-computer-systems-arcot.html" title="Humans of Computer Systems: Arcot"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>1</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-3054347098065510042</id>
    <published>2021-06-19T13:43:00.007-04:00</published>
    <updated>2021-06-21T22:13:47.717-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="humans"/>
    <title type="text"> Humans of computer systems</title>
    <content type="html">&lt;p&gt;I follow &lt;a href="https://twitter.com/humansofny"&gt;"Humans of New York" account on Twitter,&lt;/a&gt; and I am inspired by the interesting stories of everyday people tell in that account.&amp;nbsp;&lt;/p&gt;&lt;p&gt;I like to have the same thing for "Humans of Computer Systems". I want to read about the human stories from people working on computer systems (including distributed, security, databases, webservices, OS, hardware, enterprise, cloud etc.).&lt;/p&gt;&lt;p&gt;&lt;a href="https://codersatwork.com/"&gt;"Coders at Work"&lt;/a&gt; was a great book. I think it came close to capturing the humans of computer systems vision. But I want to see this to be open to everyday people of computer systems, not just famous coders.&lt;/p&gt;&lt;p&gt;I want to hear human stories from developers, practitioners, graduate students, hobbyists, theoreticians, open-source hackers, hardware hackers, automated verification people, self-learners, veterans, everyone. OK, fine, even machine learning people.&lt;/p&gt;&lt;p&gt;I want this to be instructive as well. Let's learn from everyone. Every one has a story to tell, and interesting thing to teach. And possibly something to gripe about. I want to read about the gripes as well.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href="https://forms.gle/obfZzhTXeDELVVEr8"&gt;I prepared some questions and put them on Google forms.&lt;/a&gt; I will check this periodically and choose some responses and publish them on this blog.&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Let's keep this pseudonymous&lt;/b&gt;. This will keep it interesting, and solve a lot of problems about people being shy or worried about sharing about themselves. Please do respond. You can skip most of the questions. You can tell your heart out on other questions. Keep it human.&amp;nbsp;&lt;/p&gt;&lt;p&gt;I am guessing this will most likely flop. People are lazy. For every 1000 people that reads a blog post, only 1 person writes a comment. I don't know if this will reach enough people. But it is worth trying and I hope this will stick, because I am really curious to read these answers and learn more about the human side of our field at large.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://forms.gle/obfZzhTXeDELVVEr8"&gt;Here is the link to the Google Form. Please do respond.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Programming&amp;nbsp;&lt;/h2&gt;&lt;p&gt;How did you learn to program?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Tell us about the most interesting/significant piece of code you wrote.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Who did you learn most from about computer systems?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Who is the greatest programmer you met, and what is impressive about them?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What do you believe are the most important skills to be successful in your field?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What quality or ability do you value most in a computer systems person?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Personal&lt;/h2&gt;&lt;p&gt;Which of your work/code/accomplishments are you most proud of?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What comes to you easy that others find hard? What are your superpowers?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What was a blessing in disguise for you? What seemed like a failure at the time but led to something better later for you?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What do you feel most grateful for?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What does your perfect day look like?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What made you most happy in the last year?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Work&lt;/h2&gt;&lt;p&gt;What was your biggest mess up? What was the aftermath?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What was your most interesting/surprising or disappointing interaction at work?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What do you like most about your job/profession?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What do you dislike most about your job/profession?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What would be the single change that would improve your work environment most?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Technical&amp;nbsp;&lt;/h2&gt;&lt;p&gt;What do you think are the hardest questions in your field?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What are you most disappointed about the state-of-the-art in computer systems?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What are the topics that you wish received more attention? What do you think is a promising future direction for computer systems work?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What is your favorite computer systems paper? Why?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;What are the most interesting blogs/twitter accounts you follow?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Story&lt;/h2&gt;&lt;p&gt;Is there an interesting story you like to tell us?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Rant your heart out.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Suggest another question for this form, and if you feel like it answer it as well.&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/3054347098065510042/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=3054347098065510042" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/3054347098065510042"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/3054347098065510042"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/06/humans-of-computer-systems.html" title=" Humans of computer systems"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-910572590358489797</id>
    <published>2021-06-18T18:37:00.000-04:00</published>
    <updated>2021-06-18T18:37:45.950-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="distributed transactions"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="paper-review"/>
    <title type="text">FoundationDB Record Layer: A Multi-Tenant Structured Datastore</title>
    <content type="html">&lt;p&gt;&lt;a href="https://arxiv.org/abs/1901.04452"&gt;&lt;br /&gt;This is a 2019 arxiv report&lt;/a&gt;. Back in 2019, when the report was out, I wrote a review about it, but did not publish it then because I felt I didn't have enough information on FoundationDB yet. With &lt;a href="https://www.foundationdb.org/files/fdb-paper.pdf"&gt;FoundationDB Sigmod 2021 paper out recently&lt;/a&gt;, I am now releasing that earlier write up. I will follow up on this soon with a review of the Sigmod21 paper on FoundationDB.&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Introduction&lt;br /&gt;&lt;/h2&gt;&lt;p&gt;FoundationDB made a bold design choice of ACID key-value store. &lt;a href="https://apple.github.io/foundationdb/transaction-manifesto.html"&gt;They had released a transaction manifesto:&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Everyone needs transactions&lt;/li&gt;&lt;li&gt;Transactions make concurrency simple&lt;/li&gt;&lt;li&gt;Transactions enable abstraction&lt;/li&gt;&lt;li&gt;Transactions enable efficient data representations&lt;/li&gt;&lt;li&gt;Transactions enable flexibility&lt;/li&gt;&lt;li&gt;Transactions are not as expensive as you think&lt;/li&gt;&lt;li&gt;Transactions are the future of NoSQL&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;FoundationDB, &lt;a href="https://github.com/apple/foundationdb"&gt;available as opensource&lt;/a&gt;, consists of the transactional minimalist storage engine as the base layer, and other layers are developed on top of the base layer to extend functionality. The record layer, that the report describes, is stateless!&amp;nbsp;&lt;/p&gt;&lt;p&gt;Unfortunately, I couldn't find a paper explaining the base layer, the storage layer of FoundationDB (Update: Now there is the Sigmod'21 paper). This paper skips over the base layer, and I had to learn that through &lt;a href="https://www.youtube.com/watch?v=fN25ERr5nck"&gt;watching some YouTube talks&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;FoundationDB, storage engine&lt;/h2&gt;&lt;div&gt;&lt;a href="http://4.bp.blogspot.com/-zX-sSufNaS8/XFO5Oxu_mZI/AAAAAAAAHsE/Opr94IfZpfcu0ZTvqQGOSKxGigvXf6eKACK4BGAYYCw/s1600/foun2.png"&gt;&lt;img border="0" height="440" src="https://4.bp.blogspot.com/-zX-sSufNaS8/XFO5Oxu_mZI/AAAAAAAAHsE/Opr94IfZpfcu0ZTvqQGOSKxGigvXf6eKACK4BGAYYCw/s640/foun2.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;I wanted to start with the base layer, although it is glossed over in this paper.&amp;nbsp; The above figure from the FoundationDB website shows a logical abstraction picture of the base layer architecture, which is a distributed database that organizes data as an ordered key-value store with ACID transactions. The base layer is composed of two logical clusters, one for storing data and processing transactions, and one for coordinating membership &amp;amp; configuration of the first cluster (using Active Disk Paxos). Reads learn about which version (commit-timestamp) to read from the transactional authority and then directly contact the corresponding storage node to get the value. For commits, the transactional authority "somehow" enforces ACID guarantees and the storage nodes asynchronously copy updates from committed transactions. The paper does not elaborate on this, and says the following. FoundationDB provides ACID multi-key transactions with strictly-serializable isolation, implemented using multi-version concurrency control (MVCC).&amp;nbsp; Neither reads nor writes are blocked by other readers or writers, instead conflicting transactions fail at commit time (and are usually retried by the client).&lt;br /&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This figure is from the FoundationDB storage engine &lt;a href="http://www.youtube.com/watch?v=EMwhsGsxfPU"&gt;technical overview talk&lt;/a&gt;. Unfortunately, there is no paper or documentation explaining this more concrete/detailed architecture figure.&lt;br /&gt;&lt;a href="http://3.bp.blogspot.com/-Mc5_lbpq71Y/XFO68HNVdmI/AAAAAAAAHsQ/3TzlECCfRA0ZHsodJsH_TcSoL7nLC7vVgCK4BGAYYCw/s1600/foun0.png"&gt;&lt;img border="0" height="285" src="https://3.bp.blogspot.com/-Mc5_lbpq71Y/XFO68HNVdmI/AAAAAAAAHsQ/3TzlECCfRA0ZHsodJsH_TcSoL7nLC7vVgCK4BGAYYCw/s400/foun0.png" width="400" /&gt;&lt;/a&gt;&lt;br /&gt;The transactional authority is comprised of 4 different type of components. The &lt;b&gt;master&lt;/b&gt; is tasked with providing increasing monotonic timestamps, which serve as commit-times of transactions. &lt;b&gt;Proxies&lt;/b&gt; accept commit requests and coordinate the commits. There are also &lt;b&gt;resolvers&lt;/b&gt; to check if the transactions conflict with each other and fail the conflicting ones. Resolvers check the recent transactions to see if they have changed the read values in the transaction that the proxy is trying to commit.&amp;nbsp; Resolvers are key-range sharded, for a multikey transaction many need to be contacted, leading to conflict amplification. Resolvers don't know about the decisions others are making for that transaction, so a resolver that thinks the transaction should be OK, may unnecessarily and indirectly causing further transactions to fail on behalf of this non-existing transaction that is potentially a conflict. Finally, the fourth type of component is the &lt;b&gt;transaction logs&lt;/b&gt;. If the transaction clears the resolvers, it will be made durable at the transaction logs. Transaction logs are replicated for durability against a node crash.&lt;br /&gt;&lt;br /&gt;The proxy waits until all transaction logs replicate the transaction, and then sends the commit to the client. Finally, the transaction logs are asynchronously streamed to the storage servers, so that the storage servers can execute them and make them durable. The proxies also need to communicate among each other very frequently: in order to ensure external consistency for Get-Read version requests, each proxy need to be aware of other every committed transaction on that key, which might have happened on another proxy. (I wonder if a data race condition is possible here? Does this mean proxy waits until it hears from all other proxies?) This is an intricate dance. The write takes 3-4 hops, if the components are on different nodes, this is going to add to the latency. The proxies and the resolvers need to exchange information continually, which makes them susceptible to become throughput and latency bottlenecks at scale.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://youtu.be/EMwhsGsxfPU?t=1502"&gt;Even if a single transaction log crashes, FoundationDB will create a new transactional authority cluster (a new master, new proxies, new resolvers, new transactional logs) and transfer the control to the new transactional authority, eliminating the old transactional authority.&lt;/a&gt;&amp;nbsp;This seems excessive to handle a single transaction log/node failure. On the bright side, &lt;a href="http://muratbuffalo.blogspot.com/2011/01/crash-only-software-hotos03.html"&gt;by handling any node failure with the same way&lt;/a&gt;, they get a pretty robust and well-exercised way of recovery.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;The record layer&lt;/h2&gt;Keys are part of a single global namespace, and it is up to the applications to divide and manage that namespace with the help of APIs at higher layers. One example is a tuple layer. The tuple layer encodes tuples into keys such that the binary ordering of those keys preserves the ordering of tuples and the natural ordering of typed tuple elements. A common prefix of the tuple is serialized as a common byte prefix and defines a key subspace. E.g., a client may store the tuple (state, city) and later read using a prefix like (state,*).&lt;br /&gt;&lt;br /&gt;The record layer takes this further. It amends the key-value data model of the base layer, which is insufficient for applications that need structured data storage, indexing, and querying. It also provides the multi-tenancy features the base layer lacks: isolation, resource sharing, and elasticity.&lt;br /&gt;&lt;br /&gt;The record layer provides schema management, a rich set of query and indexing facilities. The layer provides a KeySpace API which exposes the key space like a filesystem directory structure. The record layer also inherits FoundationDB's ACID semantics from the base layer, and ensures secondary indexes are updated transactionally with the data. Finally, it is stateless and lightweight.&lt;br /&gt;&lt;br /&gt;I really like that the record layer is stateless. This simplifies scaling of the compute service: just launch more stateless instances. A stateless design means that load-balancers and routers need only consider where the data (at the base layer) are located, and need not worry about routing to specific compute servers that can serve them.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;The record store abstraction&lt;/h2&gt;The layer achieves resource sharing and elasticity with its &lt;b&gt;record store&lt;/b&gt;&amp;nbsp;abstraction. Each record store is assigned a contiguous range of keys, ensuring that data belonging to different tenants is logically isolated.&lt;br /&gt;&lt;a href="http://3.bp.blogspot.com/-TYI4krXSVbE/XFO9NerA8PI/AAAAAAAAHsc/wMxBjLBnD9oOuMzKL_4r42TPj0haAw9hQCK4BGAYYCw/s1600/foun1.png"&gt;&lt;img border="0" height="285" src="https://3.bp.blogspot.com/-TYI4krXSVbE/XFO9NerA8PI/AAAAAAAAHsc/wMxBjLBnD9oOuMzKL_4r42TPj0haAw9hQCK4BGAYYCw/s400/foun1.png" width="400" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The record store is the key abstraction here. The type of records in a record store are defined with &lt;i&gt;Protocol Buffer&lt;/i&gt; definitions.&lt;br /&gt;&lt;br /&gt;The schema, also called the &lt;b&gt;metadata&lt;/b&gt;, of a record store is a set of record types and index definitions on these types. The metadata is versioned and stored separately.&lt;br /&gt;&lt;br /&gt;The record store is responsible for storing raw records, indexes defined on the record fields, and the highest version of the metadata it was accessed with.&lt;br /&gt;&lt;br /&gt;Isolation between record stores is key for multitenancy. The keys of each record store start with a unique binary prefix, defining a FoundationDB subspace, and the subspaces of different record stores do not overlap. To facilitate resource isolation further, the Record Layer tracks and enforces limits on resource consumption for each transaction, provides &lt;a href="https://en.wikipedia.org/wiki/Continuation"&gt;continuations&lt;/a&gt;&amp;nbsp;to resume work, and can be coupled with external throttling.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Metadata management&lt;/h2&gt;Because the Record Layer is designed to support millions of independent databases with a common schema, it stores metadata separately from the underlying data. The common metadata can be updated atomically for all stores that use it.&lt;br /&gt;&lt;br /&gt;Since records are serialized into the underlying key-value store as Protocol Buffer messages, some basic data evolution properties are inherited. New fields can be added to a record type and show up as uninitialized in&amp;nbsp; old records. New record types can be added without interfering with old records. As a best practice, field numbers are never reused and should be deprecated rather than removed altogether.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Indexing at the record layer&lt;/h2&gt;Index maintenance occurs in the same transaction as the record change itself, ensuring that indexes are always consistent with the data, achieved via FoundationDB's fast multi-key transactions. Efficient index scans use range reads and rely on the lexicographic ordering of stored keys.&lt;br /&gt;&lt;br /&gt;A key expression defines a logical path through records; applying it to a record extracts record field values and produces a tuple that becomes the primary key for the record or key of the index for which the expression is defined.&lt;br /&gt;&lt;br /&gt;The index is updated using FoundationDB’s atomic mutations, which do not conflict with other mutations:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;COUNT: number of records&lt;/li&gt;&lt;li&gt;COUNT UPDATES: num. times a field has been updated&lt;/li&gt;&lt;li&gt;COUNT NON NULL: num. records where a field isn't null&lt;/li&gt;&lt;li&gt;SUM: summation of a&amp;nbsp; field's value across all records&lt;/li&gt;&lt;li&gt;MAX (MIN) EVER: max (min) value ever assigned to a field, over all records, since the index has been created.&lt;/li&gt;&lt;/ul&gt; VERSION indexes are very similar to VALUE indexes in that they define an index entry and a mapping from each entry to the associated primary key; CloudKit uses this index type to implement change-tracking and device synchronization.&lt;br /&gt;&lt;br /&gt;The Record Layer controls its resource consumption by limiting its semantics to those that can be implemented on streams of records. For example, it supports ordered queries (such as in SQL’s ORDER BY clause) only when there is an available index supporting the requested sort order. It doesn't create new joins. It looks like FoundationDB does not fully support SQL. I understand that at some point there was some work on a SQL layer, but it wasn't regarded very highly. "What’s Really New with NewSQL?" paper said this: "We exclude [FoundationDB] because this system was at its core a NoSQL key-value store with an inefficient SQL layer grafted on top of it."&lt;br /&gt;&lt;br /&gt;For the record layer, the paper lists as future work the following: avoiding hotspots, providing more query operations, providing materialized views, and building higher layers providing some SQL like support.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;CloudKit usecase&lt;/h2&gt;FoundationDB is used by CloudKit, Apple's cloud backend service to serve millions of users. Within CloudKit a given application is represented by a logical container, defined by a schema that specifies the record types, typed&amp;nbsp; fields, and indexes that are needed to facilitate efficient record access and queries.&lt;br /&gt;&lt;br /&gt;The application clients store records within named &lt;i&gt;zones&lt;/i&gt;&amp;nbsp;to organize records into logical groups which can be selectively synced across client devices.&lt;br /&gt;&lt;a href="http://3.bp.blogspot.com/-M0-09bj0tY4/XFO-gcCQxrI/AAAAAAAAHso/WEeSweowQ2oSloh_-OB72u5UygV6nlLJQCK4BGAYYCw/s1600/foun3.png"&gt;&lt;img border="0" height="243" src="https://3.bp.blogspot.com/-M0-09bj0tY4/XFO-gcCQxrI/AAAAAAAAHso/WEeSweowQ2oSloh_-OB72u5UygV6nlLJQCK4BGAYYCw/s640/foun3.png" width="640" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;CloudKit was initially implemented using Cassandra; Cassandra prevented concurrency within a zone, and multi-record atomic operations were scoped to a single partition. The implementation of CloudKit on FoundationDB and the Record Layer addresses both issues. Transactions are now scoped to the entire database, allowing CloudKit zones to grow significantly larger than before. Transactions also support concurrent updates to different records within a zone.&lt;br /&gt;&lt;br /&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/910572590358489797/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=910572590358489797" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/910572590358489797"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/910572590358489797"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2019/01/paper-review-foundationdb-record-layer.html" title="FoundationDB Record Layer: A Multi-Tenant Structured Datastore"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://4.bp.blogspot.com/-zX-sSufNaS8/XFO5Oxu_mZI/AAAAAAAAHsE/Opr94IfZpfcu0ZTvqQGOSKxGigvXf6eKACK4BGAYYCw/s72-c/foun2.png" height="72" width="72"/>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-6231045318152208720</id>
    <published>2021-06-16T22:29:00.010-04:00</published>
    <updated>2021-06-17T08:49:43.410-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="book-review"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="research-advice"/>
    <title type="text"> Genius: The Life and Science of Richard Feynman</title>
    <content type="html">&lt;p&gt;This is a 1992 biography of Feynman by James Gleick. The book provides good coverage of both the life and science of Feynman. Having read most of the books about Feynman, I can say that this is the best out there.&amp;nbsp;&lt;/p&gt;&lt;p&gt;In contrast to the other books which were anecdote heavy, this provides a more balanced coverage of Feynman's life and science together. The book also gives good insights into some aspects of Feynman's personality that was missing in the other books. I hadn't read about Feynman's nervous break down on his father's grave, his depressive episodes, and his rivalry with other physicians before. The book also has a chapter discussing Feynman's unacceptable attitude towards women.&lt;/p&gt;&lt;p&gt;The science coverage in the book is top notch, and gives a detailed explanation of how the field of quantum physics started and grew in to a discipline alongside Feynman's life. We get a good picture of how the proposed theories get refined and evolve as they interact with other theories and physicians both on the theory and practice side of the coin. While covering the science, the book manages to remain readable and captivating.&lt;/p&gt;&lt;p&gt;My most important takeaway from the book is that Feynman's success is due to his strong background in Math that he acquired himself during his middle school and high school years. He checked out Math books from libraries and studied them by himself. He not only learned from them, he has internalized everything. He invented his own notation for trigonometry and he &lt;a href="https://www.cantorsparadise.com/richard-feynmans-integral-trick-e7afae85e25c"&gt;custom-modified methods for integration for himself.&amp;nbsp;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;"I had learned to do integrals by various methods shown in a book that my high school physics teacher Mr. Bader had given me. [It] showed how to differentiate parameters under the integral sign — it’s a certain operation. It turns out that’s not taught very much in the universities; they don’t emphasize it. But I caught on how to use that method, and I used that one damn tool again and again. [If] guys at MIT or Princeton had trouble doing a certain integral, [then] I come along and try differentiating under the integral sign, and often it worked. So I got a great reputation for doing integrals, only because my box of tools was different from everybody else’s, and they had tried all their tools on it before giving the problem to me."&lt;/i&gt; --- (Surely you’re Joking, Mr. Feynman!)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;What I cannot create, I do not understand.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Feynman had this quote on his office blackboard. When he read papers by others, he would stop after problem statement, and try to construct the result himself. When he was learning about a new proposed theory, he would explain it in his terms and make it his own, and then simplify and improve on it. Feynman is famous for his great intuition and creativity, but these actually stem from his strong analytical skills and his internalization of all the legwork leading to the theory. &lt;a href="http://muratbuffalo.blogspot.com/2018/03/master-your-tools.html"&gt;He surely had mastered his tools&lt;/a&gt; and so he could apply them to new problems with ease.&lt;/p&gt;&lt;p&gt;Of course, another big part of Feynman is his passionate curiosity. This is likely seeded by his interactions with his father as a kid. Feynman has also carefully cultivated his curiosity throughout his life. When he failed to do so, he has suffered from being blocked and unable to do any work. I am guessing that his being a good story teller made it easy for him to &lt;a href="http://muratbuffalo.blogspot.com/2021/03/your-attitude-determines-your-success.html"&gt;regulate/cultivate his curiosity and drive.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Some highlights from the first chapters of the book&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Architect of quantum theories, brash young group leader on the atomic bomb project, inventor of the ubiquitous Feynman diagram, ebullient bongo player and storyteller, Richard Phillips Feynman was the most brilliant, iconoclastic, and influential physicist of modern times. He took the half-made conceptions of waves and particles in the 1940s and shaped them into tools that ordinary physicists could use and understand.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;One team of physicists, assembled for the Manhattan Project, met him for the first time in Chicago, where he solved a problem that had baffled them for a month. It was “a shallow way to judge a superb mind,” one of them admitted later, but they had to be impressed, by the unprofessorial manner as much as the feat itself: “Feynman was patently not struck in the prewar mold of most young academics. He had the flowing, expressive postures of a dancer, the quick speech we thought of as Broadway, the pat phrases of the hustler and the conversational energy of a finger snapper.” Physicists quickly got to know his bounding theatrical style, his way of bobbing sidelong from one foot to the other when he lectured. They knew that he could never sit still for long and that when he did sit he would slouch comically before leaping up with a sharp question.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;For years he offered a mysterious noncredit course called Physics X, for undergraduates only, in a small basement room. Some physicists years later remembered this unpredictable free-form seminar as the most intense intellectual experience of their education. Above all in 1961 he took on the task of reorganizing and teaching the introductory physics course at Caltech. For two years the freshmen and sophomores, along with a team of graduate-student teaching assistants, struggled to follow a tour de force, the universe according to Feynman. The result was published and became famous as “the red books”—The Feynman Lectures on Physics. They reconceived the subject from the bottom up.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;In private, with pencil on scratch paper, he labored over aphorisms that he later delivered in spontaneous-seeming lectures: Nature uses only the longest threads to weave her patterns, so each small piece of her fabric reveals the organization of the entire tapestry.&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;There were other kinds of scientific knowledge, but pragmatic knowledge was Feynman’s specialty. For him knowledge did not describe; it acted and accomplished. Unlike many of his colleagues, educated scientists in a cultivated European tradition, Feynman did not look at paintings, did not listen to music, did not read books, even scientific books. He refused to let other scientists explain anything to him in detail, often to their immense frustration. He learned anyway. He pursued knowledge without prejudice. During a sabbatical he learned enough biology to make a small but genuine contribution to geneticists’ understanding of mutations in DNA. He once offered (and then awarded) a one-thousand-dollar prize for the first working electric motor less than one sixty-fourth of an inch long, and his musing on the possibilities of tiny machinery made him, a generation later, the intellectual father of a legion of self-described nanotechnologists. In his youth he experimented for months on end with trying to observe his unraveling stream of consciousness at the point of falling asleep. In his middle age he experimented with inducing out-of-body hallucinations in a sensory-deprivation tank, with and without marijuana.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;“An honest man, the outstanding intuitionist of our age, and a prime example of what may lie in store for anyone who dares to follow the beat of a different drum.”&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Melville Feynman (he pronounced his surname like the more standard variants: Fineman or Feinman) came from Minsk, Byelorussia.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;There were no second thoughts in the middle-class Jewish families of New York about the value of ambition on the children’s behalf.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;The adult Richard Feynman became an adept teller of stories about himself, and through these stories came a picture of his father as a man transmitting a set of lessons about science.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Still, his score on the school IQ test was a merely respectable 125.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;For students whose competitive instincts could not be satisfied on the baseball field, New York’s high schools had the Interscholastic Algebra League: in other words, math team.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;In his senior year, when all the city’s public and private schools competed in the annual championship at New York University, Feynman placed first.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;He memorized tables of logarithms and practiced mentally deriving values in between. He began to fill notebooks with formulas, continued fractions whose sums produced the constants π and e.&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;Feynman could sink into a trance of concentration that even his family found unnerving.&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;The adult Feynman asked: If all scientific knowledge were lost in a cataclysm, what single statement would preserve the most information for the next generations of creatures? How could we best pass on our understanding of the world? He proposed, “All things are made of atoms—little particles that move around in perpetual motion, attracting each other when they are a little distance apart, but repelling upon being squeezed into one another,”&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Philosophy at MIT only irritated Feynman more. It struck him as an industry built by incompetent logicians.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Feynman had developed an appetite for new problems—any problems. He would stop people he knew in the corridor of the physics building and ask what they were working on. They quickly discovered that the question was not the usual small talk. Feynman pushed for details.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Developing a theory for reflection by multiple-layer thin films was not so different for Feynman from math team in the now-distant past of Far Rockaway. He could see, or feel, the intertwined infinities of the problem, the beam of light resonating back and forth between the pair of surfaces, and then the next pair, and so on, and he had a giant mental kit bag of formulas to try out.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;It took him a few pages to demonstrate a better method. He showed that one could calculate the force directly for a given configuration, without having to look at nearby configurations at all. His computational technique led directly to the slope of the energy curve—the force—instead of producing the full curve and deriving the slope secondarily. The result caused a small sensation among MIT’s physics faculty.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;A handwritten postscript that would not appear on the carbon copies Slater got to the point: “Feynman of course is Jewish ...” He wanted to assure Smyth there were mitigating circumstances: ... but as compared for instance with Kanner and Eisenbud he is more attractive personally by several orders of magnitude. We’re not trying to get rid of him—we want to keep him, and privately hope you won’t give him anything. But he apparently has decided to go to Princeton. I guarantee you’ll like him if he does. Morse, too, reported that Feynman’s “physiognomy and manner, however, show no trace of this characteristic and I do not believe the matter will be any great handicap.”&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Quantum mechanics was triumphing not because a few leading theorists found it mathematically convincing, but because hundreds of materials scientists found that it worked. It gave them insights into problems that had languished, and it gave them a renewed livelihood. One had only to understand the manipulation of a few equations and one could finally compute the size of an atom or the precise gray sheen of a pewter surface.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Jehle told Feynman he had made an important discovery. He was struck by the unabashed pragmatism in Feynman’s handling of the mathematics, so different from Dirac’s more detached, more aesthetic tone. “You Americans!” he said. “Always trying to find a use for something.”&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;The Feynman aura—as it had already become—was strictly local. Feynman had not yet finished his second year of graduate school. He remained ignorant of the basic literature and unwilling even to read through the papers of Dirac or Bohr. This was now deliberate. In preparing for his oral qualifying examination, a rite of passage for every graduate student, he chose not to study the outlines of known physics. Instead he went up to MIT, where he could be alone, and opened a fresh notebook. On the title page he wrote: Notebook Of Things I Don’t Know About. For the first but not the last time he reorganized his knowledge. He worked for weeks at disassembling each branch of physics, oiling the parts, and putting them back together, looking all the while for the raw edges and inconsistencies. He tried to find the essential kernels of each subject. When he was done he had a notebook of which he was especially proud.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;It was said of Feynman that he had an extraordinary physical intuition, but that alone did not account for his analytic power.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Just as some people see numerals in color in their mind’s eye, Feynman associated colors with the abstract variables of the formulas he understood so intimately. “As I’m talking,” he once said, “I see vague pictures of Bessel functions from Jahnke and Emde’s book, with light tan j’s, slightly violet-bluish n’s, and dark brown x’s flying around. And I wonder what the hell it must look like to the students.”&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;He did not wait, as Bethe did, to double-check every intuitive leap. His first idea did not always work. His cannier colleagues developed a rule of thumb: If Feynman says it three times, it’s right.&lt;/i&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/6231045318152208720/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=6231045318152208720" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/6231045318152208720"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/6231045318152208720"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/06/genius-life-and-science-of-richard.html" title=" Genius: The Life and Science of Richard Feynman"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-13758432581117004</id>
    <published>2021-06-12T10:36:00.011-04:00</published>
    <updated>2021-06-12T13:05:17.178-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="automated reasoning"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="fault-tolerance"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="formal methods"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="paper-review"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="programming"/>
    <title type="text"> Silent data corruptions at scale</title>
    <content type="html">&lt;p&gt;&lt;a href="https://arxiv.org/pdf/2102.11245.pdf"&gt;This paper from Facebook (Arxiv Feb 2021)&lt;/a&gt; is referred in &lt;a href="http://muratbuffalo.blogspot.com/2021/06/cores-that-dont-count.html"&gt;the Google fail-silent Corruption Execution Errors (CEEs) paper&lt;/a&gt; as the most related work. Both papers discuss the same phenomenon, and say that we need to update our belief about quality-tested CPUs not having logic errors, and that if they had an error it would be a fail-stop or at least fail-noisy hardware errors triggering machine checks.&lt;/p&gt;&lt;p&gt;This paper provides an account of how Facebook have observed CEEs over several years. After running a wide range of silent error test scenarios across 100K&amp;nbsp; machines, they found that 100s of CPUs are identified as having these errors, showing that CEEs are a systemic issue across generations. This paper, as the Google paper, does not name specific vendor or chipset types. Also the ~1/1000 ratio reported here matches the ~1/1000 mercurial core ratio that the Google paper reports.&lt;/p&gt;&lt;p&gt;The paper claims that silent data corruptions can occur due to device characteristics and are repeatable at scale. They observed that these failures are reproducible and not transient. Then, how come did these CPUs pass the quality control tests by the chip producers? In soft-error based fault injection studies by chip producers, CPU CEEs are evaluated to be a one in a million occurrence, not 1 in 1000 observed at deployment at Facebook and Google. The paper says that CPU CEEs occur at a higher rate due to minimal error correction within functional blocks. I think different environment conditions (frequency, voltage, temperature) and aging/wearing also plays a role in increased error rates.&lt;/p&gt;&lt;p&gt;The paper also says that increased density, technology scaling, and wider datapaths increase the probability of silent errors. It claims CEEs is not limited to CPUs and is applicable to special function accelerators and other devices with wide &lt;a href="https://en.wikipedia.org/wiki/Datapath"&gt;datapaths&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Application level impact of silent corruptions&lt;/h2&gt;&lt;p&gt;The paper gives an example of an actual CEE detected in a Spark deployment, and says that this would lead data loss.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://lh3.googleusercontent.com/-edGtrSlmRro/YMTEafT3J9I/AAAAAAAAJv4/_DWwt5c8mSs0FrQ1Gd1YYpp8zHNsxtacACLcBGAsYHQ/Screen%2BShot%2B2021-06-12%2Bat%2B10.27.50%2BAM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="1040" data-original-width="1592" height="418" src="https://lh3.googleusercontent.com/-edGtrSlmRro/YMTEafT3J9I/AAAAAAAAJv4/_DWwt5c8mSs0FrQ1Gd1YYpp8zHNsxtacACLcBGAsYHQ/w640-h418/Screen%2BShot%2B2021-06-12%2Bat%2B10.27.50%2BAM.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;"In one such computation, when the file size was being computed, a file with a valid file size was provided as input to the decompression algorithm, within the decompression pipeline. The algorithm invoked the power function provided by the Scala library (Scala: A programming language used for Spark). Interestingly, the Scala function returned a 0 size value for a file which was known to have a non-zero decompressed file size. Since the result of the file size computation is now 0, the file was not written into the decompressed output database.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Imagine the same computation being performed millions of times per day. This meant for some random scenarios, when the file size was non-zero, the decompression activity was never performed. As a result, the database had missing files. The missing files subsequently propagate to the application. An application keeping a list of key value store mappings for compressed files immediately observes that files that were compressed are no longer recoverable. This chain of dependencies causes the application to fail. Eventually the querying infrastructure reports critical data loss after decompression. The problem’s complexity is magnified as this manifested occasionally when the user scheduled the same workload on a cluster of machines. This meant the patterns to reproduce and debug were non-deterministic."&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;They also explain how they debugged and root-caused this problem.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://lh3.googleusercontent.com/-Rn7bGjOE_ZU/YMTE87Kbl8I/AAAAAAAAJwA/vbSoZMMN0WkmbeS7aHN48M7OaCP9uJVUQCLcBGAsYHQ/Screen%2BShot%2B2021-06-12%2Bat%2B10.30.06%2BAM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="1404" data-original-width="1746" height="515" src="https://lh3.googleusercontent.com/-Rn7bGjOE_ZU/YMTE87Kbl8I/AAAAAAAAJwA/vbSoZMMN0WkmbeS7aHN48M7OaCP9uJVUQCLcBGAsYHQ/w640-h515/Screen%2BShot%2B2021-06-12%2Bat%2B10.30.06%2BAM.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;"Once the reproducer is obtained in assembly language, we optimize the assembly for efficiency. The assembly code accurately reproducing the defect is reduced to a 60-line assembly level reproducer. We started with a 430K line reproducer and narrowed it down to 60 lines. Figure 3 provides a high level debug flow followed for root-causing silent errors."&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Musings&lt;/h2&gt;&lt;p&gt;The closest I worked to the metal was between 2000-2005,&amp;nbsp; when I worked hands on with 100s of wireless sensor network nodes. We routinely found bad sensor boards (with spurious detections or no detections at all) and bad radios. Generally bad radios came in pair: when the frequency of two radios differ significantly from each other, those two could not talk to each other, but neither of them had issue talking to some other radios.&amp;nbsp;&lt;/p&gt;&lt;p&gt;With low quality control, the sensor nodes had higher rate of bad sensors and radios. I guess there is a big analog component involved in sensors and radios in contrast to chips as well. We did not really observe fail-safe CEEs, but who knows. We didn't have access to 100K nodes, and we didn't have good observation in to node computations: since the nodes are low-power and have limited resources it was hard to extract detailed log information from them.&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Coming back to datacenter computing, in the face of this fail-silent CEE phenomenon what is our next move? Chip producers should up their quality control game. But I think this won't be enough. As both papers show the CEEs may start to manifest after aging and under certain environmental conditions. A practical solution for the developers is to code more defensively: introduce more preconditions/postconditions, assert statements, and even high-level (specification-level) monitors to double check sanity of code when checking is cheaper than computation.&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/13758432581117004/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=13758432581117004" title="1 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/13758432581117004"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/13758432581117004"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/06/silent-data-corruptions-at-scale.html" title=" Silent data corruptions at scale"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh3.googleusercontent.com/-edGtrSlmRro/YMTEafT3J9I/AAAAAAAAJv4/_DWwt5c8mSs0FrQ1Gd1YYpp8zHNsxtacACLcBGAsYHQ/s72-w640-h418-c/Screen%2BShot%2B2021-06-12%2Bat%2B10.27.50%2BAM.png" height="72" width="72"/>
    <thr:total>1</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-5594540134997207939</id>
    <published>2021-06-06T23:49:00.008-04:00</published>
    <updated>2021-06-08T11:17:40.717-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="fault-tolerance"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="paper-review"/>
    <title type="text"> Cores that don't count</title>
    <content type="html">&lt;p&gt;&lt;a href="https://sigops.org/s/conferences/hotos/2021/papers/hotos21-s01-hochschild.pdf"&gt;This paper is from Google and appeared at HotOS 2021&lt;/a&gt;. There is also a very nice &lt;a href="https://www.youtube.com/watch?v=QMF3rqhjYuM&amp;amp;ab_channel=ACMSIGOPS"&gt;10 minute video presentation for it.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;So Google found fail-silent Corruption Execution Errors (CEEs) at CPU/cores. This is interesting because we thought tested CPUs do not have logic errors, and if they had an error it would be a fail-stop or at least fail-noisy hardware errors triggering machine checks. Previously we had known about fail-silent storage and network errors due to bit flips, but the CEEs are new because they are computation errors. While it is easy to detect data corruption due to bit flips, it is hard to detect CEEs because they are rare and require expensive methods to detect/correct in real-time.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;What are the causes of CEEs?&lt;/h2&gt;&lt;p&gt;This is mostly due to ever-smaller feature sizes that push closer to the limits of CMOS scaling, coupled with ever-increasing complexity in architectural design. Together, these create new challenges for the verification methods that chip makers use to detect diverse manufacturing defects --especially those defects that manifest in corner cases (under certain voltage, frequency, temperature), or only after post-deployment aging. &lt;a href="https://youtu.be/NGFhc8R_uO4"&gt;Chip manifacturing is magic&lt;/a&gt;, and with 5nm technology some gates are of the length of 10 atoms, which can lead to flaky behavior.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Are CEEs reproducible? How do they manifest themselves?&lt;/h2&gt;&lt;p&gt;The paper says this. CEEs are harder to root-cause than software bugs, which we usually assume we can debug by reproducing on a different machine. In just a few cases, we can reproduce the errors deterministically; usually the implementation-level and environmental details have to line up. Data patterns can affect corruption rates, but it’s often hard for us to tell. Some specific examples where we have seen CEE:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Violations of lock semantics leading to application data corruption and crashes.&lt;/li&gt;&lt;li&gt;Data corruptions exhibited by various load, store, vector, and coherence operations.&lt;/li&gt;&lt;li&gt;A deterministic AES mis-computation, which was “self-inverting”: encrypting and decrypting on the same core yielded the identity function, but decryption elsewhere yielded gibberish.&lt;/li&gt;&lt;li&gt;Corruption affecting garbage collection, in a storage system, causing live data to be lost.&lt;/li&gt;&lt;li&gt;Database index corruption leading to some queries, depending on which replica (core) serves them, being non- deterministically corrupted.&lt;/li&gt;&lt;li&gt;Repeated bit-flips in strings, at a particular bit position (which stuck out as unlikely to be coding bugs).&lt;/li&gt;&lt;li&gt;Corruption of kernel state resulting in process and kernel crashes and application malfunctions.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;How dangerous is this?&lt;/h2&gt;&lt;p&gt;It is a serious problem. The paper says that Google has already applied many engineering decades to the problem. Because CEEs may be correlated with specific execution units within a core, they expose us to large risks appearing suddenly and unpredictably due to seemingly-minor software changes, such as an innocuous change to a low-level library. Only a small subset of the server machines (called mercurial cores) would be effected with the CEEs.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Which chipsets do they occur and how frequently?&lt;/h2&gt;&lt;p&gt;The paper does not reveal too much information about CEEs. They don't even mention which chips they observed these. They don't reveal the rate of mercurial cores, but at one place mention 1 in 1000 is possible.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;How do we detect and mitigate fail-silent CEEs?&lt;/h2&gt;&lt;p&gt;With storage and networking, the "right result" is obvious and simple to check: it’s the identity function. That enables the use of coding-based techniques to tolerate moderate rates of correctable low-level errors in exchange for better scale, speed, and cost. Detecting CEEs, conversely, seems to imply a factor of two of extra work. Automatic correction seems to possibly require triple modular redundancy. Most computational failures cannot be addressed by coding. Storage and networking can better tolerate low-level errors because they typically operate on relatively large chunks of data, such as disk blocks or network packets. This allows corruption-checking costs to be amortized, which seems harder to do at a per-instruction scale.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Is this Byzantine failure?&lt;/h2&gt;&lt;p&gt;I think fail-silent CEEs is weaker than the adversary Byzantine failure model. The chips do not arbitrarily/fully deviate from the protocols. On the other hand, it is likely stronger than transient memory corruption because the corruption may keep reintroduced because it is coming from computation.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Further reading?&lt;/h2&gt;&lt;p&gt;&lt;a href="https://arxiv.org/pdf/2102.11245.pdf"&gt;This recent report from Facebook also reports fail-silent CEEs.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;What, going forward?&lt;/h2&gt;&lt;p&gt;Maybe this will lead to abondonment of complex deep-optimizing chipsets like Intel chipsets, and make simpler chipsets, like ARM chipsets, more popular for datacenter deployments. AWS has started using &lt;a href="https://aws.amazon.com/ec2/graviton/ "&gt;ARM-based Graviton cores&lt;/a&gt; due to their energy-efficiency and cost benefits, and avoiding CEEs could give boost to this trend.&amp;nbsp;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/5594540134997207939/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=5594540134997207939" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/5594540134997207939"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/5594540134997207939"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/06/cores-that-dont-count.html" title=" Cores that don't count"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-4886257725411399514</id>
    <published>2021-05-29T23:07:00.000-04:00</published>
    <updated>2021-05-29T23:07:03.295-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="automated reasoning"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="misc"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="research-advice"/>
    <title type="text"> Tale of two cities</title>
    <content type="html">&lt;p&gt;In January, I took a one year leave of absence from the University at Buffalo and joined Amazon's Automated Reasoning Group at AWS S3. At S3-ARG, our mission is to apply formal methods for verification of large scale distributed systems to provide durability, availability, and security guarantees. It has been 5 months, and I am loving it.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Going forward I will have more opportunities to talk about my work at S3-ARG. Today, I wanted to reflect on the difference of objectives/incentives in industry and academia and how that shapes the corresponding landscapes. What I write is *my subjective experiences*. At both places I have been blessed with great colleagues and great working environments, so my comparison is mostly about relative merits of ideal positions in academia and industry.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;What's the goal?&lt;/h2&gt;&lt;p&gt;The goal of academic research in CSE is to sell a new vision of 10 years in the future.&amp;nbsp; In academia, there is a very perverse prioritization of novelty over practicality, usefulness and thoroughness. For example, &lt;a href="http://muratbuffalo.blogspot.com/2020/02/how-to-write-papers-so-they-get-accepted.html"&gt;the function of academic writing is NOT to communicate your ideas, but to change the ideas of an existing community&lt;/a&gt;, to convince them of your novel idea/vision. &lt;a href="https://twitter.com/muratdemirbas/status/1302210899109969920"&gt;Complex solutions and writing&lt;/a&gt; may serve for this vision because they act as &lt;a href="https://en.wikipedia.org/wiki/Handicap_principle"&gt;a costly signaling mechanism&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The goal of industrial work is to fulfill the needs of the customer/business and deliver value now. Novelty is not important, the important thing is the value provided. Complexity should be avoided because it conflicts with the goal of delivering on time.&lt;/p&gt;&lt;p&gt;These stark differences in objectives shape the landscape of industrial and academic work.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;The industrial landscape&lt;/h2&gt;&lt;p&gt;I was surprised to find an order of magnitude more collaboration in the industry than academia. Academia is a lonely game. Due to the obsession on novelty, if you have a good idea you like to keep it to yourself to get the credit. In industry it is common for even people across different teams to collaborate to create value as both parties get credit for the value created.&amp;nbsp; Unlike academic collaboration that has to be very deep and that seldom bears fruit (both issues stemming from the novelty requirement), collaboration in industry works faster and helps parties make progress quickly.&lt;/p&gt;&lt;p&gt;This collaborative spirit also comes through in terms of support frameworks. In industry (remember I am talking about well run teams), your manager and team tries to help your success, because they are in the same boat with you and they are invested in you. In academia, your performance and status is unaffected by an underperforming colleague. The common attitude departments have for new faculty is to wait and watch who would swim and who would sink. The worthy shall survive (!). After seeing how thorough the orientation process is at Amazon, I felt ashamed that we are doing our students and Assistant Professors an injustice. We should give them a 2-3 weeks bootcamp to give them the proper mindset and tools to be successful.&lt;/p&gt;&lt;p&gt;Another thing that surprised me about industry is the amount of intellectual stimulation there. There are tons of stuff to learn and a lot of internal talk videos and reading material to learn from. I am getting two hours a week of individual help from a mentor in my team in deductive formal methods. It feels like getting another PhD.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;The academic landscape&amp;nbsp;&lt;/h2&gt;&lt;p&gt;The long lookahead time in academia affects your cadence. If you miss a conference deadline, the next one will arrive in a couple months, why worry? No one depends on your work, and it is OK for your groundbreaking vision to wait for another 6 months to surface. In contrast in industry, there is a lot at stake. Other people and teams depend on your work, and you have tight non-negotiable deadlines to deliver at, which can be stressful.&lt;/p&gt;&lt;p&gt;At academia, you are free (actually incentivized) to drop something the point you are bored or overwhelmed with it. You are supposed to find interesting novel problems so you should be picky. This is not as good as it sounds. I often find myself wasting too much time for picking a worthy problem, which makes me feel guilty that I am idling too much. It is the price to pay for chasing novelty.&lt;/p&gt;&lt;p&gt;In industry you can't drop work when you are bored or overwhelmed with it. You are stuck with the project until it is done, or at least by the end of the year because most allocations are made annually. This is also not as bad as it sounds, because you can change areas every couple years or so. Many people move across problem domains, teams, and even departments to take on new problems.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;A hot take after 5 months&lt;/h2&gt;&lt;p&gt;My department chair lives in my neighborhood, and last week he saw me in front of my house. We chatted to catch up on things. He asked me if the work at Amazon is much harder than the faculty position. I hadn't thought about that question before. I think I surprised both of us when I said the faculty position is actually much harder. At the Amazon job, I have one project to worry about. But at the faculty job, I have to worry about multiple projects with multiple students, worry about raising money from research grants, worry about teaching, administrative responsibilities, and service duties.&amp;nbsp;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/4886257725411399514/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=4886257725411399514" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/4886257725411399514"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/4886257725411399514"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/05/tale-of-two-cities.html" title=" Tale of two cities"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-2001159087574010954</id>
    <published>2021-04-01T20:36:00.007-04:00</published>
    <updated>2021-04-01T20:53:33.758-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="formal methods"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Rust"/>
    <title type="text">Building Distributed Systems With Stateright</title>
    <content type="html">&lt;p&gt;Stateright is a model checker for distributed systems. It is provided as a Rust library, and it allows you to verify systems implemented in Rust. &lt;a href="https://github.com/stateright/stateright"&gt;It is openly available on GitHub&lt;/a&gt; and the developer, Jon Nadal, is looking for contributors and new users. &amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;On Tuesday Jon gave a presentation to us on Zoom. He made &lt;a href="https://www.stateright.rs/2021-03-30"&gt;his presentation slides available here.&lt;/a&gt; We have also recorded Jon's presentation and the Q&amp;amp;A and demo sessions in entirety.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe allowfullscreen="" class="BLOG_video_class" height="266" src="https://www.youtube.com/embed/IXCS4r19Q5A" width="320" youtube-src-id="IXCS4r19Q5A"&gt;&lt;/iframe&gt;&lt;/div&gt;&amp;nbsp;&amp;nbsp;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The highlights of Stateright are:&lt;br /&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;great visualization support, &lt;/li&gt;&lt;li&gt;time travel debugger: which helps you go back/forth and choose to explore another branch from a given point of the current execution (in the Figure below, the Next Steps heading provide possible next steps to choose from),&lt;br /&gt;&lt;/li&gt;&lt;li&gt;an actor-based model,&lt;/li&gt;&lt;li&gt;an &lt;a href="https://github.com/stateright/stateright/blob/a7f9a73806f2d6209126c3864b34b3be484a74ef/src/semantics/linearizability.rs#L180-L247"&gt;embedded linearizability tester, &lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt;and extensive &lt;a href="https://docs.rs/stateright/0.24.1/stateright/"&gt;docs&lt;/a&gt; and &lt;a href="https://www.stateright.rs/"&gt;Rust book for introducing the concepts.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://lh3.googleusercontent.com/-FxpwaVk9q7w/YGZlLq0duFI/AAAAAAAAJqc/C-3AxjRzb3wV1VWozEFgvjlCJasA-tP4wCLcBGAsYHQ/stateright_explorer.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="746" data-original-width="1333" src="https://lh3.googleusercontent.com/-FxpwaVk9q7w/YGZlLq0duFI/AAAAAAAAJqc/C-3AxjRzb3wV1VWozEFgvjlCJasA-tP4wCLcBGAsYHQ/s16000/stateright_explorer.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The model trait has state, init_states, actions, next_state, and properties.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://lh3.googleusercontent.com/-a_c5-_4nJt4/YGZl60ew6OI/AAAAAAAAJqk/Rz4ZvIKY66UFQYARFxH0Vaz8JnQUR1pCwCLcBGAsYHQ/Screen%2BShot%2B2021-04-01%2Bat%2B7.59.13%2BPM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="1131" data-original-width="2780" height="163" src="https://lh3.googleusercontent.com/-a_c5-_4nJt4/YGZl60ew6OI/AAAAAAAAJqk/Rz4ZvIKY66UFQYARFxH0Vaz8JnQUR1pCwCLcBGAsYHQ/w400-h163/Screen%2BShot%2B2021-04-01%2Bat%2B7.59.13%2BPM.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Similarly there is an actor trait you can implement, and model check as follows.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://lh3.googleusercontent.com/-rxrYnlOApeM/YGZl_s21gCI/AAAAAAAAJqo/WoGoAE987VA7Y1HxQ2G-jcucXL-7K7S_gCLcBGAsYHQ/Screen%2BShot%2B2021-04-01%2Bat%2B8.03.42%2BPM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="1211" data-original-width="2595" height="186" src="https://lh3.googleusercontent.com/-rxrYnlOApeM/YGZl_s21gCI/AAAAAAAAJqo/WoGoAE987VA7Y1HxQ2G-jcucXL-7K7S_gCLcBGAsYHQ/w400-h186/Screen%2BShot%2B2021-04-01%2Bat%2B8.03.42%2BPM.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The Rust book for Stateright gives examples of &lt;a href="https://www.stateright.rs/achieving-linearizability.html"&gt;model checking ABD protocol in Rust&lt;/a&gt; and the chapter on Paxos protocol is coming soon.&amp;nbsp; &lt;br /&gt;&lt;br /&gt;To improve the performance of model checking, the checker fingerprints states and digests states into 64 bit integers. Rust is also a fast language because it does not do much pointer hopping. Jon said he will try to implement dynamic partial order reduction to improve the performance of model checking further. The model checker is already parallel, but running on many machines in a distributed fashion can also be added.&lt;br /&gt;&lt;p&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/2001159087574010954/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=2001159087574010954" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/2001159087574010954"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/2001159087574010954"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/04/building-distributed-systems-with.html" title="Building Distributed Systems With Stateright"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://img.youtube.com/vi/IXCS4r19Q5A/default.jpg" height="72" width="72"/>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-1701008993583299044</id>
    <published>2021-03-29T00:08:00.003-04:00</published>
    <updated>2021-03-29T00:10:40.869-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="book-review"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="presenting"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="writing"/>
    <title type="text"> Book review. Storyworthy: Engage, Teach, Persuade, and Change Your Life through the Power of Storytelling </title>
    <content type="html">&lt;blockquote&gt;&lt;p&gt;The most powerful person in the world is the storyteller. The storyteller sets the vision, values and agenda of an entire generation that is to come. -- Steve Jobs&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p style="-webkit-text-stroke-width: 0px; color: black; font-family: Times; font-size: medium; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;"&gt;&lt;/p&gt;&lt;blockquote style="-webkit-text-stroke-width: 0px; color: black; font-family: Times; font-size: medium; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;"&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p style="-webkit-text-stroke-width: 0px; color: black; font-family: Times; font-size: medium; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;"&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;This book is by&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Matthew_Dicks"&gt;Matthew Dicks&lt;/a&gt;, 48-time Moth StorySLAM winner and 6-time GrandSLAM champion. The book gives great tips about crafting stories.&lt;/p&gt;&lt;p&gt;Earlier I had covered "&lt;a href="http://muratbuffalo.blogspot.com/2020/02/book-review-made-to-stick-why-some.html"&gt;Made to stick&lt;/a&gt;" and "&lt;a href="http://muratbuffalo.blogspot.com/2015/02/how-to-present-your-work.html"&gt;Talk like TED&lt;/a&gt;"&amp;nbsp; on presenting and story telling. This book is at a different level than those. I strongly recommend you to read this book. It is entertaining as much as it is informative. This is like a short-story format version of the Hollywood movie-script format storytelling, which I covered briefly with "&lt;a href="http://muratbuffalo.blogspot.com/2016/06/nobody-wants-to-read-your-shit.html"&gt;Nobody wants to read your shit&lt;/a&gt;". Both books have the same message really: "You must streamline your message (staying on theme), and make its expression fun (organizing around an interesting concept)."&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;My highlights from the book&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;No one ever made a decision because of a number. They need a story. -- Daniel Kahneman&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Your story must reflect change over time. A story cannot simply be a series of remarkable events. You must start out as one version of yourself and end as something new. The change can be infinitesimal.&lt;/p&gt;&lt;p&gt;In truth, these moments are everywhere. They exist in multitudes for all of us. They’re like dander in the wind. They exist all around us. More than you could ever imagine. The problem is that we don’t see these moments. We fail to notice them or recognize their importance, and when we happen to see one, we don’t reach out to catch it. We don’t record it. We don’t save it. We fail to keep these precious moments safe for the future.&lt;/p&gt;&lt;p&gt;I decided that at the end of every day, I’d reflect upon my day and ask myself one simple question: If I had to tell a story from today — a five-minute story onstage about something that took place over the course of this day — what would it be? As benign and boring and inconsequential as it might seem, what was the most storyworthy moment from my day?&lt;/p&gt;&lt;p&gt;Instead I would write a snippet. A sentence or two that captured the moment from the day. Just enough for me to remember the moment.&lt;/p&gt;&lt;p&gt;I started seeing stories in my everyday life, stories began welling up from my childhood that I’d long since forgotten. It was like digging into the earth and suddenly striking a geyser.&lt;/p&gt;&lt;p&gt;Essentially Crash &amp;amp; Burn is stream-of-consciousness writing. I like to think of it as dreaming on the end of your pen, because when it’s working well, it will mimic the free-associative thought patterns that so many of us experience while dreaming.&lt;/p&gt;&lt;p&gt;When Crash &amp;amp; Burn is at its best, ideas are constantly crashing the party, slashing and burning the previous ones.&lt;/p&gt;&lt;p&gt;In class, we use First Last Best Worst as an improv game. You are given a prompt and must tell a story using the first, last, best, or worst version of that prompt.&lt;/p&gt;&lt;p&gt;I’ve given you three tools to find stories.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Homework for Life&amp;nbsp;&lt;/li&gt;&lt;li&gt;Crash &amp;amp; Burn&amp;nbsp;&lt;/li&gt;&lt;li&gt;First Last Best Worst&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Do all three with regularity and fidelity, and you will find yourself drowning in stories before long.&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Let me say it again: Every great story ever told is essentially about a five-second moment in the life of a human being, and the purpose of the story is to bring that moment to the greatest clarity possible.&lt;/p&gt;&lt;p&gt;Anything in the story that doesn’t help bring that moment to the greatest clarity possible is marginalized, shaded, or removed entirely. Anything that helps bring clarity to that moment is strengthened and highlighted.&lt;/p&gt;&lt;p&gt;You’ll see how much I have left on the cutting-room floor to bring my five-second moment to the greatest clarity possible. Understanding that stories are about tiny moments is the bedrock upon which all storytelling is built, and yet this is what people fail to understand most when thinking about a story. Instead they believe that if something interesting or incredible or unbelievable has happened to them, they have a great story to tell. Not true.&lt;/p&gt;&lt;p&gt;This is Indy’s five-second moment. The moment he finds faith. The moment he believes in the power of God.&lt;/p&gt;&lt;p&gt;So dig. Search. Hunt. Fight for the five-second moment. Allow yourself to recall the entire event. Don’t get hung up on the big moments, the unbelievable circumstances, or the hilarious details. Seek out the moments when you felt your heart move. When something changed forever, even if that moment seems minuscule compared to the rest of the story.&lt;/p&gt;&lt;p&gt;Your five-second moment is the most important thing that you will say. It is the purpose and pinnacle of your story. It’s the reason you opened your mouth in the first place. Therefore it must come as close to the end of your story as possible. Sometimes it will be the very last thing you say.&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;So how do you choose the right place to start a story? Simple. Ask yourself where your story ends. What is the meaning of your five-second moment? Say it aloud.&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Simply put, the beginning of the story should be the opposite of the end. Find the opposite of your transformation, revelation, or realization, and this is where your story should start. This is what creates an arc in your story. This is how a story shows change over time. I was once this, but now I am this. I once thought this, but now I think this. I once felt this, but now I feel this.&lt;/p&gt;&lt;p&gt;I also try to start my story as close to the end as possible (a rule Kurt Vonnegut followed when writing short stories).&lt;/p&gt;&lt;p&gt;Speak as if you were speaking to friends. Be yourself. If your language sounds more formal than your normal speech, you have failed.&lt;/p&gt;&lt;p&gt;The Nazis and snakes are the stakes. They are the things that keep our attention scene to scene. They are the reason we buy a ticket and popcorn and give up two hours of our life.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Every story must have an Elephant. The Elephant is the thing that everyone in the room can see.&lt;/p&gt;&lt;p&gt;The audience doesn’t know why they are listening to the story or what is to come, so it’s easy to stop listening. If you don’t present a reason to listen very early on, you risk losing their attention altogether. The Elephant tells the audience what to expect. It gives them a reason to listen, a reason to wonder. It infuses the story with instantaneous stakes.&lt;/p&gt;&lt;p&gt;Note that I’m not actually changing the path that the audience is on. It’s the same path we’ve been walking since the start of the story. The audience just didn’t realize that it’s a much deeper, more interesting path than first expected. Don’t switch Elephants. Simply change the color.&lt;/p&gt;&lt;p&gt;A Backpack is a strategy that increases the stakes of the story by increasing the audience’s anticipation about a coming event. It’s when a storyteller loads up the audience with all the storyteller’s hopes and fears in that moment before moving the story forward. It’s an attempt to do two things: 1. Make the audience wonder what will happen next. 2. Make your audience experience the same emotion, or something like the same emotion, that the storyteller experienced in the moment about to be described.&lt;/p&gt;&lt;p&gt;Backpacks are most effective when a plan does not work. If I had described my plan for begging for gas, and then the plan worked perfectly, there would have been no payoff for the Backpack.&lt;/p&gt;&lt;p&gt;It’s an odd thing: The audience wants characters (or storytellers) to succeed, but they don’t really want characters to succeed. It’s struggle and strife that make stories great. They want to see their characters ultimately triumph, but they want suffering first. They don’t want anything to be easy.&lt;/p&gt;&lt;p&gt;Breadcrumbs Storytellers use Breadcrumbs when we hint at a future event but only reveal enough to keep the audience guessing. Breadcrumbs are particularly effective when the truly unexpected is coming.&lt;/p&gt;&lt;p&gt;Hourglasses. There comes a time in many stories when you reached a moment (or the moment) that the audience has been waiting for. Perhaps you have paved the way to the moment with Breadcrumbs and Backpacks, or maybe you’ve used none of these strategies because you’ve got yourself a stake-laden story, and now you’re approaching the payoff. The sentence you’ve been waiting to say. The sentence your audience has been waiting to hear. This is the moment to use an Hourglass. It’s time to slow things down. Grind them to a halt when possible. When you know the audience is hanging on your every word, let them hang. Drag out the wait as long as possible.&lt;/p&gt;&lt;p&gt;In “Charity Thief,” that moment occurs as I am knocking on that blue door. The audience knows that I’m about to do something to attempt to solve my problem. They know that a McDonald’s uniform is involved (my Breadcrumb), but they probably can’t imagine what my solution might be. There is no need to describe this uniform in any detail, yet I choose to describe it anyway, in the greatest detail. It is the longest bit of description in the entire story, and I’m describing the last thing in the world that needs to be described. This is because I have my audience now. I own them. They cannot wait for that blue door to open so the unknown can become known.&lt;/p&gt;&lt;p&gt;Find the moment in your story that everyone has been waiting for, then flip that Hourglass and let the sand run.&lt;/p&gt;&lt;p&gt;A Crystal Ball is a false prediction made by a storyteller to cause the audience to wonder if the prediction will prove to be true. In “Charity Thief,” I say: [The man] points his finger at me and says, “You stay right there.” Then he walks back into his house, and I know what he’s doing. He’s calling the police, and they will come and arrest me for stealing money from McDonald’s. This does not happen, of course, but when I present this very real possibility, the audience wants to know if it will happen. By predicting my future arrest, I’ve established wonder in their minds about a future event.&lt;/p&gt;&lt;p&gt;In storytelling, deploy Crystal Balls strategically: Only when your prediction seems possible. Only when your guess is reasonable. And only when your prediction presents an intriguing or exciting possibility.&lt;/p&gt;&lt;p&gt;Remember, the best way to ensure that your story has stakes is to choose a story that has stakes. Elephants, Backpacks, Breadcrumbs, Hourglasses, and Crystal Balls will only get you so far. If your story is boring, it will always be boring.&lt;/p&gt;&lt;p&gt;Humor is optional. Stakes are nonnegotiable.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Here is what I think: A story is like a coat. When we tell a story, we put a coat on our audience. Our goal is to make that coat as difficult to remove as possible. I want that coat to be impossible to take off. Days after you’ve heard my story at the dinner table or the conference room or the golf course or the theater, I want you to be thinking about my story. I want that coat to cling to your body and mind.&lt;/p&gt;&lt;p&gt;Audiences don’t want redemption. Redemption cleanses the palate. It ties up all loose ends. It makes the world whole again. It allows your audience to sleep well at night.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;The goal of every storyteller should be to create a cinematic experience in the minds of every listener.&lt;/p&gt;&lt;p&gt;Listeners should be able to see the story in their mind’s eye at all times. At no point should the story become visually obscured or impossible to see.&lt;/p&gt;&lt;p&gt;Always provide a physical location for every moment of your story. That’s it. If the audience knows where you are at all times within your story, the movie is running in their minds. The film is cycling from reel to reel. If your audience can picture the location of the action at all times, you have created a movie in the mind of your listeners.&lt;/p&gt;&lt;p&gt;Whatever you are doing, if the movie has stopped in the mind of your audience, it’s no longer a story.&lt;/p&gt;&lt;p&gt;I give this moment of backstory a place. I make it a scene.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;But and therefore are words that signal change. The story was heading in one direction, but now it’s heading in another. This is effective storytelling. It’s a way of making a story feel as if it’s constantly going someplace new, even if the events are linear and predictable.&lt;/p&gt;&lt;p&gt;Oddly, the negative is almost always better than the positive when it comes to storytelling. Saying what something or someone is not is almost always better than saying what something or someone is. For example: I am dumb, ugly, and unpopular. I’m not smart, I’m not at all good-looking, and no one likes me. By saying what I am not, I am also saying what I could have been, and that is a hidden but. “I was lost” is just not as good as “I could not find my way home.”&lt;/p&gt;&lt;p&gt;Mirror practice only encourages attention on your physical appearance. Don’t do it. Why would you practice doing something in a way that will never happen in real life?&lt;/p&gt;&lt;p&gt;Nevertheless, there are times when you might want to tell a success story, and when you do, there are two strategies that I suggest you employ. 1. Malign yourself. 2. Marginalize your accomplishment.&lt;/p&gt;&lt;p&gt;Summiting Mount Everest is an adventure story. Changing your life by summiting Mount Everest is a great story.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Don’t memorize your story.&lt;/p&gt;&lt;p&gt;Instead of memorizing your story word-for-word, memorize three parts to a story: 1. The first few sentences. Always start strong. 2. The last few sentences. Always end strong.&amp;nbsp; 3. The scenes of your story.&lt;/p&gt;&lt;p&gt;I don’t memorize my stories. I memorize the places where my story takes me, so even if I can’t remember how I want to tell it, I can still do so. I may lose some laugh lines, clever transitions, and “golden sentences,” but I’m still telling my story.&lt;/p&gt;&lt;p&gt;When you are entertaining, people learn better. When your students love you, they will learn, even if they despise the subject. This is how I approach teaching every day.&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/1701008993583299044/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=1701008993583299044" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/1701008993583299044"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/1701008993583299044"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/03/book-review-storyworthy-engage-teach.html" title=" Book review. Storyworthy: Engage, Teach, Persuade, and Change Your Life through the Power of Storytelling "/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-785456519018218193</id>
    <published>2021-03-21T11:43:00.006-04:00</published>
    <updated>2021-03-21T17:15:39.806-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="paper-review"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="reading-group"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="time"/>
    <title type="text">Sundial: Fault-tolerant Clock Synchronization for Datacenters</title>
    <content type="html">&lt;p&gt;&lt;a href="https://www.usenix.org/system/files/osdi20-li_yuliang.pdf"&gt;This paper appeared recently in OSDI 2020&lt;/a&gt;. This paper is about clock synchronization in the data center. I presented this paper &lt;a href="http://charap.co/reading-group-sundial-fault-tolerant-clock-synchronization-for-datacenters/"&gt;for our distributed systems zoom meeting group&lt;/a&gt;. I took a wider view of the problem by explaining time synchronization challenges and fundamental techniques to achieve precise time synchronization. I will take the same path in this post as well. It is a bit circuitous road, but it gives a scenic pleasurable journey. So let's get going.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;The benefits of better time synchronization&lt;/h2&gt;&lt;p&gt;For any distributed system, timestamping and ordering of events is a very important thing. Processes in a distributed system run concurrently without knowing what the other processes are doing at the moment.&amp;nbsp; Processes learn about each other's states only by sending and receiving messages and this information by definition come from the past state of the nodes. The process needs to compose the coherent view of the system from these messages and all the while the system is moving along advancing and changing state. This is like trying to compose a panaromic snapshot of a parade moving down the street only by using small 4x6 photos shot by the participants at arbitrary times. This would be impossible without good timestamping and a way to order these events with respect to each other.&amp;nbsp; Thus, timestamping and ordering of events is very important for processes to compose coherent snapshots and to build a foundation for distributed coordination. Of course &lt;a href="http://muratbuffalo.blogspot.com/2018/01/logical-clocks-and-vector-clocks.html"&gt;logical clocks and vector clocks&lt;/a&gt; help for this by capturing causality through communication of the nodes. But if you have good time synchronization of the physical clocks at the nodes, you can avoid a lot of headache for timestamping and ordering of events in distributed systems, and achieve finer granularity ordering without relying on communication.&lt;/p&gt;&lt;p&gt;The most important quality metric for time synchronization is epsilon, $\epsilon$, the length of the clock uncertainty. (The sundial paper is entirely about making this epsilon as small as possible, even against the face of failures.) Why is epsilon so important? It is because, if we have a large epsilon we may order the events incorrectly. Consider this example. Event A and event B has the same clock timestamp but they are farther apart in time because of the epsilon uncertainty. Even though A and B should give us a snapshot of the distributed system, this is an inconsistent snapshot. Another event happens after A which then sends a message that affects B, and taints the snapshot. Causality sneaks in between A and B and the integrity of the snapshot is violated. Inconsistent snapshots are dangerous. &lt;a href="http://muratbuffalo.blogspot.com/2014/10/consistent-snapshot-analogies.html"&gt;They are like panorama pictures gone wrong&lt;/a&gt;, or like crossing of beams in ghostbusters.&amp;nbsp;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://lh3.googleusercontent.com/-4Hbj1xn4VU0/YFdnMhJgCOI/AAAAAAAAJo4/0fr339MrVtsvvQl4qN-Flg5FYaSfczh5gCLcBGAsYHQ/Screen%2BShot%2B2021-03-21%2Bat%2B11.33.00%2BAM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="678" data-original-width="1762" height="154" src="https://lh3.googleusercontent.com/-4Hbj1xn4VU0/YFdnMhJgCOI/AAAAAAAAJo4/0fr339MrVtsvvQl4qN-Flg5FYaSfczh5gCLcBGAsYHQ/w400-h154/Screen%2BShot%2B2021-03-21%2Bat%2B11.33.00%2BAM.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;So how can we take a consistent snapshot with epsilon uncertainty bound. Simple we make the node wait out the epsilon duration before allowing another significant event. If after timestamping event A, we waited for epsilon uncertainty bound to expire on that process, the message sent would not happen, and the integrity of the snapshot would have been preserved. Really, wait it out? This doesn't sound like much of an efficient solution. Exactly! That is why it is important to keep epsilon small. So this is an important problem, and this paper gives a really low upperbound for epsilon 100nanoseconds by putting in a rigorous engineering effort.&lt;/p&gt;&lt;p&gt;(Precise time synchronization can help for more. &lt;a href="http://muratbuffalo.blogspot.com/2019/04/timely-algorithms.html"&gt;I was toying with the idea of timely algorithms and silent consent protocols&lt;/a&gt;, but that is discussion for another time.)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Time synchronization in wireless sensor networks&lt;/h2&gt;&lt;p&gt;So here comes our detour!&lt;/p&gt;&lt;p&gt;As I was reading the Sundial paper, my reaction was: "We did this! We did this for wireless sensor networks 20 years ago!" In 2001, I was a PhD student at The Ohio State University. We had gotten funding from DARPA. U.C Berkeley was spearheading the effort, they had made these &lt;a href="http://cs.uccs.edu/~cchow/pub/telos-brochure.pdf"&gt;tiny sensor nodes&lt;/a&gt; with 4Mhz CPU and 8K RAM (to suffice as both OS and application memory). Each of these nodes has radios that can wirelessly broadcast to any sensor within 10 yards and these talk to each other form an ad hoc network and try to monitor if there is an intruder crossing the network and classify this intruder as a soldier, car, or tank based on detections fired by the sensors. Time synchronization was crucial for this monitoring because we were timestamping detection events at the nodes, and exfiltrating them to a basestation where we take snapshots counting the number of simultaneous detections. Based on how many sensors detected an event, we would classify it as a soldier, car, tank.&lt;/p&gt;&lt;p&gt;Later, using time synchronization, Vanderbilt University did the demo of shooter localization with sensor networks. They used real rifles to shut at a target, and the sensor nodes had microsecond-level synchronization that when they heard the bullet shockwave they took timestamp and send it to the base station. Using these timestamps, the basestation could determine that the shot was coming this way and could pinpoint the shooter.&lt;/p&gt;&lt;p&gt;We were able to get clock synchronization with epsilon of 5 microsecond using these wimpy nodes&amp;nbsp; (8K RAM and 4Mhz CPU), whereas the Google Spanner paper that came in 2012 was able to provide a timesynchronization epsilon of 6 milliseconds.&amp;nbsp;&lt;/p&gt;&lt;p&gt;How? Read on to see how.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Quartz clocks need frequent synchronizing&lt;/h2&gt;&lt;p&gt;Each wireless sensor node had a clock. A clock is just a &lt;a href="https://en.wikipedia.org/wiki/Crystal_oscillator"&gt;crystal/quartz oscillator&lt;/a&gt;. A circuit counts the number of times a crystal oscillates and declares that a millisecond has passed because it counted say 1000 oscillations. This is not precise of course. Atomic clocks use &lt;a href="https://en.wikipedia.org/wiki/Rubidium"&gt;rubidium&lt;/a&gt;, which has an oscillation/clock error of one microsecond a day. But quartz is not like that. It is inaccurate and drifts too much. No two quartz crystals are identical. They have big variations. They are dirt cheap though, that is why they are very popular. Another thing about quartz crystal is they are very temperature sensitive: when the temperature gets colder they oscillate more when it gets hotter they oscillate less.&amp;nbsp;&lt;/p&gt;&lt;p&gt;This is why frequent time synchronization is needed when using crystal oscillator based clocks. Otherwise each node's clock would drift apart from each other.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Error sources for time synchronization&lt;/h2&gt;&lt;p&gt;When you try to synchronize two nodes over messaging there are many places where errors will be incurred:&amp;nbsp; packing up the message for transmission, waiting for the MAC layer to find a suitable transmission time, sending the message, the actual message propagation, and on the receiver side receiving the message and unpacking. In WSNs, the propagation of message is light speed, because it is done over radio. But the MAC layer wait, and actual byte-by-byte coding of the message on air at the radio is slow. The important point here is to eliminate the nondeterministic error sources so they don't mess up with the latency in a nondeterministic way, and subtract out the deterministic error durations to compensate for them.&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://lh3.googleusercontent.com/-qsazEQpQGOo/YFdnubHiY6I/AAAAAAAAJpA/V_c8LpBX0Pss39u9gkltT6zwLl3o2OOgACLcBGAsYHQ/Screen%2BShot%2B2021-03-21%2Bat%2B11.35.14%2BAM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="1138" data-original-width="1480" height="240" src="https://lh3.googleusercontent.com/-qsazEQpQGOo/YFdnubHiY6I/AAAAAAAAJpA/V_c8LpBX0Pss39u9gkltT6zwLl3o2OOgACLcBGAsYHQ/Screen%2BShot%2B2021-03-21%2Bat%2B11.35.14%2BAM.png" width="312" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;A big source of non-deterministic error in wireless sensor networks come from the MAC layer availability waiting for the channel to go idle so we can transmit. We used MAC layer timestamping to eliminate this problem. When we are sending a synchronization message, we don't put the timestamp in the package in application layer, we put a placeholder in, instead we take the timestamp and insert it in the message buffer later, when the transmission actually started to happen byte-by-byte over the radio, and it is timestamp-bytes turn to be sent.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;u&gt;&lt;i&gt;Lesson 1. Insert the synchronization timestamp during the transmission below the MAC layer.&lt;/i&gt;&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;In WSNs, we had the advantage that messaging is point to point between any two nodes without involving any switch or a router. In wired networks, going through a switch and router adds a lot of hard to control/detect nondeterministic delay, which messes up synchronization.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;&lt;u&gt;Lesson 2. Use point-to-point messaging for synchronization, you can't do end to end synchronization with precision.&lt;/u&gt;&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Reference point for synchronization&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"A man with a watch knows what time it is. A man with two watches is never sure." &lt;a href="https://en.wikipedia.org/wiki/Segal%27s_law"&gt;-Segal's law&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;For pairwise synchronization, we use link-level point-to-point communication. But how do we synchronize a network of nodes, over multihops? We do this by overlaying a single root spanning tree.&amp;nbsp; Using a single root keeps the epsilon to minimum. We don't care being that much fidelity to real-time, but we want the nodes clocks to be very close to each other with low epsilon.&lt;/p&gt;&lt;p&gt;Why do we synchronize to one node wouldn't it make more sense to maybe take average of clocks from nodes to reduce errors each one might have to real time? When the goal is to get the epsilon small, it is better to lock onto one node (have one master) and make every node in order not to create confusion make every node walk with the pace of that node. Trying to adjust to the clock rate of multiple nodes can't get you to very precise synchronization. Maybe more accurate time synchronization with respect to true time, but not more precise synchronization with very low epsilon. (In WSNs case for most applications we didn't even use a real time as clock source/reference anyways, and only cared for synchronizing the clocks of with respect to each other.)&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;&lt;u&gt;Lesson 3. Use a spanning tree to synchronize the nodes with respect to a single root as reference.&amp;nbsp;&lt;/u&gt;&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Ok, what if the single root dies? Another root can emerge, and a new spanning tree can form for that root. But this can take a long time. It is better if you can do this pre-arranged. As part of our big deployments (100 nodes and 1000 nodes), we used a grid topology, and we hardcoded backup parents for each node, as well as a backup root. When you impose a regular grid topology, backup route calculation becomes simple, local, and fast.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;&lt;u&gt;Lesson 4. Make backup route calculation local and fast.&lt;/u&gt;&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Wired network time synchronization&lt;/h2&gt;&lt;p&gt;After working on wireless sensor network work, when switching back to mainstream distributed systems work in datacenter computing, I was like come on NTP, really, epsilon of 50 milliseconds? That is 10 000 times bigger epsilon than the 5 microsecond epsilon we could get from the wimpy sensor nodes. What gives?&lt;/p&gt;&lt;p&gt;Computers use the same shitty quartz clocks as WSN nodes, but you know that is not an excuse. You should know by now how to ask the important question. Where does the non-deterministic errors come in for synchronization? It comes from the network. The switches and routers are the source of nondeterministic errors for NTP.&lt;/p&gt;&lt;p&gt;NTP does not use any of the four lessons for precise time synchronization we mentioned above. The goal in NTP was to have a general, easy to deploy, broad and rough synchronization.&lt;/p&gt;&lt;p&gt;When &lt;a href="http://muratbuffalo.blogspot.com/2013/07/spanner-googles-globally-distributed_4.html"&gt;the Spanner paper came&lt;/a&gt; in 2012, even with atomic clocks as synchronization source, it was able to give an epsilon of 6 milliseconds. That's still huge. That is a lot of epsilon to wait to make sure consistency of timestamp ordering. (To spanner's credit, during this 6ms there is last step of 2phase commit also going in parallel. So it is not a full 6ms wait. You wait the time for the RTT is completed to 6ms.) Again they didn't want to mess with the lower layers of the network, and do link layer point-to-point synchronization. They just used the advantage of better more reliable datacenter networking links.&amp;nbsp;&lt;/p&gt;&lt;p&gt;With the goal of improving precision, PTP improves things significantly by doing synchronization point-to-point at link layer. &lt;a href="http://muratbuffalo.blogspot.com/2016/10/it-is-about-time.html"&gt;I wrote about wired network time synchronization overview and NTP and PTP before.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Sundial paper&lt;/h2&gt;&lt;p&gt;OK, the detour is complete.&amp;nbsp; Back to the Sundial paper.&lt;/p&gt;&lt;p&gt;Sundial uses all the 4 lessons we mentioned above for precise clock synchronization in wireless sensor networks.&lt;/p&gt;&lt;p&gt;Sundial does timestamping and synchronization at L2 data link level in a point-to-point manner. Sundial uses hardware the network interface cads (nic) to do timestamping and synchronization. They don't go into any details here, saying this is proprietary. But this is likely the most important part of Sundial. Doing synchronization at the hardware enables to them to do very frequent synchronization to compensate for the uncontrollable clock drifts of quartz clocks. They send a synchronization signal every 500 microseconds to reduce clock drift of quartz clocks and to keep epsilon very small. Performing synchronization this frequently would not work over software. (In WSNs we didn't have this luxury.)&lt;/p&gt;&lt;p&gt;Sundial uses a spanning tree as the multihop synchronization structure and synchronizes the nodes with respect to a single root. Sundial uses predetermined backup parents to default to, so it can recover fast from link and root failures.&amp;nbsp;&lt;/p&gt;&lt;p&gt;You can now follow the paper easily &lt;a href="https://www.usenix.org/conference/osdi20/presentation/li-yuliang"&gt;by watching its presentation and checking out its slides.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Sundial is able to get epsilon less than 100 nanoseconds; that is very precise! In addition to the four lessons above, two factors contribute to this. They can perform very frequent synchronization doing synchronization at the hardware/NICs. Secondly, they are very diligent about dealing with effects of faults. The datacenter networking having a lot of bandwidth, being fast, and in their control helps a lot as well.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;In calm water, every ship has a good captain. Rough waters are truer tests of leadership.&amp;nbsp; -- Swedish proverb&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The Sundial paper puts a lot of focus on fault-tolerance and the worse case epsilon to the face of faults. It would be easy to give precise clock synchronization with PTP if it were not for faults. Most of the discussion in the paper is about how to tolerate link failures, node failure, root failure, and even domain (a set of nodes) failure, and still give less than 100 nanosecond epsilon bound to the face of them.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://lh3.googleusercontent.com/-XfRQm8CVnc4/YFdonir_ygI/AAAAAAAAJpI/Ep_3SyYTJ5kibhabm1WmW8C1n1gqr_HvgCLcBGAsYHQ/Screen%2BShot%2B2021-03-21%2Bat%2B11.39.04%2BAM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="1049" data-original-width="2048" height="328" src="https://lh3.googleusercontent.com/-XfRQm8CVnc4/YFdonir_ygI/AAAAAAAAJpI/Ep_3SyYTJ5kibhabm1WmW8C1n1gqr_HvgCLcBGAsYHQ/w640-h328/Screen%2BShot%2B2021-03-21%2Bat%2B11.39.04%2BAM.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In Sundial backup routes are precalculated for each node. There are some constraints here to make the backup routes loop-free, and to tolerate failure of a domain failure, but this is done centrally at a controller node, so it is not a big deal. There will be enough time to recalculate this between two faults/topology changes to keep the topology rejuvenated.&lt;/p&gt;&lt;p&gt;At runtime, if your parent or link to parent died, you'll switch to backup parent. To keep the epsilon low, and to prevent incurring of drifts at the subtree of this node, it is also important for the subtree of this node to quickly timeout and switch to backup routes. For this they use synchronized messages: I won't send you a message if i don't receive a message from my parent. This way entire subtree time outs shortly and every node would be able to detect the problem and take local action to switch to the backup routes.&lt;/p&gt;&lt;p&gt;What if the root dies? Easy, we have a backup root. But now we also have a problem: what if the backup root thinks the root died but the root did not die? To avoid this disagreement, the backup root needs a witness from another subtree of the root to confirm its suspicion. If the backup root doesn't get signal from the root it could be either the root is dead or this link is bad. If the backup root still gets a signal from the witness that means the root is alive (the witness sends a message only because it is still getting messages from root, because its parent is getting messages, etc., remember synchronized messages). But if the backup node does not get a signal from the witness either, it can be certain the root is dead and takes over as a root.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://lh3.googleusercontent.com/-if-OCJapJQ4/YFdo9ip-CuI/AAAAAAAAJpQ/bae6vF4sF4I4hgTkfZR5Pi8by3DYYZOZgCLcBGAsYHQ/Screen%2BShot%2B2021-03-21%2Bat%2B11.40.34%2BAM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="1053" data-original-width="2985" height="226" src="https://lh3.googleusercontent.com/-if-OCJapJQ4/YFdo9ip-CuI/AAAAAAAAJpQ/bae6vF4sF4I4hgTkfZR5Pi8by3DYYZOZgCLcBGAsYHQ/w640-h226/Screen%2BShot%2B2021-03-21%2Bat%2B11.40.34%2BAM.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Related work&lt;/h2&gt;&lt;p&gt;&lt;a href="https://lh3.googleusercontent.com/-pUHTjCcpS_w/YFdpPPwdcMI/AAAAAAAAJpY/MTsXAISxuYMQ-4X-kHsEm0mMe42G823PgCLcBGAsYHQ/Screen%2BShot%2B2021-03-21%2Bat%2B11.41.41%2BAM.png" style="margin-left: 1em; margin-right: 1em; text-align: center;"&gt;&lt;img alt="" data-original-height="546" data-original-width="3726" height="94" src="https://lh3.googleusercontent.com/-pUHTjCcpS_w/YFdpPPwdcMI/AAAAAAAAJpY/MTsXAISxuYMQ-4X-kHsEm0mMe42G823PgCLcBGAsYHQ/w640-h94/Screen%2BShot%2B2021-03-21%2Bat%2B11.41.41%2BAM.png" width="640" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.usenix.org/system/files/conference/nsdi18/nsdi18-geng.pdf"&gt;Huygens work&lt;/a&gt; is worth mentioning here . While it doesn't use hardware support for time synchronization, Huygens is able to get nanosecond level time synchronization by leveraging three key ideas. "First, coded probes identify and reject impure probe data (data captured by probes which suffer queuing delays, random jitter, and NIC timestamp noise). Next, HUYGENS processes the purified data with Support Vector Machines, a widely-used and powerful classifier, to accurately estimate one-way propagation times and achieve clock synchronization to within 100 nanoseconds. Finally, HUYGENS exploits a natural network effect (the idea that a group of pair-wise synchronized clocks must be transitively synchronized) to detect and correct synchronization errors even further."&lt;/p&gt;&lt;p&gt;Huygens uses the spacing between the probes to detect a problem. When probes go through a router if they got into contention the spacing between them would change and the receiver side can look at this tainted spacing, and decide not to use this compromised transmission for time synchronization.&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/785456519018218193/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=785456519018218193" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/785456519018218193"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/785456519018218193"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/03/sundial-fault-tolerant-clock.html" title="Sundial: Fault-tolerant Clock Synchronization for Datacenters"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh3.googleusercontent.com/-4Hbj1xn4VU0/YFdnMhJgCOI/AAAAAAAAJo4/0fr339MrVtsvvQl4qN-Flg5FYaSfczh5gCLcBGAsYHQ/s72-w400-h154-c/Screen%2BShot%2B2021-03-21%2Bat%2B11.33.00%2BAM.png" height="72" width="72"/>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-1672522563095522144</id>
    <published>2021-03-13T13:34:00.007-05:00</published>
    <updated>2021-03-13T13:42:18.144-05:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="my advice"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="research-advice"/>
    <title type="text">Your attitude determines your success </title>
    <content type="html">&lt;p&gt;This may sound like a cliche your dad used to tell, but after many years of going through new areas, ventures, and careers, I find this to be the most underrated career advice. This is the number one advice I would like my kids to internalize as they grow up. This is the most important idea I would like every one undertaking a new venture to know.&amp;nbsp;&lt;/p&gt;&lt;p&gt;If you think you are not good enough, it becomes a self-fulfilling prophecy.&lt;/p&gt;&lt;p&gt;If you think you are not enjoying something, you start to hate it.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;I gave examples of this several times before. Let's suffice with &lt;a href="http://muratbuffalo.blogspot.com/2018/04/book-review-crypto-how-code-rebels-beat.html"&gt;this one&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;In graduate school, I had read "Hackers: Heroes of the Computer Revolution" from Steven Levy and enjoyed it a lot. (I still keep the dog eared paper copy with affection.) So, I should have read Steven Levy's Crypto book a long time ago. But for some reason, I didn't...even though I was aware of the book. I guess that was due to a stupid quirk of mine; I had some aversion to the security/cryptography research. I don't know why. Maybe it was because I had sat through a couple of bad security/cryptography talks (&lt;a href="http://muratbuffalo.blogspot.com/2012/01/tell-me-about-your-thought-process-not.html"&gt;a similar aversion happened to me after a bad networking course&lt;/a&gt;). Another reason, I regret to admit, may be that I had some distributed systems snobbery going on that time. I was so into the distributed systems/algorithms area that I was quick to label AI, security, and this, and that as uninteresting or useless *to me*. I wish I could have been more open minded. I am sure reading this book then would have changed my outlook toward security and cryptography.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Success depends on emotion management&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“It isn't the mountains ahead to climb that wear you out; it's the pebble in your shoe."&amp;nbsp; --Muhammad Ali&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;It is important to always be mindful of your emotions and manage them well if you want to succeed in your journey. Your emotions determine your attitude, and your attitude determines your progress, resilience, and eventually your success.&amp;nbsp;&lt;/p&gt;&lt;p&gt;For any failed venture, there is often a critical point after which things start to turn sour which eventually leads you to quit. With hindsight of several months and with a cooler head, you can identify that point. But it is important to keep a constant check on your emotions and attitude and catch these moments, so you don't stop digging only feets from gold. To manage your emotions well, it helps to be deliberate about &lt;a href="http://muratbuffalo.blogspot.com/2014/02/energy-approach-to-life-universe-and.html"&gt;how you manage and replenish your energy&lt;/a&gt; as well.&lt;/p&gt;&lt;p&gt;I am not saying everything will be pinky-rosy. You will need to be prepared for failures. But you can frame your failures better if you cultivate &lt;a href="http://muratbuffalo.blogspot.com/2017/11/book-review-growth-mindset.html"&gt;a growth mindset&lt;/a&gt;, and even derive motivation and energy from them. Often things aren't going that bad, and most of the bleak perception is in your head. And even when things are challenging, you can roll up your sleeves and say, "I knew challenges would arise, I love a good challenge", and get after it.&amp;nbsp; It all depends on what stories you are telling yourself.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Manage the stories you tell yourself&lt;/h2&gt;&lt;p&gt;The stories we tell ourselves (knowingly or unknowingly) are very important, because they determine how we manage our emotions, which in turn determine our success.&amp;nbsp;&lt;/p&gt;&lt;p&gt;I wrote about how you can &lt;a href="http://muratbuffalo.blogspot.com/2016/01/fool-yourself.html"&gt;fool yourself for good purpose&lt;/a&gt; earlier. You should cherish your small successes, to build motivation. You might get demoralized from failures, but you can reframe them to learn from them, and use them as leverage to drive to your next small success. You can even change the narrative on failures as a setback in your &lt;a href="https://en.wikipedia.org/wiki/Hero%27s_journey"&gt;hero's journey&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Finally, being informed about the process helps. &lt;a href="http://muratbuffalo.blogspot.com/2019/09/on-being-researcher.html"&gt;As I talked about earlier&lt;/a&gt;, there are many false starts in research. You feel high one day, low another day. This doesn't change even as you get experience. But as you get experience, you know that this is part of the terrain, and you don't let this get you down.&amp;nbsp;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/1672522563095522144/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=1672522563095522144" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/1672522563095522144"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/1672522563095522144"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/03/your-attitude-determines-your-success.html" title="Your attitude determines your success "/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-8669108997802705673</id>
    <published>2021-03-06T14:39:00.000-05:00</published>
    <updated>2021-03-06T14:39:09.725-05:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="fault-tolerance"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="misc"/>
    <title type="text">Defending Computer Science &amp; Engineering in a life raft debate</title>
    <content type="html">&lt;p&gt;What is a &lt;a href="https://www.montevallo.edu/academics/colleges/college-of-arts-sciences/department-of-english-foreign-languages/programs/minors/philosophy-religion/life-raft-debate/"&gt;life raft debate&lt;/a&gt;?&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;In the Life Raft Debate, we imagine that there has been a nuclear war, and the survivors (the audience) are setting sail to rebuild society from the ground up. There is a group of academic-types vying to win the coveted Oar and get on the raft, and only one seat is left. Each professor has to argue that his or her discipline is the one indispensable area of study that the new civilization will need to flourish. At the end of the debating, the audience votes and the lucky winner claims the Oar and climbs aboard, waving goodbye to the others.&amp;nbsp;&amp;nbsp;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Maybe a discipline worth its own salt would&amp;nbsp; be able to built their own boat, no? Or a good discipline would have documented their findings so well and made itself a science rather than an art, so a practitioner is not needed to transfer information.&lt;/p&gt;&lt;p&gt;Which discipline do I think should be the discipline to go? Let me tell you, I would oppose having a computer science and engineering person on the boat before we make sure the boat has a doctor/nurse that can treat people and deliver babies. And a wilderness expert and a biologist. Maybe also an electrical engineer. I have respect for the hardware building guys. I am an ethical person (and looks like not a good debater). I think we should do what is right for the good of humanity.&lt;/p&gt;&lt;p&gt;Now I can make the case for a computer science and engineering for life raft.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;We are hackers&lt;/h2&gt;&lt;p&gt;As a child I was a &lt;a href="https://en.wikipedia.org/wiki/MacGyver"&gt;MacGyver&lt;/a&gt; fan. In our discipline, we get to act like MacGyver everyday. We figure out stuff, we make stuff, and we make things work. We are the hacker discipline.&lt;/p&gt;&lt;p&gt;We synthesize stuff, and get the work done. We have been working on diverse set of tasks. From cyberphysical to very virtual. We do everything. We are the perennial &lt;a href="http://muratbuffalo.blogspot.com/2019/06/book-review-range-why-generalists.html"&gt;generalists&lt;/a&gt; and improvisers.&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-SraEj3fkkNM/YEPYskbIXdI/AAAAAAAAJn8/OrAJdFRGRIwsH72qu3wFB5nNUVaV4WyKwCLcBGAsYHQ/s800/overcome.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="450" data-original-width="800" src="https://1.bp.blogspot.com/-SraEj3fkkNM/YEPYskbIXdI/AAAAAAAAJn8/OrAJdFRGRIwsH72qu3wFB5nNUVaV4WyKwCLcBGAsYHQ/s320/overcome.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;We are debuggers&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;The most important person in my gang will be a systems programmer. A person who can debug a device driver or a distributed system is a person who can be trusted in a Hobbesian nightmare of breathtaking scope; a systems programmer has seen the terrors of the world and understood the intrinsic horror of existence. The systems programmer has written drivers for buggy devices whose firmware was implemented by a drunken child or a sober goldfish. The systems programmer has traced a network problem across eight machines, three time zones, and a brief diversion into Amish country, where the problem was transmitted in the front left hoof of a mule named Deliverance. The systems programmer has read the kernel source, to better understand the deep ways of the universe, and the systems programmer has seen the comment in the scheduler that says “DOES THIS WORK LOL,” and the systems programmer has wept instead of LOLed, and the systems programmer has submitted a kernel patch to restore balance to The Force and fix the priority inversion that was causing MySQL to hang. &lt;b&gt;&lt;a href="https://www.usenix.org/system/files/1311_05-08_mickens.pdf"&gt;A systems programmer will know what to do when society breaks down, because the systems programmer already lives in a world without law.&lt;/a&gt;&lt;/b&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In the chaotic world of survival, there will be many failures, and a lot of unanticipated corner-cases. We are the best debuggers on this planet, period. We can tell you gadzillion ways of how things can go wrong. A career in programming and dealing with distributed systems prepared us for &lt;a href="http://muratbuffalo.blogspot.com/2018/01/why-you-should-use-modeling-with.html"&gt;seeing unanticipated ways things can go wrong.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;We are abstract thinkers&amp;nbsp;&lt;/h2&gt;&lt;p&gt;I would have loved to say that we are computational thinkers, and computational thinking will provide a lot of value. But, you see, we still couldn't figure out what that computational thinking is supposed to be yet.&lt;/p&gt;&lt;p&gt;I think a close proxy to computational thinking is abstract thinking: the ability to abstract things. It is still more of an art. But we are good at it, because we use practical abstractions every day. You would think mathematicians could also be the abstraction people, but they are too abstract that they are far removed from the real plane.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=tw3gsBms-f8&amp;amp;ab_channel=SPTDC"&gt;Great CSE people are great at abstracting&lt;/a&gt;. After abstracting, we solve the problem at the abstract plane, and then transfer the solution to the real plane, implement it, and generalize it.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;We are quick learners&lt;/h2&gt;&lt;p&gt;We are trained and skilled at learning new languages/tools constantly as part of our daily work. We learn at a rate no other profession could even conceive of. It is not uncommon for job ads looking for experience with a dozen different tools/languages. It is not uncommon for a computer scientist to be told to deliver a project in one month in a language she didn't know before.&amp;nbsp;&lt;/p&gt;&lt;p&gt;How did we get ourselves in to such a predicament? If we were the philosopher type, it would be nice to ponder to sit and think about it. But ain't nobody got time for that. We have a dozen more languages/tools to learn for the rest of the year.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;We are skilled organizers&lt;/h2&gt;&lt;p&gt;If you are looking for people to bring project organization skills, we are again your best bet. There would be managers from business or management background that will try to coax their way into the life raft (they have very strong survival instincts after all), but don't let them deceive you. Software project management people would have the most experience with dealing with chaos, ever changing requirements, and aggressive deadlines.&amp;nbsp;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/8669108997802705673/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=8669108997802705673" title="1 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/8669108997802705673"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/8669108997802705673"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/03/defending-computer-science-engineering.html" title="Defending Computer Science &amp; Engineering in a life raft debate"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-SraEj3fkkNM/YEPYskbIXdI/AAAAAAAAJn8/OrAJdFRGRIwsH72qu3wFB5nNUVaV4WyKwCLcBGAsYHQ/s72-c/overcome.jpg" height="72" width="72"/>
    <thr:total>1</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-9195727313486447941</id>
    <published>2021-02-27T13:26:00.004-05:00</published>
    <updated>2021-02-27T13:44:55.163-05:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="bestof"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="distributed consensus"/>
    <title type="text"> Foundational distributed systems papers</title>
    <content type="html">&lt;p&gt;I talked about &lt;a href="http://muratbuffalo.blogspot.com/2021/02/read-papers-not-too-much-mostly.html"&gt;the importance of reading foundational papers&lt;/a&gt; last week. To followup, here is my compilation of foundational papers in the distributed systems area. (I focused on the core distributed systems area, and did not cover networking, security, distributed ledgers, verification work etc. I even left out distributed transactions, I hope to cover them at a later date.)&amp;nbsp;&lt;/p&gt;&lt;p&gt;I classified the papers by subject, and listed them in chronological order. I also listed expository papers and blog posts at the end of each section.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h1 style="text-align: left;"&gt;Time and State in Distributed Systems&lt;/h1&gt;&lt;p&gt;&lt;a href="https://lamport.azurewebsites.net/pubs/time-clocks.pdf"&gt;Time, Clocks, and the Ordering of Events in a Distributed System.&lt;/a&gt; Leslie Lamport, Commn. of the ACM,&amp;nbsp; 1978.&lt;/p&gt;&lt;p&gt;&lt;a href="https://lamport.azurewebsites.net/pubs/chandy.pdf"&gt;Distributed Snapshots: Determining Global States of a Distributed System.&lt;/a&gt; K. Mani Chandy Leslie Lamport, ACM Transactions on Computer Systems, 1985.&lt;/p&gt;&lt;p&gt;&lt;a href="https://pages.cs.wisc.edu/~remzi/Classes/739/Fall2016/Papers/mattern89.pdf"&gt;Virtual Time and Global States of Distributed Systems.&lt;/a&gt;&amp;nbsp;Mattern, F. 1988.&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Expository papers and blog posts&lt;/h3&gt;&lt;p&gt;&lt;a href="https://queue.acm.org/detail.cfm?id=2745385"&gt;There is No Now&lt;/a&gt;. Justin Sheehy, ACM Queue 2015&lt;/p&gt;&lt;p&gt;&lt;a href="https://queue.acm.org/detail.cfm?id=2917756"&gt;Why Logical Clocks are Easy&lt;/a&gt;. Carlos Baquero and Nuno Preguiça, ACM Queue 2016.&lt;/p&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/2014/07/hybrid-logical-clocks.html"&gt;Hybrid logical clocks&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/2018/01/logical-clocks-and-vector-clocks.html"&gt;Logical clocks and Vector clocks modeling in TLA+/PlusCal&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h1 style="text-align: left;"&gt;Impossibility results&amp;nbsp;&lt;/h1&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Two_Generals%27_Problem"&gt;Coordinated Attack or Two Generals problem&lt;/a&gt; is a fundamental impossibility in distributed systems. It started more of folks theorem, so instead of pointing to a paper, I provide a link to the wikipedia page.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf"&gt;Impossibility of Distributed Consensus with One Faulty Process&lt;/a&gt;, Fischer, Lynch and Patterson, JACM, 1985&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.cs.utexas.edu/~lorenzo/corsi/cs380d/papers/p225-chandra.pdf"&gt;Unreliable Failure Detectors for Reliable Distributed Systems&lt;/a&gt;, Tushar Deepak Chandra and Sam Toueg, Journal of the ACM, 1996.&lt;/p&gt;&lt;p&gt;&lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.3690&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;Harvest, Yield, and Scalable Tolerant Systems&lt;/a&gt;, Armando Fox, Eric A. Brewer, 1999&lt;/p&gt;&lt;p&gt;&lt;a href="https://sites.cs.ucsb.edu/~rich/class/cs293b-cloud/papers/brewer-cap.pdf"&gt;CAP Twelve years later: How the rules have changed,&lt;/a&gt; Eric Brewer, 2012.&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Expository papers and blog posts&lt;/h3&gt;&lt;p&gt;&lt;a href="http://the-paper-trail.org/blog/a-brief-tour-of-flp-impossibility/"&gt;A Brief Tour of FLP Impossibility&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/2015/02/paper-summary-perspectives-on-cap.html"&gt;Paper summary: Perspectives on the CAP theorem&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h1 style="text-align: left;"&gt;Consensus and state machine replication&lt;/h1&gt;&lt;p&gt;&lt;a href="http://pmg.csail.mit.edu/papers/vr.pdf"&gt;Viewstamped Replication: A New Primary Copy Method to Support Highly-Available Distributed Systems.&lt;/a&gt; B. Oki and B. Liskov. SOSP 1988&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.cs.cornell.edu/fbs/publications/smsurvey.pdf"&gt;Implementing Fault-Tolerant Services Using the State Machine Approach: a Tutorial&lt;/a&gt;, Fred Schneider, 1990&lt;/p&gt;&lt;p&gt;&lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.61.8330&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;How to build a highly available system with consensus,&lt;/a&gt; Butler Lampson, 1996&lt;/p&gt;&lt;p&gt;&lt;a href="https://lamport.azurewebsites.net/pubs/lamport-paxos.pdf"&gt;The Part-Time Parliament (Paxos)&lt;/a&gt; Leslie Lamport, 1998. (&lt;a href="https://www.microsoft.com/en-us/research/publication/part-time-parliament/"&gt;See context&lt;/a&gt;)&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="http://pmg.csail.mit.edu/papers/osdi99.pdf"&gt;Practical Byzantine Fault Tolerance.&lt;/a&gt; Miguel Castro, Barbara Liskov. OSDI 1999.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.cs.cornell.edu/home/rvr/papers/OSDI04.pdf"&gt;Chain Replication for Supporting High Throughput and Availability&lt;/a&gt;. Robbert van Renesse and Fred B. Schneider, OSDI 2004.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.usenix.org/legacy/event/atc10/tech/full_papers/Hunt.pdf"&gt;ZooKeeper: Wait-free coordination for Internet-scale systems&lt;/a&gt;. Patrick Hunt, Mahadev Konar, Flavio P. Junqueira, Benjamin Reed, Usenix ATC 2010.&lt;/p&gt;&lt;p&gt;&lt;a href="https://dl.acm.org/doi/10.1145/2517349.2522732"&gt;Tango: Distributed Data Structures over a Shared Log&lt;/a&gt;, Mahesh Balakrishnan, Dahlia Malkhi, Ted Wobber, Ming Wu, Vijayan Prabhakaran, Michael Wei, John D. Davis, Sriram Rao, Tao Zou, Aviad Zuckk. SOSP 2013.&lt;/p&gt;&lt;p&gt;&lt;a href="https://dl.acm.org/doi/10.1145/2517349.2517350"&gt;There is more consensus in Egalitarian parliaments&lt;/a&gt;. Iulian Moraru, David G. Andersen, Michael Kaminsky, SOSP 2013.&lt;/p&gt;&lt;p&gt;&lt;a href="https://arxiv.org/abs/1608.06696"&gt;Flexible Paxos: Quorum intersection revisited.&lt;/a&gt; Heidi Howard, Dahlia Malkhi, Alexander Spiegelman. 2016.&lt;/p&gt;&lt;p&gt;&lt;a href="https://flint.cs.yale.edu/flint/publications/socc19.pdf"&gt;WormSpace: A modular foundation for simple, verifiable distributed systems.&lt;/a&gt; Ji-Yong Shin, Jieung Kim, Wolf Honore, Hernán Vanzetto, Srihari Radhakrishnan, Mahesh Balakrishnan, Zhong Shao, SOCC'19.&amp;nbsp;&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Expository papers and blog posts&lt;/h3&gt;&lt;p&gt;&lt;a href="https://raft.github.io/raft.pdf "&gt;In Search of an Understandable Consensus Algorithm.&lt;/a&gt; Diego Ongaro, John Ousterhout, Usenix ATC, 2014.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.cs.cornell.edu/courses/cs7412/2011sp/paxos.pdf"&gt;Paxos Made Moderately Complex&lt;/a&gt;. Robbert Van Renesse and Deniz Altinbuken, ACM Computing Surveys, 2015.&lt;/p&gt;&lt;p&gt;&lt;a href="https://cse.buffalo.edu/tech-reports/2016-02.orig.pdf"&gt;Consensus in the Cloud: Paxos Systems Demystified&lt;/a&gt;. Ailidani Ailijiang, Aleksey Charapko, Murat Demirbas, 2016.&lt;/p&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/2016/11/modeling-paxos-and-flexible-paxos-in.html"&gt;Modeling Paxos and Flexible Paxos in Pluscal and TLA+&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/2019/07/dissecting-performance-bottlenecks-of.html"&gt;Dissecting performance bottlenecks of Paxos protocols.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h1 style="text-align: left;"&gt;Distributed algorithms&lt;/h1&gt;&lt;p&gt;&lt;a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.93.314&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;Self-stabilizing systems in spite of distributed control&lt;/a&gt;, Edsgar W. Dijkstra, CACM 1974.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.cs.utexas.edu/users/misra/scannedPdf.dir/DrinkingPhil.pdf"&gt;The Drinking Philosophers Problem&lt;/a&gt;, K. M. Chandy, J. Misra, ACM TOPLAS 1984&lt;/p&gt;&lt;p&gt;&lt;a href="http://courses.csail.mit.edu/6.895/fall02/papers/Awerbuch/focs90.pdf"&gt;Sparse partitions&lt;/a&gt;, Baruch Awerbuch, David Peleg, FOCS 1990.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="http://web.cse.ohio-state.edu/siefast/group/publications/distributed-reset.pdf"&gt;Distributed reset&lt;/a&gt;, Anish Arora, Mohamed Gouda, 1994&lt;/p&gt;&lt;p&gt;&lt;a href="http://cs.brown.edu/people/mph/DemmerH98/disc.pdf"&gt;The Arrow Distributed Directory Protocol&lt;/a&gt;, Michael J. Demmer, M. Herlihy, DISC 1998.&amp;nbsp;&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Expository papers and blog posts&lt;/h3&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/2015/01/dijkstras-stabilizing-token-ring.html"&gt;Dijkstra's stabilizing token ring algorithm&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/2016/11/hygienic-dining-philosophers.html"&gt;Modeling the hygienic dining philosophers algorithm in TLA+&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h1 style="text-align: left;"&gt;Miscellaneous&lt;/h1&gt;&lt;p&gt;&lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/acrobat-17.pdf"&gt;Hints for computer system design&lt;/a&gt;, Butler Lampson, 1983&lt;/p&gt;&lt;p&gt;&lt;a href="https://courses.cs.washington.edu/courses/cse552/07sp/papers/distributed_state.pdf"&gt;The role of distributed state&lt;/a&gt;, John Ousterhout, 1990&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.sosp.org/2001/papers/welsh.pdf"&gt;SEDA: An Architecture for Well-Conditioned, Scalable Internet Services&lt;/a&gt;. Matt Welsh, David Culler, and Eric Brewer, SOSP 2001&lt;/p&gt;&lt;p&gt;&lt;a href="http://usenix.org/events/hotos03/tech/full_papers/candea/candea.pdf"&gt;Crash only software&lt;/a&gt;, George Candea, Armando Fox, HotOS 2003&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Expository papers and blog posts&lt;/h3&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/2020/06/learning-about-distributed-systems.html"&gt;Learning about distributed systems: where to start?&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h1 style="text-align: left;"&gt;Cloud computing, big data storage/processing&amp;nbsp;&lt;/h1&gt;&lt;p&gt;&lt;a href="https://courses.cs.washington.edu/courses/cse454/05sp/papers/GiantScale-IEEE.pdf"&gt;Lessons from Giant-Scale Services&lt;/a&gt;. Eric A. Brewer, IEEE Internet Computing, 2001.&lt;/p&gt;&lt;p&gt;&lt;a href="https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf"&gt;MapReduce: Simplified Data Processing on Large Clusters&lt;/a&gt;. Jeffrey Dean and Sanjay Ghemawat, OSDI 2004.&lt;/p&gt;&lt;p&gt;&lt;a href="https://dsf.berkeley.edu/cs286/papers/optimistic-csur2005.pdf"&gt;Optimistic Replication&lt;/a&gt;, Yasushi Saito and Marc Shapiro, 2005.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.allthingsdistributed.com/2007/10/amazons_dynamo.html"&gt;Dynamo: Amazon’s Highly Available Key-Value Store&lt;/a&gt;. Giuseppe DeCandia, Deniz Hastorun, Madan Jampani, Gunavardhan Kakulapati, Avinash Lakshman, Alex Pilchin, Swaminathan Sivasubramanian, Peter Vosshall and Werner Vogels, ACM SIGOPS 2007.&lt;/p&gt;&lt;p&gt;&lt;a href="https://mvdirona.com/jrh/talksAndPapers/JamesRH_Lisa.pdf"&gt;On designing and deploying Internet scale services&lt;/a&gt;, James Hamilton, LISA 2007&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.ics.uci.edu/~cs223/papers/cidr07p15.pdf"&gt;Life beyond Distributed Transactions: an Apostate's Opinion&lt;/a&gt;, Pat Helland, CIDR 2007.&lt;/p&gt;&lt;p&gt;&lt;a href="https://hal.inria.fr/inria-00609399v2/document"&gt;Conflict-free Replicated Data Types&lt;/a&gt;. Marc Shapiro, Nuno Preguiça, Carlos Baquero, Marek Zawirski, 2011.&lt;/p&gt;&lt;p&gt;&lt;a href="https://people.ucsc.edu/~palvaro/cidr11.pdf"&gt;Consistency Analysis in Bloom: a CALM and Collected Approach&lt;/a&gt;, Peter Alvaro, Neil Conway, Joseph M. Hellerstein, William R. Marczak, CIDR 2011.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf"&gt;Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing&lt;/a&gt;. Matei Zaharia, Mosharaf Chowdhury, Tathagata Das, Ankur Dave, Justin Ma, Murphy McCauley, Michael J. Franklin, Scott Shenker, Ion Stoica. NSDI 2012.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://cacm.acm.org/magazines/2013/2/160173-the-tail-at-scale/fulltext"&gt;Tail at scale&lt;/a&gt;. Jeff Dean, Luiz Andre Barroso, Commn of the ACM, 2013.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://dl.acm.org/doi/pdf/10.1145/2491245"&gt;Spanner: Google’s Globally Distributed Database&lt;/a&gt;, ACM, 2013.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.usenix.org/conference/osdi16/technical-sessions/presentation/abadi"&gt;TensorFlow: A System for Large-Scale Machine Learning&lt;/a&gt;, OSDI 2016.&lt;/p&gt;&lt;h3&gt;Expository papers&lt;/h3&gt;&lt;div&gt;&lt;a href="https://www2.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-28.pdf"&gt;Above the Clouds: A Berkeley View of Cloud Computing&lt;/a&gt;. Michael Armbrust, Armando Fox, Rean Griffith, Anthony D. Joseph, Randy H. Katz, Andrew Konwinski, Gunho Lee, David A. Patterson, Ariel Rabkin, Ion Stoica, Matei Zaharia, 2009.&lt;/div&gt;&lt;p&gt;&lt;a href="https://arxiv.org/abs/1902.03383"&gt;Cloud Programming Simplified: A Berkeley View on Serverless Computing&lt;/a&gt;, 2019.&amp;nbsp;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/9195727313486447941/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=9195727313486447941" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/9195727313486447941"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/9195727313486447941"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/02/foundational-distributed-systems-papers.html" title=" Foundational distributed systems papers"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-8436330762136344379.post-1278751058624328362</id>
    <published>2021-02-20T12:43:00.002-05:00</published>
    <updated>2021-02-20T12:43:13.016-05:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="reading-group"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="research-advice"/>
    <title type="text">Read papers, Not too much, Mostly foundational ones</title>
    <content type="html">&lt;p&gt;Here is my advice to people who want to develop competence and expertise in their fields.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Read papers&lt;/h2&gt;&lt;p&gt;By papers, I mean technical research papers, not white papers or blog posts.&amp;nbsp;&lt;/p&gt;&lt;p&gt;By read, I mean &lt;a href="http://muratbuffalo.blogspot.com/2013/07/how-i-read-research-paper.html"&gt;read rigorously and critically&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Not too much&lt;/h2&gt;&lt;p&gt;If you read rigorously and critically, you cannot read too many papers.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Moreover, learning by doing is the only way to internalize and grok a concept. If you read papers all day, you don't have time to try things yourself.&amp;nbsp;&lt;/p&gt;&lt;p&gt;If you are a PhD student, maybe read two or three papers a week (but, remember, rigorously and actively).&lt;/p&gt;&lt;p&gt;If you are not in academia, maybe read one paper a week or two.&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Mostly foundational ones&lt;/h2&gt;&lt;p&gt;While there are exceptions, it is better to prioritize:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;seminal work over incremental work,&lt;/li&gt;&lt;li&gt;general principled work over point-solutions,&lt;/li&gt;&lt;li&gt;work introducing techniques/tools over work applying techniques&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;A big exception is good expository papers. Unfortunately, the academia treats them as something the cat dragged in, because they are not "novel".&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Closing&lt;/h2&gt;&lt;p&gt;It is best if you can write a summary and review about the paper. This will help you improve your understanding of the concepts and hone your thinking, and will also help others studying on the topic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;I have written &lt;a href="http://muratbuffalo.blogspot.com/search/label/paper-review"&gt;a lot of summaries/reviews of distributed systems papers&lt;/a&gt;. But I haven't provided a list of foundational papers. I will work on that.&amp;nbsp;&lt;/p&gt;&lt;p&gt;It is useful to discuss the papers you read with a group to learn about diverse opinions and perspectives on the topic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Here is a link to &lt;a href="https://github.com/papers-we-love/papers-we-love"&gt;Papers We Love forum&lt;/a&gt; where you can read and discuss papers with a group.&lt;/p&gt;&lt;p&gt;Finally, here is a link to &lt;a href="https://join.slack.com/t/distsysreadinggroup/shared_invite/zt-lzcn7x42-R0eSDF4NVpAFTnhWaoLZ1Q"&gt;our Zoom paper discussion group&lt;/a&gt; which meets every Wednesday at 3:30pm EST.&amp;nbsp;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://muratbuffalo.blogspot.com/feeds/1278751058624328362/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=8436330762136344379&amp;postID=1278751058624328362" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/1278751058624328362"/>
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8436330762136344379/posts/default/1278751058624328362"/>
    <link rel="alternate" type="text/html" href="http://muratbuffalo.blogspot.com/2021/02/read-papers-not-too-much-mostly.html" title="Read papers, Not too much, Mostly foundational ones"/>
    <author>
      <name>Murat</name>
      <uri>http://www.blogger.com/profile/07842046940394980130</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="//4.bp.blogspot.com/-YqIv1nLh7po/Xue0ioAgOjI/AAAAAAAAJDQ/OSDpEdYTkfswmn9-vLPMbuMl0peGFhVIQCK4BGAYYCw/s113/MuratDemirbas.jpg"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
</feed>
