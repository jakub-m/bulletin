<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Julia Evans]]></title>
  <link href="http://jvns.ca/atom.xml" rel="self"/>
  <link href="http://jvns.ca"/>
  <updated>2021-10-21T11:06:26+00:00</updated>
  <id>http://jvns.ca</id>
  <author>
    <name><![CDATA[Julia Evans]]></name>
  </author>
  <generator uri="http://gohugo.io/">Hugo</generator>

  
  <entry>
    <title type="html"><![CDATA[How to get useful answers to your questions]]></title>
    <link href="https://jvns.ca/blog/2021/10/21/how-to-get-useful-answers-to-your-questions/"/>
    <updated>2021-10-21T11:06:26+00:00</updated>
    <id>https://jvns.ca/blog/2021/10/21/how-to-get-useful-answers-to-your-questions/</id>
    <content type="html"><![CDATA[

<p>5 years ago I wrote a post called <a href="https://jvns.ca/blog/good-questions/">how to ask good questions</a>.
I still really like that post, but it&rsquo;s missing a few of the tactics I use to
get useful answers like &ldquo;interrupt people when they&rsquo;re going off on an
irrelevant tangent&rdquo;.</p>

<h3 id="what-can-go-wrong-when-asking-questions">what can go wrong when asking questions</h3>

<p>Often when I ask a vague or underspecified question, what happens is one of:</p>

<ol>
<li>the person starts by explaining a bunch of stuff I already know</li>
<li>the person explains some things which I don&rsquo;t know, but which I don&rsquo;t think
are relevant to my problem</li>
<li>the person starts giving a relevant explanation, but using terminology that
I don&rsquo;t understand, so I still end up being confused</li>
</ol>

<p>None of these give me the answer to my question and this can be quite
frustrating (it often feels condescending when someone embarks on a lengthy
explanation of things I already know, even if they had no way of knowing that I
already know those things), so let&rsquo;s talk about I try to avoid situations like
this and get the answers I need.</p>

<p>Before we talk about interrupting, I want to talk about my 2 favourite
question-asking tactics again &ndash; asking yes/no questions and stating your
understanding.</p>

<h3 id="ask-yes-no-questions">ask yes/no questions</h3>

<p>My favourite tactic is to ask a yes/no question. What I love about this is that
there&rsquo;s a much lower chance that the person answering will go off on an
irrelevant tangent &ndash; they&rsquo;ll almost always say something useful to me.</p>

<p>I find that it&rsquo;s often possible to come up with yes/no questions even when
discussing a complicated topic. For example, here are a bunch of yes/no
questions I asked a friend when trying to learn a little bit about databases from them:</p>

<ul>
<li>how often do you expect db failovers to happen? like every week?</li>
<li>do you need to scale up by hand?</li>
<li>are fb/dropbox both using mysql?</li>
<li>does fb have some kind of custom proprietary mysql management software?</li>
<li>is this because mysql and postgres were designed at a time when people didn&rsquo;t
think failover was something you&rsquo;d have to do that frequently?</li>
<li>i still don&rsquo;t really understand that blog post about replsets, like is he
saying that mongodb replication is easier to set up than mysql replication?</li>
<li>is orchestrator a proxy?</li>
<li>is the goal of the replicas you&rsquo;re talking about to be read replicas for performance?</li>
<li>do you route queries to a shard based on the id you&rsquo;re searching for?</li>
<li>is the point that with compression it takes extra time to read but it doesn&rsquo;t matter because you almost never read?</li>
</ul>

<p>The answers to yes/no questions usually aren&rsquo;t just &ldquo;yes&rdquo; or &ldquo;no&rdquo; &ndash; for all of
those questions my friend elaborated on the answer, and the elaborations were
always useful to me.</p>

<p>You&rsquo;ll notice that some of those questions are &ldquo;check my understanding&rdquo;
questions &ndash; like &ldquo;do you route queries to a shard based on the id you&rsquo;re
searching for?&rdquo; was my previous understanding of how database sharding worked,
and I wanted to check if it was correct or not.</p>

<p>I also find that yes/no questions get me answers faster because they&rsquo;re
relatively easy to answer quickly.</p>

<h3 id="state-your-current-understanding">state your current understanding</h3>

<p>My second favourite tactic is to state my understanding of how the system works.</p>

<p>Here&rsquo;s an example from the &ldquo;asking good questions&rdquo; post of a &ldquo;state your understanding&rdquo; <a href="https://groups.google.com/g/rkt-dev/c/bhGeR3pUfPY">email I sent to the rkt-dev mailing list</a>:</p>

<blockquote>
<p>I&rsquo;ve been trying to understand why the tree store / image store are designed the way they are in rkt.</p>

<p>My current understanding of how <em>Docker</em>&rsquo;s image storage on disk works right now (from <a href="https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/">https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/</a>) is:</p>

<ul>
<li>every layer gets one directory, which is basically that layer&rsquo;s filesystem</li>
<li>at runtime, they all get stacked (via whatever CoW filesystem you&rsquo;re using)</li>
<li>every time you do IO, you go through the stack of directories (or however these overlay drivers work)</li>
</ul>

<p>my current understanding of rkt&rsquo;s image storage on disk is: (from the &ldquo;image lifecycle&rdquo; section here: <a href="https://github.com/coreos/rkt/blob/master/Documentation/devel/architecture.md">https://github.com/coreos/rkt/blob/master/Documentation/devel/architecture.md</a>)</p>

<ul>
<li>every layer gets an image in the image store</li>
<li>when you run an ACI file, all the images that that ACI depends on get unpacked and copied into a single directory (in the tree store)</li>
</ul>

<p>guess at why rkt decided to architect its storage differently from Docker:</p>

<ol>
<li>having very deep overlay filesystems can be expensive</li>
<li>so if you have a lot of layers, copying them all into a directory (the &ldquo;tree store&rdquo;) results in better performance</li>
</ol>

<p>So rkt is trading more space used on disk (every image in the image store gets copied at least once) for better runtime performance (there are no deep chains of overlays)</p>

<p>Is this right? Have I misunderstood what rkt does (or what Docker does?) Are there other reasons for the difference?</p>
</blockquote>

<p>This:</p>

<ul>
<li>states my goal (understand rkt&rsquo;s design choices)</li>
<li>states my understanding of how rkt and docker work</li>
<li>makes some guesses at the goal so that people can confirm/deny</li>
</ul>

<p>This question got a <a href="https://groups.google.com/g/rkt-dev/c/bhGeR3pUfPY/m/PYEKLIr9AwAJ">great reply</a>, which among other things pointed out something
that I&rsquo;d totally missed &ndash; that the ACI format is a DAG instead of a linked
list, which I think means that you could install Debian packages in any order
and not have to rebuild everything if you remove an <code>apt-get install</code> in the
middle of your Dockerfile.</p>

<p>I also find the process of writing down my understanding is really helpful by
itself just to clarify my own thoughts &ndash; sometimes by the time I&rsquo;m done I&rsquo;ve
answered my own question :)</p>

<p>Stating your understanding is a kind of yes/no
question &ndash; &ldquo;this is my understanding of how X works, is that right or wrong?&rdquo;.
Often the answer is going to be &ldquo;right in some ways and wrong in others&rdquo;, but
even so it makes the job of the answerer a lot easier.</p>

<p>Okay! Now let&rsquo;s talk about interrupting a little bit.</p>

<h3 id="be-willing-to-interrupt">be willing to interrupt</h3>

<p>If someone goes off on a very long explanation that isn&rsquo;t helping me at all, I
think it&rsquo;s important to interrupt them. This can feel rude, but ultimately it&rsquo;s
more efficient for everyone &ndash; it&rsquo;s a waste of both their time and my time to
continue.</p>

<p>Usually I&rsquo;ll interrupt by asking a more specific question, because usually if
someone has gone off on a long irrelevant explanation it&rsquo;s because I asked an
overly vague question to start with.</p>

<h3 id="don-t-accept-responses-that-don-t-answer-your-question">don&rsquo;t accept responses that don&rsquo;t answer your question</h3>

<p>If someone finishes a statement that doesn&rsquo;t answer you question, it&rsquo;s
important not to leave it there! Keep asking questions!</p>

<p>a couple of ways you can do this:</p>

<ol>
<li>ask a much more specific question (like a yes/no question) that&rsquo;s in the direction of what you actually wanted to know</li>
<li>ask them to clarify some terminology you didn&rsquo;t understand (what&rsquo;s an X?)</li>
</ol>

<h3 id="take-a-minute-to-think">take a minute to think</h3>

<p>Sometimes when asking someone a question, they&rsquo;ll tell me new information
that&rsquo;s really surprising. For example, I recently learned that Javascript
async/await isn&rsquo;t implemented with coroutines (I thought it was because AFAIK Python
async/await is implemented with coroutines).</p>

<p>I was pretty surprised by this, and I really needed to stop and think about
what the implications of that were and what other questions I had about how
Javascript works based on that new piece of information.</p>

<p>If this happens in a real-time conversation sometimes I&rsquo;ll literally say
something like &ldquo;wait, that&rsquo;s surprising to me, let me think for a minute&rdquo; and
try to incorporate the new data and come up with another question.</p>

<h3 id="it-takes-a-little-bit-of-confidence">it takes a little bit of confidence</h3>

<p>All of these things &ndash; being willing to interrupt, not accepting responses that
don&rsquo;t answer your questions, and asking for a minute to think &ndash; require a
little bit of confidence!</p>

<p>In the past when I&rsquo;ve struggled with confidence, I&rsquo;ve sometimes thought &ldquo;oh,
this explanation is probably really good, I&rsquo;m just not smart enough to
understand it&rdquo;, and kind of accepted it. And even today I sometimes find it
hard to keep asking questions when someone says a lot of words I don&rsquo;t
understand.</p>

<p>It helps me to remember that:</p>

<ol>
<li>people usually want to help (even if their first explanation was full of confusing jargon)</li>
<li>if I can get even 1 useful piece of information by the end of the
conversation, it&rsquo;s a victory (like the answer to a yes/no question that I
previously didn&rsquo;t know the answer to)</li>
</ol>

<p>One of the reasons I dislike a lot of &ldquo;how to ask questions&rdquo; advice out there
is that it actually tries to <em>undermine</em> the reader&rsquo;s confidence &ndash; the
assumption is that the people answering the questions are Super Smart Perfect
People and you&rsquo;re probably wasting their time with your dumb questions. But in
reality (at least when at work) your coworkers answering the questions are
probably smart well-meaning people who want to help but aren&rsquo;t always able to
answer questions very clearly, so you need to ask follow up questions to get
answers.</p>

<h3 id="how-to-give-useful-answers">how to give useful answers</h3>

<p>There&rsquo;s also a lot you can do to try not to be the person who goes off on a
long explanation that doesn&rsquo;t help the person you&rsquo;re talking to at all.</p>

<p>I wrote about this already in <a href="https://jvns.ca/blog/answer-questions-well/">how to answer question in a helpful
way</a>, but the main thing I do is
pause periodically and check in. I&rsquo;ll often say something like &ldquo;does that make
sense?&ldquo;. (though this doesn&rsquo;t always work, sometimes people will say &ldquo;yes&rdquo; even
if they&rsquo;re confused)</p>

<p>It&rsquo;s especially important to check in if:</p>

<ol>
<li>You haven&rsquo;t explained a concept before (because your initial explanation will probably not be very good)</li>
<li>You don&rsquo;t know the person you&rsquo;re talking to very well (because you&rsquo;ll probably make incorrect assumptions about what they know / don&rsquo;t know)</li>
</ol>

<h3 id="being-good-at-extracting-information-is-a-superpower">being good at extracting information is a superpower</h3>

<p>Some developers know a lot but aren&rsquo;t very good at explaining what they know.
I&rsquo;m not trying to make a value judgement about that here (different people have
different strengths! explaining things is extremely hard to do well!).</p>

<p>I&rsquo;ve found that instead of being mad that some people aren&rsquo;t great at
explaining things, it&rsquo;s more effective for me to get better at asking
questions that will get me the answers I need.</p>

<p>This really expands the set of people I can learn from &ndash; instead of finding
someone who can easily give a clear explanation, I just need to find <em>someone</em>
who has the information I want and then ask them specific questions until I&rsquo;ve
learned what I want to know. And I&rsquo;ve found that most people really do want to
be helpful, so they&rsquo;re very happy to answer questions.</p>

<p>And if you get good at asking questions, you can often find a set of questions
that will get you the answers you want pretty quickly, so it&rsquo;s a good use of
everyone&rsquo;s time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tools to explore BGP]]></title>
    <link href="https://jvns.ca/blog/2021/10/05/tools-to-look-at-bgp-routes/"/>
    <updated>2021-10-05T08:53:24+00:00</updated>
    <id>https://jvns.ca/blog/2021/10/05/tools-to-look-at-bgp-routes/</id>
    <content type="html"><![CDATA[

<p>Yesterday there was a big Facebook outage caused by BGP. I&rsquo;ve been vaguely
interested in learning more about BGP for a long time, so I was reading a
couple of articles.</p>

<p>I got frustrated because none of the articles showed me how I could actually
look up information related to BGP on my computer, so I <a href="https://twitter.com/b0rk/status/1445199475195236356">wrote a tweet asking for tools</a>.</p>

<p>I got a bunch of useful replies as always, so this blog post shows some tools
you can use to look up BGP information. There might be an above average number
of things wrong in this post because I don&rsquo;t understand BGP that well.</p>

<h3 id="i-can-t-publish-bgp-routes">I can&rsquo;t publish BGP routes</h3>

<p>One of the reasons I&rsquo;ve never learned much about BGP is &ndash; as far as I know, I don&rsquo;t have access to publish BGP routes on the internet.</p>

<p>With most networking protocols, you can pretty trivially get access to
implement the protocol yourself if you want. For example you can:</p>

<ul>
<li>issue your own TLS certificates</li>
<li>write your own HTTP server</li>
<li>write your own TCP implementation</li>
<li>write your own authoritative DNS server for your domain (I&rsquo;m trying to do that right now for a small project)</li>
<li>set up your own certificate authority</li>
</ul>

<p>But with BGP, I think that unless you own your own ASN, you can&rsquo;t publish routes yourself!
(you <em>could</em> implement BGP on your home network, but that feels a bit boring to
me, when I experiment with things I like them to actually be on the real internet).</p>

<p>Anyway, even though I can&rsquo;t experiment with it, I still think it&rsquo;s super
interesting because I love networking, so I&rsquo;m going to show you some tools I
found to learn about BGP :)</p>

<p>First let&rsquo;s talk through some BGP terminology though. I&rsquo;m going to go pretty
fast because I&rsquo;m more interested in the tools and there are a lot of high level
explanations of BGP out there (like this <a href="https://blog.cloudflare.com/october-2021-facebook-outage/">cloudflare post</a>).</p>

<h3 id="what-s-an-as-autonomous-system">What&rsquo;s an AS (&ldquo;autonomous system&rdquo;)</h3>

<p>The first thing we need to understand is an AS. Every AS:</p>

<ol>
<li>is owned by an organization (usually a large organization like your ISP, a government, a university, Facebook, etc)</li>
<li>controls a specific set of IP addresses (for example my ISP&rsquo;s AS includes 247,808 IP addresses)</li>
<li>has a number (like 1403)</li>
</ol>

<p>Here are some observations I made about ASes just by doing some experimentation:</p>

<ul>
<li>Some fairly big tech companies don&rsquo;t have their own AS. For example, I
looked up Patreon on BGPView, and as far as I can tell they don&rsquo;t own as AS
&ndash; their main site (patreon.com,
<a href="https://bgpview.io/ip/104.16.6.49">104.16.6.49</a>) is in Cloudflare&rsquo;s AS.</li>
<li>An AS can include IPs in many countries. Facebook&rsquo;s AS (<a href="https://bgpview.io/asn/32934#prefixes-v4">AS32934</a>) definitely has IP addresses in Singapore, Canada, Nigeria, Kenya, the US, and more countries.</li>
<li>It seems like IP address can be in more than one AS. For example, if I look up <a href="https://bgpview.io/ip/209.216.230.240">209.216.230.240</a>, it has 2 ASNs associated with it &ndash; AS6130 and AS21581. Apparently when this happens the more specific route takes priority &ndash; so packets to that IP would get routed to AS21581.</li>
</ul>

<h3 id="what-s-a-bgp-route">what&rsquo;s a BGP route?</h3>

<p>There are a lot of routers on the internet. For example, my ISP has routers.</p>

<p>When I send my ISP a packet (for example by running <code>ping 129.134.30.0</code>), my ISP&rsquo;s routers
needs to figure out how to actually get my packet to the IP address
<code>129.134.30.0</code>.</p>

<p>The way the router figures this out is that it has a <strong>route table</strong> &ndash; it has a list
of a bunch of IP ranges (like <code>129.134.30.0/23</code>), and routes it knows about to
get to that subnet.</p>

<p>Here&rsquo;s an example of a real route for <code>129.134.30.0/23</code>: (one of Facebook&rsquo;s subnets). This one isn&rsquo;t from my ISP.</p>

<pre><code>  11670 32934
    206.108.35.2 from 206.108.35.254 (206.108.35.254)
      Origin IGP, metric 0, valid, external
      Community: 3856:55000
      Last update: Mon Oct  4 21:17:33 2021
</code></pre>

<p>I think that this is saying that one path to <code>129.134.30.0</code> is through the
machine <code>206.108.35.2</code>, which is on its local network. So the router might send
my ping packet to <code>206.108.35.2</code> next, and then <code>206.108.35.2</code> will know how to
get it to Facebook. The two numbers at the beginning (<code>11670 32934</code>) are ASNs.</p>

<h3 id="what-s-bgp">what&rsquo;s BGP?</h3>

<p>My understanding of BGP is very shaky, but it&rsquo;s a protocol that companies use to
advertise BGP routes.</p>

<p>What happened yesterday with Facebook is that they basically made BGP
announcements withdrawing all their BGP routes, so every router in the world
deleted all of its routes related to Facebook, so no traffic could get there.</p>

<p>Okay, now that we&rsquo;ve covered some basic terminology, let&rsquo;s talk about tools you
can use to look at autonomous systems and BGP!</p>

<h3 id="tool-1-look-at-your-isp-s-as-with-bgpview">tool 1: look at your ISP&rsquo;s AS with BGPView</h3>

<p>To make this AS thing less abstract, let&rsquo;s use a tool called <a href="https://bgpview.io">BGPView</a> to look at a real AS.</p>

<p>My ISP (EBOX) owns <a href="https://bgpview.io/asn/1403">AS 1403</a>. Here are the <a href="https://bgpview.io/asn/1403#prefixes-v4">IP addresses my ISP owns</a>. If I look up my
computer&rsquo;s public IPv4 address, I can check that it&rsquo;s one of the IP addresses
my ISP owns &ndash; it&rsquo;s in the <code>104.163.128.0/17</code> block.</p>

<p>BGPView also has this graph of how my ISP is connected to other ASes</p>

<p><img src="https://jvns.ca/images/ebox-graph.png"></p>

<h3 id="tool-2-traceroute-a-and-mtr-z">tool 2: <code>traceroute -A</code> and <code>mtr -z</code></h3>

<p>Okay, so we&rsquo;re interested in autonomous systems. Let&rsquo;s see which ASes I go through from</p>

<p><code>traceroute</code> and <code>mtr</code> both have options to tell you the ASN for every IP you go through. The flags are <code>traceroute -A</code> and <code>mtr -z</code>, respectively.</p>

<p>Let&rsquo;s see which autonomous systems I go through on my way to facebook.com with <code>mtr</code>!</p>

<pre><code>$ mtr -z facebook.com
 1. AS???    LEDE.lan                                   
 2. AS1403   104-163-190-1.qc.cable.ebox.net            
 3. AS???    10.170.192.58                              
 4. AS1403   0.et-5-2-0.er1.mtl7.yul.ebox.ca            
 5. AS1403   0.ae17.er2.mtl3.yul.ebox.ca                
 6. AS1403   0.ae0.er1.151fw.yyz.ebox.ca                
 7. AS???    facebook-a.ip4.torontointernetxchange.net  
 8. AS32934  po103.psw01.yyz1.tfbnw.net                 
 9. AS32934  157.240.38.75                              
10. AS32934  edge-star-mini-shv-01-yyz1.facebook.com    
</code></pre>

<p>This is interesting &ndash; it looks like we go directly from my ISP&rsquo;s AS (1403) to
Facebook&rsquo;s AS (32934), with an &ldquo;internet exchange&rdquo; in between.</p>

<p><small>
I&rsquo;m not sure what an <a href="https://en.wikipedia.org/wiki/Internet_exchange_point">internet
exchange</a> is but I know
that it&rsquo;s an extremely important part of the internet. That&rsquo;s going to be for
another day though. My best guess is that it&rsquo;s the part of the internet that
enables &ldquo;peering&rdquo; &ndash; like an IX is a server room with a gigantic switch with
infinite bandwith in it where a bunch of different companies put their
computers so they can send each other packets.
</small></p>

<h3 id="mtr-looks-up-asns-with-dns">mtr looks up ASNs with DNS</h3>

<p>I got curious about how mtr looks up ASNs, so I used strace. I saw that it looked like it was using DNS, so I ran <a href="https://github.com/jvns/dnspeep/">dnspeep</a>, and voila!</p>

<pre><code>$ sudo dnspeep
...
TXT   1.190.163.104.origin.asn.cymru.com 192.168.1.1          TXT: 1403 | 104.163.176.0/20 | CA | arin | 2014-08-14, TXT: 1403 | 104.163.160.0/19 | CA | arin | 2014-08-14, TXT: 1403 | 104.163.128.0/17 | CA | arin | 2014-08-14
...
</code></pre>

<p>So it looks like we can find the ASN for <code>104.163.190.1</code> by looking up the <code>txt</code> record on <code>1.190.163.104.origin.asn.cymru.com</code>, like this:</p>

<pre><code>$ dig txt 1.190.163.104.origin.asn.cymru.com
1.190.163.104.origin.asn.cymru.com. 13911 IN TXT &quot;1403 | 104.163.160.0/19 | CA | arin | 2014-08-14&quot;
1.190.163.104.origin.asn.cymru.com. 13911 IN TXT &quot;1403 | 104.163.128.0/17 | CA | arin | 2014-08-14&quot;
1.190.163.104.origin.asn.cymru.com. 13911 IN TXT &quot;1403 | 104.163.176.0/20 | CA | arin | 2014-08-14&quot;
</code></pre>

<p>That&rsquo;s cool! Let&rsquo;s keep moving though.</p>

<h3 id="tool-3-the-packet-clearing-house-looking-glass">tool 3: the packet clearing house looking glass</h3>

<p>PCH (&ldquo;packet clearing house&rdquo;) is the organization that runs a lot of internet
exchange points. A &ldquo;looking glass&rdquo; seems to be a generic term for a web form
that lets you run network commands from another person&rsquo;s computer. There are
looking glasses that don&rsquo;t support BGP, but I&rsquo;m just interested in ones that
show you information about BGP routes.</p>

<p>Here&rsquo;s the PCH looking glass: <a href="https://www.pch.net/tools/looking_glass/">https://www.pch.net/tools/looking_glass/</a>.</p>

<p>In the web form on that site, I picked the Toronto IX (&ldquo;TORIX&rdquo;), since that&rsquo;s what <code>mtr</code> said I was using to go to facebook.com.</p>

<p><strong>thing 1: &ldquo;show ip bgp summary&rdquo;</strong></p>

<p>Here&rsquo;s the output. I&rsquo;ve redacted some of it:</p>

<pre><code>IPv4 Unicast Summary:
BGP router identifier 74.80.118.4, local AS number 3856 vrf-id 0
BGP table version 33061919
RIB entries 513241, using 90 MiB of memory
Peers 147, using 3003 KiB of memory
Peer groups 8, using 512 bytes of memory

Neighbor        V         AS MsgRcvd MsgSent   TblVer  InQ OutQ  Up/Down State/PfxRcd
...
206.108.34.248  4       1403  484672  466938        0    0    0 05w3d03h           50
...
206.108.35.2    4      32934  482088  466714        0    0    0 01w6d07h           38
206.108.35.3    4      32934  482019  466475        0    0    0 01w0d06h           38
...

Total number of neighbors 147
</code></pre>

<p>My understanding of what this is saying is that the Toronto Internet Exchange
(&ldquo;TORIX&rdquo;) is directly connected to both my ISP (EBOX, AS 1403) and Facebook (AS
32934).</p>

<p><strong>thing 2: &ldquo;show ip bgp 129.134.30.0&rdquo;</strong></p>

<p>Here&rsquo;s the output of picking &ldquo;show ip bgp&rdquo; for <code>129.134.30.0</code> (one of Facebook&rsquo;s IP addresses):</p>

<pre><code>BGP routing table entry for 129.134.30.0/23
Paths: (4 available, best #4, table default)
  Advertised to non peer-group peers:
  206.220.231.55
  11670 32934
    206.108.35.2 from 206.108.35.254 (206.108.35.254)
      Origin IGP, metric 0, valid, external
      Community: 3856:55000
      Last update: Mon Oct  4 21:17:33 2021

  11670 32934
    206.108.35.2 from 206.108.35.253 (206.108.35.253)
      Origin IGP, metric 0, valid, external
      Community: 3856:55000
      Last update: Mon Oct  4 21:17:31 2021

  32934
    206.108.35.3 from 206.108.35.3 (157.240.58.225)
      Origin IGP, metric 0, valid, external, multipath
      Community: 3856:55000
      Last update: Mon Oct  4 21:17:27 2021

  32934
    206.108.35.2 from 206.108.35.2 (157.240.58.182)
      Origin IGP, metric 0, valid, external, multipath, best (Older Path)
      Community: 3856:55000
      Last update: Mon Oct  4 21:17:27 2021
</code></pre>

<p>This seems to be saying that there are 4 routes to Facebook from that internet exchange.</p>

<p><strong>the quebec internet exchange doesn&rsquo;t seem to know anything about Facebook</strong></p>

<p>I also tried the same thing from the Quebec internet exchange QIX (which is
presumably closer to me, since I live in Montreal and not Toronto). But the QIX
doesn&rsquo;t seem to know anything about Facebook &ndash; when I put in <code>129.134.30.0</code> it
just says &ldquo;% Network not in table&rdquo;.</p>

<p>So I guess that&rsquo;s why I was sent through the Toronto IX and not the Quebec one.</p>

<h3 id="more-bgp-looking-glasses">more BGP looking glasses</h3>

<p>Here are some more websites with looking glasses that will give you similar
information from other points of view. They all seem to support the same <code>show ip bgp</code> syntax, maybe because they&rsquo;re running the same software? I&rsquo;m not sure.</p>

<ul>
<li><a href="http://www.routeviews.org/routeviews/index.php/collectors/">http://www.routeviews.org/routeviews/index.php/collectors/</a></li>
<li><a href="http://www.routeservers.org/">http://www.routeservers.org/</a></li>
<li><a href="https://lg.he.net/">https://lg.he.net/</a></li>
</ul>

<p>There seem to be a LOT of these looking glass services out there, way more than just those 3 lists.</p>

<p>Here&rsquo;s an example session with one of the servers on this list:
route-views.routeviews.org. This time I connected via telnet and not through a
web form, but the output looks like it&rsquo;s in the same format.</p>

<pre><code>$ telnet route-views.routeviews.org

route-views&gt;show ip bgp 31.13.80.36

BGP routing table entry for 31.13.80.0/24, version 1053404087
Paths: (23 available, best #2, table default)
  Not advertised to any peer
  Refresh Epoch 1
  3267 1299 32934
    194.85.40.15 from 194.85.40.15 (185.141.126.1)
      Origin IGP, metric 0, localpref 100, valid, external
      path 7FE0C3340190 RPKI State valid
      rx pathid: 0, tx pathid: 0
  Refresh Epoch 1
  6939 32934
    64.71.137.241 from 64.71.137.241 (216.218.252.164)
      Origin IGP, localpref 100, valid, external, best
      path 7FE135DB6500 RPKI State valid
      rx pathid: 0, tx pathid: 0x0
  Refresh Epoch 1
  701 174 32934
    137.39.3.55 from 137.39.3.55 (137.39.3.55)
      Origin IGP, localpref 100, valid, external
      path 7FE1604D3AF0 RPKI State valid
      rx pathid: 0, tx pathid: 0
  Refresh Epoch 1
  20912 3257 1299 32934
    212.66.96.126 from 212.66.96.126 (212.66.96.126)
      Origin IGP, localpref 100, valid, external
      Community: 3257:8095 3257:30622 3257:50001 3257:53900 3257:53904 20912:65004
      path 7FE1195AF140 RPKI State valid
      rx pathid: 0, tx pathid: 0
  Refresh Epoch 1
  7660 2516 1299 32934
    203.181.248.168 from 203.181.248.168 (203.181.248.168)
      Origin IGP, localpref 100, valid, external
      Community: 2516:1030 7660:9001
      path 7FE0D195E7D0 RPKI State valid
      rx pathid: 0, tx pathid: 0
          
</code></pre>

<p>Here there are a few options for routes:</p>

<ul>
<li><code>3267 1299 32934</code></li>
<li><code>6939 32934</code></li>
<li><code>701 174 32934</code></li>
<li><code>20912 3257 1299 32934</code></li>
<li><code>7660 2516 1299 32934</code></li>
</ul>

<p>I think the reason there&rsquo;s more than one AS in all of these is that <code>31.13.80.36</code> is a Facebook IP address in
Toronto, so this server (which is maybe on the US west coast, I&rsquo;m not sure) is
not able to connect to it directly, it needs to go to another AS first. So all of the routes have one or more ASNs</p>

<p>The shortest one is 6939 (&ldquo;Hurricane Electric&rdquo;), which is a &ldquo;global internet backbone&rdquo;. They also have their own <a href="https://lg.he.net/">hurricane electric looking glass</a> page.</p>

<h3 id="tool-4-bgplay">tool 4: BGPlay</h3>

<p>All the other tools so far have just shown us the current state of Facebook
routing where everything is fine, but this 4th tool lets us see the history of
this Facebook BGP internet disaster! It&rsquo;s a GUI tool so I&rsquo;m going to include a bunch of screenshots.</p>

<p>The tool is at <a href="https://stat.ripe.net/special/bgplay">https://stat.ripe.net/special/bgplay</a>. I typed in the IP address 129.134.30.12 (one of Facebook&rsquo;s IPs), if you want to play along.</p>

<p>First, let&rsquo;s look at the state of things before everything went wrong. I clicked in the timeline at 13:11:28 on Oct. 4, and got this:</p>

<p><img src="https://jvns.ca/images/bgplay-before.png"></p>

<p>I originally found this very overwhelming. What&rsquo;s happening? But then someone
on Twitter pointed out that the next place to look is to click on the timeline
right <em>after</em> the Facebook disaster happened (at 18:38 on Oct. 4).</p>

<p><img src="https://jvns.ca/images/bgplay-after.png"></p>

<p>It&rsquo;s pretty clear that something is wrong in this picture &ndash; all the BGP routes are gone! oh no!</p>

<p>The text at the top shows the last Facebook BGP route disappearing:</p>

<pre><code>Type: W &gt; withdrawal Involving: 129.134.30.0/24
Short description: The route 50869, 25091, 32934 has been withdrawn.
Date and time: 2021-10-04 16:02:33 Collected by: 20-91.206.53.12
</code></pre>

<p>If I then click the &ldquo;fast forward&rdquo; button, we see the BGP routes start to come back:</p>

<p><img src="https://jvns.ca/images/bgplay-return.png"></p>

<p>The first one announced is <code>137409 32934</code>. I don&rsquo;t think this is <em>actually</em> the
first one announced though &ndash; there are a lot of route announcements inside the
same second (at 2021-10-04 21:00:40), and I think the ordering inside BGPlay is arbitrary.</p>

<p>If I click the &ldquo;fast forward&rdquo; button again, more and more routes start to come back and routing starts to go back to normal</p>

<p>I found looking at this outage in BGPlay really fun, even though the interface is pretty confusing at first.</p>

<h3 id="maybe-it-is-important-to-understand-a-little-about-bgp">maybe it is important to understand a little about BGP?</h3>

<p>I started out this post by saying you can&rsquo;t change BGP routes
BGP, but then I remembered that in 2016 or 2017 there was a <a href="https://news.ycombinator.com/item?id=14246888">Telia routing issue</a> that caused us some minor
network at work. And when that happens, it is actually useful to understand why
your customers can&rsquo;t reach your site, even if it&rsquo;s totally out of your control.
I didn&rsquo;t know about any of these tools at that time but I would have liked to!</p>

<p>I think for most companies all you can do to respond to outages caused by
someone else&rsquo;s bad BGP routes is &ldquo;do nothing and wait for it to get fixed&rdquo;, but
it&rsquo;s nice to be able to <em>confidently</em> do nothing.</p>

<h3 id="some-ways-to-publish-bgp-routes">some ways to publish BGP routes</h3>

<p>If you want to (as a hobbyist) actually publish BGP routes, here are some links from the comments:</p>

<ul>
<li><a href="https://labs.ripe.net/author/samir_jafferali/build-your-own-anycast-network-in-nine-steps/">a guide to getting your own ASN</a></li>
<li><a href="https://dn42.eu/Home">dn42</a> seems to have a playground for BGP (it&rsquo;s not on the public internet, but it does have other people on it which seems more fun than just doing BGP by yourself at home)</li>
</ul>

<h3 id="that-s-all-for-now">that&rsquo;s all for now</h3>

<p>I think there are a lot more BGP tools (like PCH has a bunch of <a href="https://www.pch.net/resources/Routing_Data/IPv4_daily_snapshots/">daily snapshots of routing data</a> which look like fun), but
this post is already pretty long and there are other things I need to do today.</p>

<p>I was surprised by how much information I could get about BGP just as a regular
person, I always think of it as a &ldquo;secret network wizard&rdquo; thing but apparently there
are all kind of public machines anybody can just telnet to and use to look at the
route tables! Who knew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All my zines are now available in print!]]></title>
    <link href="https://jvns.ca/blog/2021/10/02/all-my-zines-are-now-available-in-print/"/>
    <updated>2021-10-02T09:42:31+00:00</updated>
    <id>https://jvns.ca/blog/2021/10/02/all-my-zines-are-now-available-in-print/</id>
    <content type="html"><![CDATA[

<p>Hello! <a href="https://jvns.ca/blog/2021/06/02/you-can-now-buy-print-version-of-my-zines-/">In June I announced</a> that I was releasing 4 zines in print and promised &ldquo;more zines
coming soon&rdquo;. &ldquo;Soon&rdquo; has arrived! You can get any zine you want in print now!</p>

<p>I&rsquo;m doing this now so that you can get zines in the mail in time for Christmas, or
any other end-of-year holiday you celebrate :)</p>

<h3 id="you-can-preorder-zines-today">you can preorder zines today!</h3>

<p>First the basic facts!</p>

<ul>
<li>you can preorder zines as of today</li>
<li>the preorder deadline is October 12</li>
<li>zines will ship around November 5</li>
<li>you&rsquo;ll get them in time for Christmas</li>
<li>more logistical details in the <a href="https://store.wizardzines.com/pages/preorder-faq">Preorders FAQ</a></li>
</ul>

<p>Here&rsquo;s the link to get them:</p>

<div align="center">
<a class="button2" href="https://store.wizardzines.com/">Preorder print zines</a>
</div>

<p><br></p>

<p>Here are a few more notes about how the print zines work &ndash; they&rsquo;re mostly the same as <a href="https://jvns.ca/blog/2021/06/02/you-can-now-buy-print-version-of-my-zines-/">last time</a></p>

<h3 id="why-a-preorder">why a preorder?</h3>

<p>It makes it easier to decide how many zines to print! I don’t want to
accidentally underestimate demand and then not have enough zines for everyone
who wants them. With a preorder, everyone can get all the zines they want!</p>

<h3 id="great-print-quality">great print quality!</h3>

<p>I&rsquo;m working with the same wonderful print company again to print the zines (<a href="https://www.girliepress.com/">Girlie Press</a>).  I don&rsquo;t have photos of the new
zines yet, but here are some photos from people who received the last batch of
zines:</p>

<p>(these are all Twitter embeds so they probably won&rsquo;t work if you&rsquo;re reading this an email / RSS feed)</p>

<p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">I got by mail these
beautiful zines and stickers made by <a
href="https://twitter.com/b0rk?ref_src=twsrc%5Etfw">@b0rk</a>. Certainly the
pics don&#39;t make justice to the impressive quality of the paper and the
print. I hope more zines get the print version! <a
href="https://t.co/mdoEtlZPe7">pic.twitter.com/mdoEtlZPe7</a></p>&mdash;
Raymundo Cassani (@r_cassani) <a
href="https://twitter.com/r_cassani/status/1408075422433267716?ref_src=twsrc%5Etfw">June
24, 2021</a></blockquote> <script async
src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Received my Bite Size books and stickers from <a href="https://twitter.com/b0rk?ref_src=twsrc%5Etfw">@b0rk</a> today! They are beautiful! <a href="https://twitter.com/hashtag/linux?src=hash&amp;ref_src=twsrc%5Etfw">#linux</a> <a href="https://twitter.com/hashtag/bash?src=hash&amp;ref_src=twsrc%5Etfw">#bash</a> <a href="https://twitter.com/hashtag/networking?src=hash&amp;ref_src=twsrc%5Etfw">#networking</a> <a href="https://t.co/AkCKnOQ7bO">pic.twitter.com/AkCKnOQ7bO</a></p>&mdash; Paul Mora (@pmora_ttc) <a href="https://twitter.com/pmora_ttc/status/1402035030852001792?ref_src=twsrc%5Etfw">June 7, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Got my Bite Size collection from <a href="https://twitter.com/b0rk?ref_src=twsrc%5Etfw">@b0rk</a>! 😍 Really appreciate this work, and the zines look amazing! <a href="https://t.co/x7DZyWpwJP">pic.twitter.com/x7DZyWpwJP</a></p>&mdash; Luana (@lnplgv) <a href="https://twitter.com/lnplgv/status/1407704026825871368?ref_src=twsrc%5Etfw">June 23, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">inspired by <a href="https://twitter.com/b0rk?ref_src=twsrc%5Etfw">@b0rk</a>, <a href="https://twitter.com/actuallysoham?ref_src=twsrc%5Etfw">@actuallysoham</a> and i made a zine for <a href="https://twitter.com/mnwsth?ref_src=twsrc%5Etfw">@mnwsth</a>’s OS course and <a href="https://twitter.com/b0rk?ref_src=twsrc%5Etfw">@b0rk</a> graciously sent us some of her own zines and stickers! here’s to making programming concepts more accessible! <a href="https://t.co/otKDglh3gV">pic.twitter.com/otKDglh3gV</a></p>&mdash; Tanvi Roy (@actuallytanvi) <a href="https://twitter.com/actuallytanvi/status/1426843068141948931?ref_src=twsrc%5Etfw">August 15, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<h3 id="free-shipping">free shipping!</h3>

<p>I never like paying for shipping, so I&rsquo;ve set up free shipping for US orders
over $30, and international orders over $50.</p>

<p>All of the shipping is being managed by a delightful small company called
<a href="https://www.whitesquirrel.com/">White Squirrel</a> near Seattle, who specialize in
shipping for artists. They&rsquo;ve been a joy to work with for the last 4 months.</p>

<h3 id="a-discount-if-you-already-bought-the-pdf-version">a discount if you already bought the PDF version!</h3>

<p>If you already bought the PDF version of these zines &ndash; thank you so much!! You
can use the <strong>PDFBUYER</strong> discount code for 50% off the print version. You&rsquo;ll
need to use the same email address you used when you bought the PDF. If you run
into any problems with that, email me at julia@wizardzines.com.</p>

<h3 id="all-print-zines-include-the-pdf-version-too">all print zines include the PDF version too!</h3>

<p>If you order the print version and you don&rsquo;t already have the PDF version &ndash;
it&rsquo;s included! You&rsquo;ll get a link with your confirmation email that&rsquo;ll let you
download the PDF right away.</p>

<h3 id="discounts-for-buying-zines-in-bulk">discounts for buying zines in bulk!</h3>

<p>If you want to buy your team zines for Christmas, there&rsquo;s a 20% discount for
orders over $300. Just use code <strong>TEAMZINES</strong>.</p>

<p>(this is the other thing that I said was &ldquo;coming soon&rdquo; last time :))</p>

<h3 id="how-to-get-my-free-zines-in-print-your-linux-toolbox">how to get my free zines in print: Your Linux Toolbox</h3>

<p>You might notice that <a href="https://store.wizardzines.com">https://store.wizardzines.com</a> doesn&rsquo;t have print versions
of my free zines (like &ldquo;Networking! ACK!&rdquo; or &ldquo;So you want to be a wizard&rdquo;). You
can get those by buying the &ldquo;Your Linux Toolbox&rdquo; box set, <a href="https://jvns.ca/blog/2019/10/21/print-collection-of-my-first-7-zines/">this blog post has
links to where to get it</a>.</p>

<p>(if you&rsquo;re wondering why Your Linux Toolbox is so much cheaper than the other
print zines for sale: it&rsquo;s pretty simple, it&rsquo;s because I basically don&rsquo;t make any money from it :). But it&rsquo;s
great &ndash; I love the box!! &ndash; and you should order it if you want my free zines in print!)</p>

<p><small>
I&rsquo;d love to be able to print a similar box for my other zines, but I haven&rsquo;t
found a company that will do it yet! Maybe one day!
</small></p>

<h3 id="working-with-small-businesses-that-are-close-to-each-other-is-great">working with small businesses that are close to each other is great</h3>

<p>When I was originally thinking about how to ship, I considered getting the
zines printed in China because it&rsquo;s cheaper and that&rsquo;s what a lot of publishers
do.</p>

<p>Instead I decided to use a print company (Girlie Press) that&rsquo;s in the same area as the company
that handles my shipping (the Seattle area). I&rsquo;m really happy with this choice
even though it&rsquo;s a bit more expensive because:</p>

<ol>
<li>The turnaround time is WAY faster &ndash; I can email them and get new zines
printed and shipped to the warehouse super quickly. Which means that even if
I do a preorder, people don&rsquo;t actually have to wait that long to get their
zines.</li>
<li>Small businesses in general seem more flexible and easier to work with
&ndash; for example a big fulfillment company I was considering told me that for
them to ship stickers for me, every sticker needed to be individually
barcoded. And they warned me not to ship them stickers shrink wrapped,
because they might accidentally decide that 500 stickers is a single item
and ship all 500 to one person. That kind of ridiculous mistake is a lot
less likely to happen with a small business :)</li>
</ol>

<style>
.button2 {
    background-color: #ff5e00;
    display: inline-block;
    color: white;
    margin-bottom: 6px;
    font-weight: normal;
    text-align: center;
    vertical-align: middle;
    touch-action: manipulation;
    cursor: pointer;
    background-image: none;
    border: 1px solid transparent;
    white-space: nowrap;
    padding: 3px 6px;
    font-size: 16px;
    line-height: 1.7;
    border-radius: 2px;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    align-self: flex-end;
}
</style>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New tool: an nginx playground]]></title>
    <link href="https://jvns.ca/blog/2021/09/24/new-tool--an-nginx-playground/"/>
    <updated>2021-09-24T08:25:33+00:00</updated>
    <id>https://jvns.ca/blog/2021/09/24/new-tool--an-nginx-playground/</id>
    <content type="html"><![CDATA[

<p>Hello! On Wednesday I was talking to a friend about how it would be cool to
have an nginx playground website where you can just paste in an nginx config
and test it out. And then I realized it might actually be pretty easy to build,
so got excited and started coding and I built it. It&rsquo;s at
<a href="https://nginx-playground.wizardzines.com">https://nginx-playground.wizardzines.com</a>.</p>

<p>Here&rsquo;s a screenshot:</p>

<p><img src="https://jvns.ca/images/nginx-playground-screenshot.jpg"></p>

<p>For the rest of the post I&rsquo;m mostly going to talk about how I built the
project, because there were a few decisions that weren&rsquo;t obvious to me.</p>

<h3 id="how-to-use-it">how to use it</h3>

<p>You need to enter both an nginx config and a <code>curl</code> or <code>http</code> command to make a
HTTP request to that nginx instance</p>

<p>And then you click &ldquo;Run&rdquo; in the top right, and it&rsquo;ll output either:</p>

<ol>
<li>the results of the command you executed (if nginx started successfully), or</li>
<li>the nginx error logs (if nginx failed to start)</li>
</ol>

<h3 id="why-a-playground">why a playground?</h3>

<p>I find that playgrounds really help me learn &ndash; it&rsquo;s incredibly useful to be
able to quickly and safely experiment and try out different options without
worrying that Something Terrible is going to happen if you make a mistake.</p>

<p>And nginx in particular is EXTREMELY finicky to configure, so I think it&rsquo;s
extra important to have a playground for nginx to quickly test things out.</p>

<p>Here are 3 playgrounds I&rsquo;ve made in the past:</p>

<ul>
<li><a href="https://sql-playground.wizardzines.com">SQL playground</a>, which uses <a href="https://github.com/sql-js/sql.js/">sql.js</a> to let you run arbitrary SQLite queries on some small example data</li>
<li><a href="https://css-examples.wizardzines.com">CSS examples</a>, which uses <a href="https://codepen.io">codepen</a> to show some examples of surprising CSS behaviour that you can play with</li>
<li><a href="https://dns-lookup.jvns.ca/">DNS lookup</a>, which makes DNS queries to any website you want</li>
</ul>

<p>and a few other great playgrounds that others have made:</p>

<ul>
<li><a href="https://codepen.io">CodePen</a> for CSS/JS/HTML</li>
<li><a href="https://regexr.com/">regexr</a> for regular expressions</li>
<li><a href="https://www.db-fiddle.com/">db-fiddle</a> for SQL</li>
<li>this <a href="https://nginx.viraptor.info/">nginx location match tester</a> that reimplements nginx&rsquo;s location matching in typescript</li>
</ul>

<h3 id="building-it-quickly-by-keeping-it-simple">building it quickly by keeping it simple</h3>

<p>This site has</p>

<ol>
<li>a static frontend (using vue.js and tailwind, my usual frontend stack)</li>
<li>a Go backend with a single API endpoint that just does 1 thing (run an nginx config)</li>
</ol>

<p>This made pretty easy to build the project quickly (I just needed to write 1
backend endpoint and then a frontend that uses that endpoint!). This is also
how the <a href="https://dns-lookup.jvns.ca">dns lookup</a> tool I made works &ndash; I like this
approach a lot and I think I&rsquo;ll do other projects in the same way.</p>

<p>Let&rsquo;s talk about what that backend code does when the frontend makes a request
to it!</p>

<h3 id="what-happens-when-you-make-a-request">what happens when you make a request</h3>

<p>Here&rsquo;s what the Go backend does when you click &lsquo;run&rsquo;: (also here&rsquo;s a <a href="https://gist.github.com/jvns/edf78e7775fea8888685a9a2956bc477">gist with the code right now</a>)</p>

<ol>
<li>write the config to a temp file</li>
<li>create a new network namespace (<code>ip netns add $RANDOM_NAMESPACE_NAME</code>)</li>
<li>start <a href="https://github.com/mccutchen/go-httpbin">go-httpbin</a> on port 777 so that people can use that as a backend in their nginx configs</li>
<li>start nginx</li>
<li>wait 100ms to make sure nginx started, if it failed then return nginx&rsquo;s error logs to the client</li>
<li>run the command that the user requested (and make sure that the command starts with <code>curl</code> or <code>http</code>)</li>
<li>return the command&rsquo;s output</li>
<li>done</li>
</ol>

<h3 id="the-security-problem">the security problem</h3>

<p>The whole point of the tool is to let people run arbitrary nginx
configurations, and it&rsquo;s easy to imagine how that could result in the server
being compromised. But I wanted run the service for free and not spend a lot of
money on hosting. So I wanted to just use 1 shared server for all requests.</p>

<p>This kind of thing often stops me from doing projects like this, but this one
felt a little more tractable to me.</p>

<h3 id="the-security-approach-a-little-bit-of-isolation-a-little-bit-of-yolo">the security approach: a little bit of isolation, a little bit of YOLO</h3>

<p>Here&rsquo;s how I decided to approach the security to start, after talking to a friend about it:</p>

<ol>
<li>Host the frontend on a CDN, separately from the backend (so that if the backend gets compromised nobody can serve malware from the frontend)</li>
<li>Don&rsquo;t use a database, just browser local storage (can&rsquo;t hack the database if there isn&rsquo;t one!)</li>
<li>Put every nginx in its own network namespace, don&rsquo;t let it connect to the internet</li>
<li>Use fly.io&rsquo;s free tier (so it&rsquo;s isolated on its own VM, as far as I know it doesn&rsquo;t have
access to anything sensitive, and I can potentially destroy and redeploy the
VM every hour if I want to)</li>
<li>Ask people to be nice in the FAQ (that&rsquo;s the &ldquo;YOLO&rdquo; part :) )</li>
</ol>

<p>I think that with these constraints, the only bad things that could happen are:</p>

<p>a. Someone gets access to the test nginx configs of other people using the website at the same time
b. Someone replaces the backend API server so that it returns some sort of malicious or offensive output.
c. Someone tries to mine bitcoin on the tiny instance it&rsquo;s running on (1 shared CPU, 256 MB RAM)</p>

<p>I don&rsquo;t think any of those are thaaaat harmful in the grand scheme of things,
though it&rsquo;s possible I&rsquo;m missing something. Someone already showed how to read
the <code>/etc/passwd</code> file which is fun, but there&rsquo;s nothing sensitive in
there.</p>

<p>I might switch to running each nginx in a container later instead of just
running it in a network namespace, but I didn&rsquo;t do it initially because I
thought it might be too slow &ndash; it&rsquo;s already a bit slow.</p>

<p>Speaking about slow, let&rsquo;s talk about performance.</p>

<h3 id="some-notes-on-performance">some notes on performance</h3>

<p>Like I mentioned before, this backend is running on a pretty small instance
(1 shared CPU, 256 MB RAM). Here are some quick notes on that:</p>

<ol>
<li>the frontend runs on a CDN, so the backend only gets used when someone
actually executes an nginx config. That takes a lot of pressure off the tiny backend.</li>
<li>According to the server logs, each request seems to take about 400ms right now. That&rsquo;s
not too bad!</li>
<li>It&rsquo;s running on a server in Toronto right now, so I guess it&rsquo;s be slower
for people far away from Toronto. I could fix that by running more fly
servers in more locations though.</li>
<li>I used a Go clone of <a href="https://httpbin.org">httpbin</a> instead of the original
Python version, since I figured the Go version would be lighter weight</li>
<li>The frontend performance isn&rsquo;t great &ndash; the CSS and JS is all in separate
files. I didn&rsquo;t want to use an <code>npm build</code> step to combine them because I&rsquo;m
pretty bad at Javascript and I&rsquo;m always worried my Javascript build will
break and then I&rsquo;ll be too lazy to fix it and then it&rsquo;ll be impossible for
me to deploy changes.</li>
<li>I added a little rocket ship gif that plays while the backend is running to
make it a little more fun to wait</li>
</ol>

<p>The silliest performance problem I had was that I was originally stopping the
nginx worker processes by sending them a SIGKILL signal. But that killed just
the main process and not the worker processes, so then I was leaking nginx
worker processes, which eventually made the instance run out of memory. Sending
nginx processes a <code>SIGTERM</code> instead made it shut down everything correctly and
fixed that problem.</p>

<h3 id="the-design">the design</h3>

<p>The design basically just copies <a href="https://jsfiddle.net">jsfiddle</a> and <a href="https://codepen.io/pen">codepen</a>.</p>

<p>In particular JSFiddle does a nice simple thing where it calculates the height
of the main area as <code>calc(100vh - 60px)</code> and the header has height <code>60px</code>. I
wouldn&rsquo;t have thought of that on my own but it seems to work really well.</p>

<p>I used <a href="https://codemirror.net/">CodeMirror</a> for syntax highlighting because
that&rsquo;s what jsfiddle and codepen both seem to do, it was super easy to set up,
and it turns out it even has an <code>nginx</code> and a <code>shell</code> mode! It&rsquo;s everything I
could have dreamed of :)</p>

<p>The main hiccup with CodeMirror was that I initially wanted to use a <code>vue-codemirror</code>
integration and there wasn&rsquo;t one for Vue 3, but I decided that it was
unnecessary and just wrote my own tiny integration that updates Vue when
the textbox is updated. (basically just <code>this.nginx_codemirror.on('change', cm =&gt; this.nginx_config = cm.getValue())</code>)</p>

<p>You can see the Javascript code at <a href="https://nginx-playground.wizardzines.com/script.js">script.js</a> but there&rsquo;s
really not a lot of it.</p>

<h3 id="still-to-do-add-more-example-nginx-configs">still to do: add more example nginx configs</h3>

<p>I&rsquo;m still not quite sure what the examples should be, but I think I want to
provide a few more template nginx configs to use as starting points.</p>

<h3 id="this-was-easier-to-build-than-i-thought">this was easier to build than I thought</h3>

<p>This was a lot easier to build than I thought it would be! It makes me want to
build playgrounds for other programs too, though I&rsquo;m not sure which one would
be next. HAProxy seems like an obvious similar choice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching by filling in knowledge gaps]]></title>
    <link href="https://jvns.ca/blog/2021/09/20/teaching-by-filling-in-knowledge-gaps/"/>
    <updated>2021-09-20T09:28:40+00:00</updated>
    <id>https://jvns.ca/blog/2021/09/20/teaching-by-filling-in-knowledge-gaps/</id>
    <content type="html"><![CDATA[

<p>Hello! This post (like <a href="https://jvns.ca/blog/confusing-explanations/">patterns in confusing explanations</a>)
is another one in the &ldquo;julia attempts to articulate her teaching strategy&rdquo;
series.</p>

<p>I&rsquo;ll start out by talking about a &ldquo;backwards&rdquo; approach to learning
that I think a lot of you will recognize (do projects first without fully
understanding what you&rsquo;re doing, fill in missing knowledge after), and then
talk about I try to teach in a way that works better with that mode of
learning.</p>

<h3 id="how-i-ve-learned-programming-backwards">how I&rsquo;ve learned programming: backwards</h3>

<p>There are a lot of &ldquo;basic&rdquo; concepts in programming, like memory management,
networking, operating systems, assembly, etc. You could imagine that you learn
programming by first starting with the basic concepts and then learning
abstractions on top of those concepts.</p>

<p>But, even though I have a very traditional CS background, that&rsquo;s not how it&rsquo;s
usually worked for me. Instead, here&rsquo;s a real example from how I learned about
websites:</p>

<ol>
<li>Set up a website (for example using Apache)</li>
<li>Three years later, realize &ldquo;wait, I have no idea how that worked at all&rdquo;</li>
<li>Learn the basics of HTTP</li>
</ol>

<p>Of course, to really understand how websites work, you do need to understand
the basics of HTTP. But at the same time, you can make lots of great websites
without knowing anything about HTTP except that 404 means &ldquo;not found&rdquo;.</p>

<h3 id="it-s-fun-to-build-a-lot-of-cool-stuff-quickly">it&rsquo;s fun to build a lot of cool stuff quickly</h3>

<p>Obviously I don&rsquo;t actually think it&rsquo;s bad to make websites without knowing
HTTP. It&rsquo;s fun! You can make a website and set up nginx or Apache by copying
some stuff you found on Stack Overflow and didn&rsquo;t fully understand, and then
you have a website on the internet! I find it very fun to start out with a
technology by quickly building a bunch of stuff with it without understanding
exactly how it works (like making this <a href="https://jvns.ca/blog/2020/03/15/writing-shaders-with-signed-distance-functions/">shader</a>).</p>

<h3 id="it-s-fun-to-fill-in-the-information-you-ve-missed">it&rsquo;s fun to fill in the information you&rsquo;ve missed</h3>

<p>Now that you have your website, here&rsquo;s a way you could imagine learning about
HTTP headers:</p>

<ol>
<li>Your website suddenly gets really popular, so you put it behind a CDN to save money</li>
<li>But some of your pages are dynamic and you don&rsquo;t want to cache them</li>
<li>So then you need to learn about browser caching and the <code>Cache-Control</code> HTTP header</li>
<li>And maybe then you learn about headers in general and find some other headers you want to set</li>
</ol>

<p>I think that learning about HTTP headers <strong>after</strong> you already have a website
is way more fun and a lot easier than learning about them <strong>before</strong> you have a
website.</p>

<p>It&rsquo;s much more obvious why you might want to use them, and you&rsquo;re a lot more
likely to remember the information later.</p>

<h3 id="learning-abstractions-first-results-in-knowledge-gaps">learning abstractions first results in knowledge gaps</h3>

<p>Let&rsquo;s say you start learning to make websites by learning Ruby on Rails.
Rails abstracts away a lot of things, like SQL (through its ORM), sockets, and HTTP.</p>

<p>So if you learn Rails, you&rsquo;re not likely to &ldquo;naturally&rdquo; pick up HTTP or
sockets or SQL the same way you would if you were writing a webserver from
scratch.</p>

<h3 id="jobs-today-have-more-abstractions-than-they-used-to">jobs today have more abstractions than they used to</h3>

<p>I asked <a href="https://twitter.com/b0rk/status/1435965181847343108">on twitter</a> what
people feel was easier to learn 15 years ago. One example a lot of people
mentioned was the command line.</p>

<p>I was initially a bit surprised by this, but when I thought about it makes
sense &ndash; if you were a web developer 15 years ago, it&rsquo;s more likely that you&rsquo;d
be asked to set up a Linux server.  That means installing packages, editing
config files, and all kinds of things that would get you fluent at the command
line.  But today a lot of that is abstracted away and not as big a part of
people&rsquo;s jobs. For example if your site is running on Heroku, you barely have
to know that there&rsquo;s a server there at all.</p>

<p>I think this applies to a lot more things than the command line &ndash; networking
is more abstracted away than it used to be too! In a lot of web frameworks,
you just set up some routes and functions to handle those routes, and you&rsquo;re
done!</p>

<p>Abstractions are great, but they&rsquo;re also leaky, and to do great work you
sometimes need to learn about what lives underneath the abstraction.</p>

<h3 id="how-can-we-help-people-understand-what-s-underneath-the-abstractions">how can we help people understand what&rsquo;s underneath the abstractions?</h3>

<p>Here some of you might be tempted to go on a rant about how &ldquo;kids these days&rdquo;
don&rsquo;t understand databases or networking or the command line or whatever thing
has most annoyed you.</p>

<p>But that&rsquo;s boring, we&rsquo;ve had that argument a billion times, and it&rsquo;s
ineffective &ndash; people are going to keep learning abstractions first! It&rsquo;s fun
to learn abstractions first! You can get a lot of work done without
understanding sockets!</p>

<p>But obviously I do think it&rsquo;s important to fill in some of those knowledge
gaps when it&rsquo;s relevant to your job &ndash; that&rsquo;s what this whole blog is about!</p>

<p>So let&rsquo;s talk about how we can help people fill in some of their knowledge gaps
(when they want/need to!), but by actually providing useful information instead
of ranting about what &ldquo;kids these days&rdquo; should know :)</p>

<h3 id="my-steps-for-explaining-something">my steps for explaining something</h3>

<p>I don&rsquo;t actually have explicit steps I use when teaching, but I spent some
time thinking about my approach and here&rsquo;s what I think I do.</p>

<p>Instead of starting &ldquo;at the beginning&rdquo; when explaining a topic, what I usually
do when writing a blog post or comic is:</p>

<ol>
<li>notice a useful idea that I think is on the edge of a lot of people&rsquo;s knowledge</li>
<li>make a bunch of assumptions about what I think that group of people
generally know (usually based on what I know and what I think my
friends/coworkers know)</li>
<li>explain the idea using those assumptions</li>
</ol>

<p>Here are a few more guidelines that I use when teaching &ldquo;backwards&rdquo;.</p>

<ul>
<li>use people&rsquo;s existing knowledge when teaching</li>
<li>explain just one concept at a time</li>
<li>use bugs to peel back abstractions</li>
</ul>

<p>Let&rsquo;s talk more about each of those!</p>

<h3 id="use-people-s-existing-knowledge-when-teaching">use people&rsquo;s existing knowledge when teaching</h3>

<p>One mistake I see people make a lot when they notice someone has a knowledge gap is:</p>

<ol>
<li>notice that someone is missing a fundamental concept X (like knowing how binary works or something)</li>
<li>assume &ldquo;wow, you don&rsquo;t know how binary works, you must not know ANYTHING&rdquo;</li>
<li>give an explanation that assumes the person basically doesn&rsquo;t know how to
program at all</li>
<li>waste a bunch of their time explaining things they already know</li>
</ol>

<p>But this is a huge missed opportunity when explaining a concept to a
professional programmer &ndash; they already know a lot! Any professional
programmer definitely knows a lot of things that are very related to how
binary works.</p>

<h3 id="explain-just-one-concept-at-a-time">explain just one concept at a time</h3>

<p>Because I don&rsquo;t have a lot of information about who I&rsquo;m writing for, I try to:</p>

<ol>
<li>only address one major gap at a time</li>
<li>make it super clear what the gap I&rsquo;m addressing is</li>
</ol>

<p>Then people can easily tell if what I&rsquo;m writing is relevant to them, get the
information they&rsquo;re interested in, and leave.</p>

<p>It might seem like this wouldn&rsquo;t work because everyone has a totally unique set
of knowledge, but actually there are a lot of interesting facts that happen to
be on the edge of a LOT of people&rsquo;s knowledge. So it&rsquo;s all about identifying
patterns (&ldquo;hmm, I didn&rsquo;t realize X for a long time, I bet other people didn&rsquo;t
either&rdquo;).</p>

<h3 id="bugs-are-an-amazing-way-to-learn-what-s-under-an-abstraction">bugs are an amazing way to learn what&rsquo;s under an abstraction</h3>

<p>My favourite way to learn what&rsquo;s underneath an abstraction is bugs! Bugs often
break through abstraction boundaries, like <a href="https://jvns.ca/blog/2015/11/21/why-you-should-understand-a-little-about-tcp/">this performance issue that was caused by a TCP setting</a>.</p>

<p>So they&rsquo;re a great excuse to learn what&rsquo;s underneath, they show you exactly how
the underlying thing (like TCP) is connected to the abstraction (like an HTTP
request). And they inherently help you learn one step at a time, because each
bug will usually teach you about just one or two things.</p>

<h3 id="teaching-by-filling-in-knowledge-gaps-can-be-faster">teaching by filling in knowledge gaps can be faster</h3>

<p>One thing I love about teaching this way is that if the reader is already using a
tool, I can assume that they know a bunch of basic things about it and skip
straight to the interesting parts.</p>

<p>For example, let&rsquo;s look at this bash cheat sheet.</p>

<p><img src="https://wizardzines.com/comics/brackets-cheatsheet/brackets-cheatsheet.png"></p>

<p>This cheat sheet assumes that you know:</p>

<ul>
<li>what bash is</li>
<li>that variables are referenced in bash with <code>$VAR</code></li>
<li>what &ldquo;stdout&rdquo; means</li>
<li>what it means to search and replace in a string</li>
<li>what an array is</li>
</ul>

<p>And I&rsquo;d guess that most people who are writing bash scripts know those things!
But I&rsquo;d also guess that many people who write bash scripts <em>don&rsquo;t</em> know that:</p>

<ul>
<li><code>/usr/bin/[</code> is a program (actually in bash <code>[</code> is a builtin, but it&rsquo;s a builtin that behaves the same way as the program <code>/usr/bin/[</code>)</li>
<li>the curly brace in <code>a{.png.svg}</code> has a totally different meaning from the one in <code>{ command1; command2 }</code></li>
<li>you can search and replace in a string with <code>${}</code></li>
</ul>

<h3 id="example-of-teaching-by-filling-in-knowledge-gaps-bite-size-bash">example of teaching by filling in knowledge gaps: bite size bash</h3>

<p>Last year I wrote a zine called <a href="https://wizardzines.com/zines/bite-size-bash/">bite size bash</a> about
how bash scripting works. (the above cheat sheet is part of it)</p>

<p>You might think that I&rsquo;d explain some basic things like &ldquo;what bash is&rdquo; and the
usual syntax of a bash script. But I didn&rsquo;t. That&rsquo;s because I wrote the zine
for people <em>who were already using bash</em>.</p>

<p>Instead, I went through the most things bash script writers don&rsquo;t understand
about bash (variable assignment, how if statements work, how to quote
things, etc) and explained how those things actually work in bash.</p>

<h3 id="filling-in-knowledge-gaps-at-the-drop-in-tutoring-center">filling in knowledge gaps at the drop-in tutoring center</h3>

<p>To me teaching and writing in this way feels very natural. But people have
told me they find it really difficult to write without explaining everything
from the beginning.</p>

<p>I think my teaching style might be informed in some way by my experience
working as a tutor as a drop-in math tutoring centre. I&rsquo;ve had 5 or so part
time jobs (from age 15-20) doing math or physics tutoring where I basically had
to talk to random students who were confused about something for 20 minutes. I
could probably only teach them only 1 or 2 things in those 20 minutes, and I
might only ever meet the person once. So I had to quickly figure out what they
already knew and what kind of information might help them.</p>

<p>I learned to listen a lot and not jump to conclusions about what the person
didn&rsquo;t know &ndash; often they already actually understood a lot about the math
class they were taking and I just needed to explain one or two small things.</p>

<p>I think of writing on the internet as being kind of similar. I have no idea
who&rsquo;s reading my writing or what they already know, and they&rsquo;re probably going
to only spend 10 minutes or so reading it. So I can only intervene in a really
limited way.</p>

<h3 id="i-think-unpeeling-abstractions-is-what-i-m-trying-to-do-in-my-writing">I think unpeeling abstractions is what I&rsquo;m trying to do in my writing</h3>

<p>I think &ldquo;show people what lives underneath their abstractions&rdquo; is a big part
of what I&rsquo;m trying to do with my writing. This might be why I&rsquo;m so obsessed
with bugs &ndash; they&rsquo;re such a natural way to learn about what&rsquo;s hiding under
your abstractions in a way that&rsquo;s actually relevant to your work.</p>

<p><small>
Thanks to Miles, Jake, Dan, Matthew, and Kamal for reading a draft of this post.
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging by starting a REPL at a breakpoint is fun]]></title>
    <link href="https://jvns.ca/blog/2021/09/16/debugging-in-a-repl-is-fun/"/>
    <updated>2021-09-16T08:48:58+00:00</updated>
    <id>https://jvns.ca/blog/2021/09/16/debugging-in-a-repl-is-fun/</id>
    <content type="html"><![CDATA[

<p>Hello! I was talking to a Python programmer friend yesterday about debugging,
and I mentioned that I really like debugging using a REPL. He said he&rsquo;d never
tried it and that it sounded fun, so I thought I&rsquo;d write a quick post about it.</p>

<p>This debugging method doesn&rsquo;t work in a lot of languages, but it does work in
Python and Ruby and kiiiiiind of in C (via gdb).</p>

<h3 id="what-s-a-repl">what&rsquo;s a REPL?</h3>

<p>REPL stands for &ldquo;read eval print loop&rdquo;. A REPL is a program that:</p>

<ol>
<li>reads some input from you like <code>print(f&quot;2 + 2 = {2+2}&quot;)</code> (<strong>read</strong>)</li>
<li>evaluates the input (<strong>eval</strong>)</li>
<li>print out the result (<strong>print</strong>)</li>
<li>and then goes back to step 1 (<strong>loop</strong>)</li>
</ol>

<p>Here&rsquo;s an example of me using the IPython REPL to run a print statement. (also
it demonstrates f-strings, my favourite Python 3 feature)</p>

<pre><code>$ ipython3
Python 3.9.5 (default, May 24 2021, 12:50:35) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.24.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: print(f&quot;2 + 2 = {2+2}&quot;)
2 + 2 = 4

In [2]: 
</code></pre>

<h3 id="you-can-start-a-repl-at-a-breakpoint">you can start a REPL at a breakpoint</h3>

<p>There are 2 ways to use a REPL when debugging.</p>

<p><strong>Way 1</strong>: Open an empty REPL (like IPython, pry, or a browser Javascript console) to test out something.</p>

<p>This is great but it&rsquo;s not what I&rsquo;m talking about in this post.</p>

<p><strong>Way 2</strong>: Set a breakpoint in your program, and start a REPL at that
breakpoint.</p>

<p>This is the one we&rsquo;re going to be talking about. I like doing this because it gives me both:</p>

<ol>
<li>all the variables in scope at the breakpoint, so I can print them out interactively</li>
<li>easy access to all the functions in my program, so I can call them to try to find issues</li>
</ol>

<h3 id="how-to-get-a-repl-in-python-ipdb-set-trace">how to get a REPL in Python: <code>ipdb.set_trace()</code></h3>

<p>Here&rsquo;s a program called <code>test.py</code> that sets a breakpoint on line 5 using
<code>import ipdb; ipdb.set_trace()</code>.</p>

<pre><code>import requests

def make_request():
    result = requests.get(&quot;https://google.com&quot;)
    import ipdb; ipdb.set_trace()

make_request()
</code></pre>

<p>And here&rsquo;s what it looks like when you run it: you get a REPL where you can
inspect the <code>result</code> variable or do anything else you want.</p>

<pre><code>python3 test.py
--Return--
None
&gt; /home/bork/work/homepage/test.py(5)make_request()
      4     result = requests.get(&quot;https://google.com&quot;)
----&gt; 5     import ipdb; ipdb.set_trace()
      6 

ipdb&gt; result.headers
{'Date': 'Thu, 16 Sep 2021 13:11:19 GMT', 'Expires': '-1', 'Cache-Control': 'private, max-age=0', 'Content-Type': 'text/html; charset=ISO-8859-1', 'P3P': 'CP=&quot;This is not a P3P policy! See g.co/p3phelp for more info.&quot;', 'Content-Encoding': 'gzip', 'Server': 'gws', 'X-XSS-Protection': '0', 'X-Frame-Options': 'SAMEORIGIN', 'Set-Cookie': '1P_JAR=2021-09-16-13; expires=Sat, 16-Oct-2021 13:11:19 GMT; path=/; domain=.google.com; Secure, NID=223=FXhKNT7mgxX7Fjhh6Z6uej9z13xYKdm9ZuAU540WDoIwYMj9AZzWTgjsVX-KJF6GErxfMijl-uudmjrJH1wgH3c1JjudPcmDMJovNuuAiJqukh1dAao_vUiqL8ge8pSIXRx89vAyYy3BDRrpJHbEF33Hbgt2ce4_yCZPtDyokMk; expires=Fri, 18-Mar-2022 13:11:19 GMT; path=/; domain=.google.com; HttpOnly', 'Alt-Svc': 'h3=&quot;:443&quot;; ma=2592000,h3-29=&quot;:443&quot;; ma=2592000,h3-T051=&quot;:443&quot;; ma=2592000,h3-Q050=&quot;:443&quot;; ma=2592000,h3-Q046=&quot;:443&quot;; ma=2592000,h3-Q043=&quot;:443&quot;; ma=2592000,quic=&quot;:443&quot;; ma=2592000; v=&quot;46,43&quot;', 'Transfer-Encoding': 'chunked'}
</code></pre>

<p>You have to install <code>ipdb</code> to make this work, but I think it&rsquo;s worth it &ndash;
<code>import pdb; pdb.set_trace()</code> will work too (and is built into Python) but
<code>ipdb</code> is much nicer. I just learned that you can also use <code>breakpoint()</code> in
Python 3 to get a breakpoint, but that puts you in <code>pdb</code> too which I don&rsquo;t
like.</p>

<h3 id="how-to-get-a-repl-in-ruby-binding-pry">how to get a REPL in Ruby: <code>binding.pry</code></h3>

<p>Here&rsquo;s the same thing in Ruby &ndash; I wrote a <code>test.rb</code> program:</p>

<pre><code>require 'net/http'
require 'pry'

def make_request()
  result = Net::HTTP.get_response('example.com', '/')
  binding.pry
end

make_request()
</code></pre>

<p>and here&rsquo;s what it looks like when I run it:</p>

<pre><code>$ ruby test.rb
From: /home/bork/work/homepage/test.rb:6 Object#make_request:

    4: def make_request()
    5:   result = Net::HTTP.get_response('example.com', '/')
 =&gt; 6:   binding.pry
    7: end

[1] pry(main)&gt; result.code
=&gt; &quot;200&quot;
</code></pre>

<h3 id="you-can-also-do-get-a-repl-in-the-middle-of-an-http-request">you can also do get a REPL in the middle of an HTTP request</h3>

<p>Rails also lets you start a REPL in the middle of a HTTP request and poke
around and see what&rsquo;s happening. I assume you can do this in Flask and Django
too &ndash; I&rsquo;ve only really done this in Sinatra (in Ruby).</p>

<h3 id="gdb-is-sort-of-like-a-repl-for-c">GDB is sort of like a REPL for C</h3>

<p>I was talking to another friend about REPLs, and we agreed that GDB is a little
bit like a REPL for C.</p>

<p>Now, obviously this is sort of not true &ndash; C is a compiled language, and you
can&rsquo;t just type in arbitrary C expressions in GDB and have them work.</p>

<p>But you can do a surprising number of things like:</p>

<ul>
<li>call functions</li>
<li>inspect structs if your program has debugging symbols (<code>p var-&gt;field-&gt;subfield</code>)</li>
</ul>

<p>This stuff only works in gdb because the gdb developers put in a lot of work
doing Very Weird Things to make it easier to get a REPL-like experience. I
wrote a blog post a few years called
<a href="https://jvns.ca/blog/2018/01/04/how-does-gdb-call-functions/">how does gdb call functions?</a> about
how surprising it is that gdb can call functions, and how it does that.</p>

<p>This is the only way I use <code>gdb</code> when looking at C programs &ndash; I never set
watchpoints or do anything fancy, I just set a couple of breakpoints in the
program and then poke around at those points.</p>

<h3 id="where-this-method-works">where this method works</h3>

<p>languages where this works:</p>

<ul>
<li>Python</li>
<li>Ruby</li>
<li>probably PHP, but I don&rsquo;t know</li>
<li>C, sort of, in a weird way (though you might disagree :))</li>
<li>in Javascript: it seems like you can use <code>debugger;</code> to get a REPL through
either <code>node inspect</code> or the browser console. There seem to be some
limitations on what you can do (like node won&rsquo;t let me use <code>await</code> in its
REPL), but I haven&rsquo;t done enough JS to fully understand this.</li>
<li>In Java, apparently IntelliJ lets you <a href="https://www.jetbrains.com/help/idea/examining-suspended-program.html#evaluating-expressions">evaluate arbitrary expressions at a breakpoint</a>, which isn&rsquo;t quite a REPL but is cool</li>
</ul>

<p>languages where this doesn&rsquo;t work:</p>

<ul>
<li>most compiled languages</li>
</ul>

<h3 id="repl-debugging-is-easy-for-me-to-remember-how-to-do">REPL debugging is easy for me to remember how to do</h3>

<p>There are (at least) 4 different ways of debugging:</p>

<ol>
<li>Lots of print statements</li>
<li>a debugger</li>
<li>getting a REPL at a breakpoint</li>
<li>inspect your program with external tools like strace</li>
</ol>

<p>I think part of the reason I like this type of REPL debugging more than using a
more traditional debugger is &ndash; it&rsquo;s so easy to remember how to do it! I can
just set a breakpoint, and then run code to try to figure out what&rsquo;s wrong.</p>

<p>With debuggers, I always forget how to use the debugger (probably partly
because I switch programming languages a lot) and I get confused about what
features it has and how they work, so I never use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quadratic algorithms are slow (and hashmaps are fast)]]></title>
    <link href="https://jvns.ca/blog/2021/09/10/hashmaps-make-things-fast/"/>
    <updated>2021-09-10T12:48:10+00:00</updated>
    <id>https://jvns.ca/blog/2021/09/10/hashmaps-make-things-fast/</id>
    <content type="html"><![CDATA[

<p>Hello! I was talking to a friend yesterday who was studying for a programming
interview and trying to learn some algorithms basics.</p>

<p>The topic of quadratic-time vs linear-time algorithms came up, I thought this
would be fun to write about here because avoiding quadratic-time algorithms
isn&rsquo;t just important in interviews &ndash; it&rsquo;s sometimes good to know about in real
life too! I&rsquo;ll explain what a &ldquo;quadratic-time algorithm is&rdquo; in a minute :)</p>

<p>here are the 3 things we&rsquo;ll talk about:</p>

<ol>
<li>quadratic time functions are WAY WAY WAY slower than linear time functions</li>
<li>sometimes you can make a quadratic algorithm into a linear algorithm by using a hashmap</li>
<li>this is because hashmaps lookups are very fast (instant!)</li>
</ol>

<p>I&rsquo;m going to try to keep the math jargon to a minimum and focus on real code
examples and how fast/slow they are.</p>

<h3 id="our-problem-intersect-two-lists">our problem: intersect two lists</h3>

<p>Let&rsquo;s talk about a simple interview-style problem: getting the intersection of
2 lists of numbers. For example, <code>intersect([1,2,3], [2,4,5])</code> should return
<code>[2]</code>.</p>

<p>This problem is also somewhat realistic &ndash; you could imagine having a real
program where you need to take the intersection of 2 lists of IDs.</p>

<h3 id="the-obvious-solution">the &ldquo;obvious&rdquo; solution:</h3>

<p>Let&rsquo;s write some code to take the intersection of 2 lists. Here&rsquo;s a program that does it, called <code>quadratic.py</code>.</p>

<pre><code>import sys

# the actual code
def intersection(list1, list2):
    result = []
    for x in list1:
        for y in list2:
            if x == y:
                result.append(y)
    return result

# some boilerplate so that we can run it from the command line on lists of
# different sizes
def run(n):
    # make 2 lists of n+1 elements
    list1 = list(range(3, n)) + [2]
    list2 = list(range(n+1, 2*n)) + [2]
    # intersect them and print out the result
    print(list(intersection(list1, list2)))

# Run with the program's first command line argument
run(int(sys.argv[1]))
</code></pre>

<p>The reason it&rsquo;s called <code>quadratic.py</code> is that if <code>list1</code> and <code>list2</code> have size
<code>n</code>, then the inner loop (<code>if x == y</code>) will run <code>n^2</code> times. And in math,
functions like <code>x^2</code> are called &ldquo;quadratic&rdquo; functions.</p>

<h3 id="how-slow-is-quadratic-py">how slow is <code>quadratic.py</code>?</h3>

<p>Let&rsquo;s run this program with a bunch of lists of different lengths. The
intersection of the two lists is always the same: <code>[2]</code>.</p>

<pre><code>$ time python3 quadratic.py 10
[2]

real	0m0.037s
$ time python3 quadratic.py 100
[2]

real	0m0.053s
$ time python3 quadratic.py 1000
[2]

real	0m0.051s
$ time python3 quadratic.py 10000 # 10,000
[2]

real	0m1.661s
</code></pre>

<p>So far none of this is too bad &ndash; it&rsquo;s still taking less than 2 seconds.</p>

<p>Then I ran it on two lists with 100,000 elements, and I had to wait a LONG time. Here&rsquo;s the result:</p>

<pre><code>$ time python3 quadratic.py 100000 # 100,000
[2]

real	2m41.059s
</code></pre>

<p>This is very slow! It&rsquo;s 160 seconds, which is almost exactly 100x longer than
it did to run on 10,000 elements (which was 1.6 seconds). So we can see that
after a certain point, every time we make the list 10x bigger, the program
takes about 100x longer to run.</p>

<p>I didn&rsquo;t try to run this program on 1,000,000 elements, because I knew it would take 100x
longer again &ndash; probably about 3 hours. I don&rsquo;t have time for that!</p>

<p>You can probably see now why quadratic time algorithms can be a problem &ndash; even
this very simple program starts getting very slow pretty quickly.</p>

<h3 id="let-s-write-a-fast-version-linear-py">let&rsquo;s write a fast version: <code>linear.py</code></h3>

<p>Okay, so let&rsquo;s write a fast version of the program. First I&rsquo;ll show you the program, then I&rsquo;ll explain it.</p>

<pre><code>import sys

# the actual algorithm
def intersection(list1, list2):
    set1 = set(list1) # this is a hash set
    result = []
    for y in list2:
        if y in set1:
            result.append(y)
    return result

# some boilerplate so that we can run it from the command line on lists of
# different sizes
def run(n):
    # make 2 lists of n+1 elements
    list1 = range(3, n) + [2]
    list2 = range(n+1, 2*n) + [2]
    # print out the intersection
    print(intersection(list1, list2))

run(int(sys.argv[1]))
</code></pre>

<p>(this isn&rsquo;t the most idiomatic Python, but I wanted to write it without using
too many python-isms so that people who don&rsquo;t know Python could understand it
more easily)</p>

<p>We&rsquo;ve done 2 things differently here than our slow program:</p>

<ol>
<li>convert <code>list1</code> into a set called <code>set1</code></li>
<li>only use one for loop instead of two for loops</li>
</ol>

<h3 id="let-s-see-how-fast-this-linear-py-program-is">let&rsquo;s see how fast this <code>linear.py</code> program is</h3>

<p>Before we talk about <em>why</em> this program is fast, let&rsquo;s first prove that it&rsquo;s
fast by running it on some big lists. Here it is running on lists of size 10 to
10,000,000. (remember that our original program started getting SUPER slow when
run on 100,000 elements)</p>

<pre><code>
$ time python3 linear.py 100
[2]

real	0m0.056s
$ time python3 linear.py 1000
[2]

real	0m0.036s
$ time python3 linear.py 10000 # 10,000
[2]

real	0m0.028s
$ time python3 linear.py 100000 # 100,000 
[2]

real	0m0.048s &lt;-- quadratic.py took 2 minutes in this case! we're doing it in 0.04 seconds now!!! so fast!
$ time python3 linear.py 1000000 # 1,000,000
[2]

real	0m0.178s
$ time python3 linear.py 10000000 # 10,000,000
[2]

real	0m1.560s
</code></pre>

<h3 id="running-linear-py-on-an-extremely-big-list">running <code>linear.py</code> on an extremely big list</h3>

<p>If we try to run it on a very very big list (10 billion / 10,000,000,000
elements), then actually we run into a different problem: it&rsquo;s <em>fast</em> enough
(that list is only 100x bigger than the list that took 4.2 seconds, so we could
probably do it in 420 seconds), but my computer doesn&rsquo;t have enough memory to
store all of the elements of the list and so the program crashes before it gets
there.</p>

<pre><code>$ time python3 linear.py 10000000000
Traceback (most recent call last):
  File &quot;/home/bork/work/homepage/linear.py&quot;, line 18, in &lt;module&gt;
    run(int(sys.argv[1]))
  File &quot;/home/bork/work/homepage/linear.py&quot;, line 13, in run
    list1 = [1] * n + [2]
MemoryError

real	0m0.090s
user	0m0.034s
sys	0m0.018s
</code></pre>

<p>We&rsquo;re not talking about memory usage in this blog post though, so let&rsquo;s ignore that.</p>

<h3 id="okay-why-is-linear-py-fast">okay, why is <code>linear.py</code> fast?</h3>

<p>Now I&rsquo;ll try to explain why <code>linear.py</code> is fast.</p>

<p>Here&rsquo;s the code again:</p>

<pre><code>def intersection(list1, list2):
    set1 = set(list1) # this is a hash set
    result = []
    for y in list2:
        if y in set1:
            result.append(y)
    return result
</code></pre>

<p>Let&rsquo;s say that <code>list1</code> and <code>list2</code> are both lists of about 10,000,000
different elements. That&rsquo;s kind of a lot of elements!</p>

<p>So why is this able to run so fast? HASHMAPS!!!</p>

<h3 id="hashmap-lookups-are-instant-constant-time">hashmap lookups are instant (&ldquo;constant time&rdquo;)</h3>

<p>Let&rsquo;s look at this if statement from our fast program:</p>

<pre><code>if y in set1:
    result.append(y)
</code></pre>

<p>You might think that this check &ndash; <code>if y in set1</code> &ndash; would be slower if the <code>set1</code>
contains 10 million elements than it is if <code>set1</code> contains 1000 elements. But
it&rsquo;s not! It always takes basically the same amount of time (SUPER FAST), no
matter how big <code>set1</code> gets.</p>

<p>This is because <code>set1</code> is a hash set, which is a type of hashmap/hashtable which only has keys and no values.</p>

<p>I&rsquo;m not going to explain <em>why</em> hashmap lookups are instant in this post, but the amazing
Vaidehi Joshi&rsquo;s <a href="https://medium.com/basecs">basecs</a> series has explanations of <a href="https://medium.com/basecs/taking-hash-tables-off-the-shelf-139cbf4752f0">hash tables</a>
and <a href="https://medium.com/basecs/hashing-out-hash-functions-ea5dd8beb4dd">hash functions</a> which talk about it.</p>

<h3 id="accidentally-quadratic-real-life-quadratic-algorithms">accidentally quadratic: real life quadratic algorithms!</h3>

<p>This issue that we saw where quadratic time algorithms are really slow is
actually a problem that shows up in real life &ndash; Nelson Elhage has a great blog
called <a href="https://accidentallyquadratic.tumblr.com/">accidentally quadratic</a> with
stories about performance problems caused by code that accidentally ran in
quadratic time.</p>

<h3 id="quadratic-time-algorithms-can-kind-of-sneak-up-on-you">quadratic time algorithms can kind of sneak up on you</h3>

<p>The weird thing about quadratic time algorithms is that when you run them on a
small number of elements (like 1000), it doesn&rsquo;t seem so bad! It&rsquo;s not that
slow! But then if you throw 1,000,000 elements at it, it can really take hours
to run.</p>

<p>So I think it&rsquo;s worth being broadly aware of them, so you can avoid writing
them by accident. Especially if there&rsquo;s an easy way to write a linear-time
algorithm instead (like using a hashmap).</p>

<h3 id="sometimes-the-slow-algorithm-is-actually-faster">sometimes the &ldquo;slow&rdquo; algorithm is actually faster</h3>

<p>If you&rsquo;re doing serious performance work, for example on an embedded system,
it&rsquo;s also important to realize that a &ldquo;faster&rdquo; algorithm like this example of
using a hashmap will often actually be slower on a small number of elements.
(I&rsquo;ve never run into this myself, but friends have told me that it comes up)</p>

<p>For example, this great blog post <a href="https://schani.wordpress.com/2010/04/30/linear-vs-binary-search/">Linear vs Binary Search</a> has
some benchmarks showing that linear search is faster than binary search for
small arrays (up to 100 elements!)</p>

<h3 id="hashmaps-always-feel-a-little-magical-to-me">hashmaps always feel a little magical to me</h3>

<p>Hashmaps aren&rsquo;t magic of course (you can learn the math behind why hashmap
lookups are instant! it&rsquo;s cool!), but it always <em>feels</em> a little magical to me,
and every time I use hashmaps in a program to speed things up it makes me happy
:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patterns in confusing explanations]]></title>
    <link href="https://jvns.ca/blog/confusing-explanations/"/>
    <updated>2021-08-19T02:13:26+00:00</updated>
    <id>https://jvns.ca/blog/confusing-explanations/</id>
    <content type="html"><![CDATA[

<p>Hello! Recently I&rsquo;ve been thinking about why I explain things the way I do. The
usual way I write is:</p>

<ol>
<li>Try to learn a topic</li>
<li>Read a bunch of explanations that I find confusing</li>
<li>Eventually understand the topic</li>
<li>Write an explanation that makes sense to me, to help others</li>
</ol>

<p>So why do I find all these explanations so confusing? I decided to try and find
out! I came up with a list of 13 patterns that make explanations hard for me to
understand. For each pattern I&rsquo;ll also explain what I like to do instead to
avoid the issue.</p>

<h3 id="these-patterns-are-very-normal">these patterns are very normal</h3>

<p>This list isn&rsquo;t meant to make you feel bad about your writing. I&rsquo;ve probably
done all of these things! I&rsquo;m certainly going to do them again! I even did at
least one of them <strong>while writing this post</strong>!</p>

<p>But knowing that I&rsquo;m likely to accidentally do these things makes it easier for
me to avoid them, and it makes me more receptive to critique when people point
out issues with my writing (&ldquo;Julia, this is assuming a lot of knowledge that I
don&rsquo;t have!&ldquo;).</p>

<p>Being aware of these patterns also helps me when <em>reading</em> a confusing
explanation: &ldquo;oh, I&rsquo;m not confused by this explanation because I&rsquo;m stupid, I&rsquo;m
confused because it&rsquo;s introduced 6 new-to-me concepts and it hasn&rsquo;t explained
what any of them is yet!&ldquo;.</p>

<h3 id="why-this-post-is-framed-in-a-negative-way">why this post is framed in a negative way</h3>

<p>I practically always write in a positive way (&ldquo;X is a good practice!&rdquo;) instead of in
a negative way (&ldquo;Y is a bad practice!&rdquo;). So why am I writing about confusing
patterns instead of writing about positive patterns?</p>

<p>Writing clearly is a LOT of work. A big part of what motivates me to put in the
work to write clearly is my frustration with confusing technical explanations (&ldquo;ugh,
everything I read about Linux containers was SO confusing, I wish someone had
just told me X Y Z&hellip;&ldquo;).</p>

<p>But, if I&rsquo;m not careful, it&rsquo;s easy to reproduce the exact same confusing
patterns in my own writing!  And the problem with positive patterns (like
&ldquo;avoid introducing unnecessary jargon&rdquo;) is that they seem so obvious that I
trick myself into thinking I&rsquo;m following them, even when I&rsquo;m not! So I&rsquo;m
writing these down to try to keep myself honest and hopefully help you avoid
some of these patterns as well.</p>

<h3 id="now-for-the-patterns">now for the patterns!</h3>

<p>Now that I&rsquo;ve explained my motivation, let&rsquo;s explain the patterns! Here&rsquo;s a
quick index of all of them. They&rsquo;re not in any particular order.</p>

<ol>
<li><a href="#pattern-1-making-outdated-assumptions-about-the-audience-s-knowledge">pattern 1: making outdated assumptions about the audience’s knowledge</a></li>
<li><a href="#pattern-2-having-inconsistent-expectations-of-the-reader-s-knowledge">pattern 2: having inconsistent expectations of the reader’s knowledge</a></li>
<li><a href="#pattern-3-strained-analogies">pattern 3: strained analogies</a></li>
<li><a href="#pattern-4-fun-illustrations-on-dry-explanations">pattern 4: fun illustrations on dry explanations</a></li>
<li><a href="#pattern-5-unrealistic-examples">pattern 5: unrealistic examples</a></li>
<li><a href="#pattern-6-jargon-that-doesn-t-mean-anything">pattern 6: jargon that doesn’t mean anything</a></li>
<li><a href="#pattern-7-missing-key-information">pattern 7: missing key information</a></li>
<li><a href="#pattern-8-introducing-too-many-concepts-at-a-time">pattern 8: introducing too many concepts at a time</a></li>
<li><a href="#pattern-9-starting-out-abstract">pattern 9: starting out abstract</a></li>
<li><a href="#pattern-10-unsupported-statements">pattern 10: unsupported statements</a></li>
<li><a href="#pattern-11-no-examples">pattern 11: no examples</a></li>
<li><a href="#pattern-12-explaining-the-wrong-way-to-do-something-without-saying-it-s-wrong">pattern 12: explaining the “wrong” way to do something without saying it’s wrong</a></li>
<li><a href="#pattern-13-what-without-why">pattern 13: “what” without “why”</a></li>
</ol>

<h3 id="pattern-1-making-outdated-assumptions-about-the-audience-s-knowledge">pattern 1: making outdated assumptions about the audience&rsquo;s knowledge</h3>

<p>I see a lot of writing, especially systems writing, that makes outdated
assumptions about what the reader knows. For example, here&rsquo;s a paragraph from
<a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell">this Git book</a> comparing Git&rsquo;s implementation of branching to other version control tools.</p>

<blockquote>
<p>Nearly every VCS has some form of branching support. [&hellip;] In many VCS tools, this is a somewhat expensive
process, often requiring you to create a new copy of your source code
directory, which can take a long time for large projects.</p>
</blockquote>

<p>The outdated assumption here is that you (the reader) know how other version
control systems implement branching, and that comparing other tools&rsquo;
implementation of branching to Git&rsquo;s implementation will help you understand
branching.</p>

<p>But if you&rsquo;re reading this and you&rsquo;ve never used another version control system
and never plan to, this explanation is useless! Who cares about how other
version control systems implement branching? You just want to understand how
Git works!</p>

<p>The reason this explanation is written this way is probably that the first
edition of the book was published in 2009, and this assumption was probably true
in 2009! Many people learning Git shortly after it was released were switching from
Subversion or CVS or something and found comparisons like this helpful.</p>

<p>But in 2021 Git has been the dominant version control system for a long time,
and most people learning Git for the first time won&rsquo;t have <em>any</em> experience
with version control other than Git.</p>

<p>I also sometimes see this &ldquo;outdated assumptions about the audience&rsquo;s knowledge&rdquo;
problem with newer writing. It generally happens when the writer learned the
concept many years ago, but doesn&rsquo;t have a lot of experience explaining it in
the present. So they give the type of explanation that assumes that the reader
knows approximately the same things they and their friends knew in 2005 and
don&rsquo;t realize that most people learning it today have a different set of
knowledge.</p>

<h4 id="instead-test-your-explanations">instead: test your explanations!</h4>

<p>Usually if I learned a concept a long time ago, it means that I&rsquo;ve lost touch
with what it&rsquo;s like to learn it for the first time today. So running an
explanation by a few people who <strong>don&rsquo;t already know the concept</strong> helps to
catch incorrect assumptions I&rsquo;ve made.</p>

<p>(I bolded &ldquo;don&rsquo;t already know the concept&rdquo; because it&rsquo;s tempting to ask someone
who already understands the concept for a review. But they might have the exact
same blind spots as you!)</p>

<h3 id="pattern-2-having-inconsistent-expectations-of-the-reader-s-knowledge">pattern 2: having inconsistent expectations of the reader&rsquo;s knowledge</h3>

<p>For example, a new language tutorial might explain a concept that almost all
programmers would know, like how a for loop is used for iteration, while the
writing that immediately follows implicitly assumes knowledge that many people
don&rsquo;t have, like how the stack works, how malloc works, etc. (thanks to Dan
Luu for this example!)</p>

<p>The problem with this is that are probably zero people who understand malloc but
don&rsquo;t understand how a for loop works! And even though it sounds silly, it&rsquo;s
easy to accidentally write like this if you don&rsquo;t have a clear idea of who
you&rsquo;re writing for.</p>

<h4 id="instead-pick-1-specific-person-and-write-for-them">instead: pick 1 specific person and write for them!</h4>

<p>You can pick a friend, a coworker, or just a past version of yourself. Writing
for just 1 person might feel insufficiently general (&ldquo;what about all the other
people??&ldquo;) but writing that&rsquo;s easy to understand for 1 person (other than you!)
has a good chance of being easy to understand for many other people as well.</p>

<h3 id="pattern-3-strained-analogies">pattern 3: strained analogies</h3>

<p>Sometimes when trying to explain a complex technical concept, an author will
start with a real-world concept that the reader definitely understands and use
a very involved analogy to compare them.</p>

<p>Here&rsquo;s an example I made up:</p>

<blockquote>
<p>Imagine our event system is like the Mississippi River. It travels through
many different ecosystems, and some rain particles don&rsquo;t make it all the way.
Sometimes it flows at different speeds depending on environmental conditions.
The Mississippi River ends in many different tributaries.</p>

<p>Many different kinds of fish live in the event system. Different fish have
different destinations.  Humans decide to live along the river and use it for
different purposes. They construct dams to control the flow.</p>
</blockquote>

<p>This example is a parody, but I always find this type of analogy confusing
because I end up wasting a lot of time trying to analyze exactly how an
event stream is different / the same as the Mississippi river instead of just
learning technical facts about event streams:</p>

<p>I think authors do this because.. it&rsquo;s kind of fun to write these Big Weird
Analogies! Like, is there something in a stream processing system that&rsquo;s like a
dam? Maybe! It&rsquo;s kind of fun to think about! But even though these can be fun
to write, they&rsquo;re not as fun to read – it&rsquo;s a struggle to extract the actual
technical facts you want to know.</p>

<h4 id="instead-keep-analogies-to-a-single-idea">instead: keep analogies to a single idea</h4>

<p>Instead of using &ldquo;big&rdquo; analogies where I explain in depth exactly how an event
processing system is like a river, I prefer to explain the analogy in one or
two sentences to make a specific point and then leave the analogy behind.</p>

<p>Here are 2 ways to do that.</p>

<p><strong>option 1: use &ldquo;implicit&rdquo; metaphors</strong></p>

<p>For example, if we&rsquo;re talking about streams, I might write:</p>

<blockquote class="julia">
Every event in a stream flows from a producer to a consumer.
</blockquote>

<p>Here I&rsquo;m using the word &ldquo;flow&rdquo;, which is definitely a water metaphor. I think
this is great &ndash; it&rsquo;s an efficient way to evoke an idea of directionality and
the idea that there are potentially a large number of events.</p>

<p>I put together a bunch more metaphors in this style in <a href="https://jvns.ca/blog/2020/05/08/metaphors-in-man-pages/">Metaphors in man pages</a>.</p>

<p><strong>option 2: use a very limited analogy</strong></p>

<p>For example, here&rsquo;s a nice explanation from <a href="https://jessitron.com/2021/01/18/when-costs-are-nonlinear-keep-it-small/">When costs are nonlinear, keep it small</a> by Jessica Kerr
that explains batching using an analogy to doing your laundry in a batch.</p>

<blockquote class="julia">
We like batching. Batching is more efficient: doing ten at once is faster than
doing one, one, two, one, one, etc. I don't wash my socks as soon as I take
them off, because lumping them in with the next load is free.
</blockquote>

<p>This analogy is very clear! I think it works well because batching in laundry
works for the same reasons as batching in computing &ndash; batching your laundry
works because there&rsquo;s a low incremental cost to adding another pair of socks to
the load. And it&rsquo;s only used to illustrate one idea &ndash; that batching is a good
choice when there&rsquo;s a low incremental cost for adding a new item.</p>

<h3 id="pattern-4-fun-illustrations-on-dry-explanations">pattern 4: fun illustrations on dry explanations</h3>

<p>Sometimes I see authors put fun illustrations with a very dry explanation to
make the explanation seem more appealing and approachable.</p>

<p>The goal isn&rsquo;t generally to trick the reader into expecting a more friendly
explanation &ndash; I think the logic is usually more like &ldquo;people like fun
illustrations! let&rsquo;s add some!&ldquo;. But no matter what the intent, the problem is
that the reader can end up feeling misled.</p>

<h4 id="instead-make-the-design-reflect-the-style-of-the-explanation">instead: make the design reflect the style of the explanation</h4>

<p>There are lots of great examples of illustrated explanations where the writing
is in a clear and friendly style:</p>

<ul>
<li><a href="https://howdns.works/ep1/">how dns works</a></li>
<li><a href="https://poignant.guide/">why&rsquo;s (poignant) guide to ruby</a></li>
<li><a href="https://shop.bubblesort.io/products/how-do-calculators-even-zine">how do calculators even</a></li>
</ul>

<p>On the other hand, dry explanations are useful too! Nobody expects the
<a href="https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html">Intel instruction-set reference</a>
to be light reading! The writing is dry and technical, and the design is very
utilitarian, which matches the style of the writing.</p>

<h3 id="pattern-5-unrealistic-examples">pattern 5: unrealistic examples</h3>

<p>Here&rsquo;s an unrealistic example of how to use <code>lambda</code> in Python:</p>

<blockquote><pre>
numbers = [1, 2, 3, 4]
squares = map(lambda x: x * x, numbers)
</pre></blockquote>

<p>This example is unrealistic because most people don&rsquo;t use <code>map</code> in Python &ndash; you&rsquo;d use list comprehensions to do this instead.</p>

<p>Here&rsquo;s another unrealistic example: an interface example from <a href="https://docs.oracle.com/javase/tutorial/java/concepts/interface.html">the Oracle docs on interfaces</a>.</p>

<blockquote><pre>
interface Bicycle {
    //  wheel revolutions per minute
    void changeCadence(int newValue);
    void changeGear(int newValue);
    void speedUp(int increment);
    void applyBrakes(int decrement);
}
</pre></blockquote>

<p>This kind of &ldquo;real world example&rdquo; is super common in object oriented
programming explanations but I find it quite confusing &ndash; I&rsquo;ve never
implemented a bicycle or car in my code! It doesn&rsquo;t tell me anything about what
interfaces are useful for!</p>

<h4 id="instead-write-realistic-examples">instead: write realistic examples!</h4>

<p>Here&rsquo;s a more realistic example of Python lambdas, which sorts a list of children by their age. (from my post <a href="https://jvns.ca/blog/2021/07/08/writing-great-examples/">Write good examples by starting with real code</a>)
This is how I use Python lambdas the most in practice.</p>

<blockquote class="julia"><pre>
children = [
    {"name": "ashwin", "age": 12},
    {"name": "radhika", "age": 3},
]
sorted_children = sorted(children, key=lambda x: x['age'])
</pre></blockquote>

<p>Here&rsquo;s a more realistic example of Java interfaces.</p>

<blockquote class="julia"> 
<p>
The <code>Comparable</code> interface (from <a
href="https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/share/classes/java/lang/Comparable.java">the JDK source</a>)
just has one method -- here's its full implementation.
</p>

<pre>
public interface Comparable&lt;T&gt; {
    int compareTo(T o);
}
</pre>

<p>
To implement this interface, you just need to implement the
<code>compareTo</code> method. And if you write a class that implements this
interface (like a <code>Money</code> class for example), then you get all sorts
of useful things for free! You can sort an array of <code>Money</code> objects with
<code>Arrays.sort</code>! You can put them in a <code>SortedSet</code>!
</p>
</blockquote>

<p>In this Java example, of course it&rsquo;s not enough to explain built-in Java
interfaces &ndash; you also need realistic examples of how to create and use your own
interfaces. But this post isn&rsquo;t about Java interfaces so let&rsquo;s move on.</p>

<h3 id="pattern-6-jargon-that-doesn-t-mean-anything">pattern 6: jargon that doesn&rsquo;t mean anything</h3>

<p>Let&rsquo;s talk about this sentence from this <a href="https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work">chapter on commit signing</a>:</p>

<blockquote>
<p>Git is cryptographically secure, but it&rsquo;s not foolproof.</p>
</blockquote>

<p>&ldquo;Cryptographically secure&rdquo; is unclear here because it <em>sounds</em>
like it should have a specific technical meaning, but it&rsquo;s not explained
anywhere what&rsquo;s actualy meant. Is it saying that Git uses SHA-1 to hash
commits and it&rsquo;s difficult to generate SHA-1 hash collisions? I don&rsquo;t know!</p>

<p>Using jargon in a meaningless way like this is confusing because it can trick
the reader into thinking something specific is being said, when the information
they need is not actually there. (the chapter doesn&rsquo;t explain anywhere what&rsquo;s
meant by &ldquo;cryptographically secure&rdquo; in this context)</p>

<h4 id="instead-avoid-jargon-where-it-s-not-needed">instead: Avoid jargon where it&rsquo;s not needed</h4>

<p>A lot of the time I find I can communicate what I need to without using any
jargon at all!  For example, I&rsquo;d explain why commit signing is important like
this:</p>

<blockquote class="julia">

When making a Git commit, you can set any name and email you want! For example, I can make a commit right now saying I'm Linus Torvalds like this:

<pre>
git commit -m"Very Serious Kernel Update" \
 --author='Linus Torvalds &lt;torvalds@linux-foundation.org&gt;'
 </pre>

</blockquote>

<h3 id="pattern-7-missing-key-information">pattern 7: missing key information</h3>

<p>Sometimes explanations of a concept are missing the most important idea to
understand the concept. For example, take this explanation from <a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects">this chapter
on the Git object model</a> (which by the way has a nice concrete example of how to explore Git&rsquo;s object model):</p>

<blockquote>
<p>Git is a <strong>content-addressable filesystem</strong>. Great. What does that mean? It means
that at the core of Git is a simple key-value data store. What this means is
that you can insert any kind of content into a Git repository, for which Git
will hand you back a unique key you can use later to retrieve that content.</p>
</blockquote>

<p>This paragraph is missing what to me is the main idea of content-addressable
storage &ndash; that the key for a piece of content is a deterministic function of
the content, usually a hash (though the page does later say that Git uses a
SHA-1 hash). It&rsquo;s important that the key is a function of the content and not
just any random unique key because the idea is that the content is addressed by
<em>itself</em> &ndash; if the content changes, then its key also has to change.</p>

<p>This pattern is hard to recognize as a reader because &ndash; how are you supposed
to recognize that there&rsquo;s a key idea missing when you don&rsquo;t know what the key
ideas <em>are</em>? So this is a case where a reviewer who understands the subject
well can be really helpful.</p>

<h3 id="pattern-8-introducing-too-many-concepts-at-a-time">pattern 8: introducing too many concepts at a time</h3>

<p>Here&rsquo;s an explanation of linkers from <a href="https://riptutorial.com/c/example/4360/the-linker">this page</a> that I find confusing:</p>

<blockquote>
<p>During the link process, the linker will pick up all the object modules
specified on the command line, add some system-specific startup code in front
and try to resolve all external references in the object module with external
definitions in other object files (object files can be specified directly on
the command line or may implicitly be added through libraries). It will then
assign load addresses for the object files, that is, it specifies where the
code and data will end up in the address space of the finished program. Once
it&rsquo;s got the load addresses, it can replace all the symbolic addresses in the
object code with &ldquo;real&rdquo;, numerical addresses in the target&rsquo;s address space. The
program is ready to be executed now.</p>
</blockquote>

<p>Here are the concepts in this paragraph:</p>

<ul>
<li>object modules (<code>.o</code> files)</li>
<li>external references</li>
<li>symbolic addresses</li>
<li>load addresses</li>
<li>system-specific startup code</li>
</ul>

<p>It&rsquo;s too much!</p>

<h4 id="instead-give-each-concept-some-space-to-breathe">instead: give each concept some space to breathe</h4>

<p>For example, I might explain &ldquo;external references&rdquo; like this:</p>

<blockquote class="julia">

<p>
if you run <code>objdump -d myfile.o</code> on an object file you can see
that the <code>call</code> function calls are missing a target address, so that's why the
linker needs to fill that in. 
</p>

<pre>
  33:   e8 00 00 00 00          call   38 <remove_from_list+0x38>
           ^^^^^^^^^^^
             this address is all 0s -- it needs to be filled in by the linker!
             with the actual function that's going to be called!
  38:   84 c0                   test   %al,%al
  3a:   74 3b                   je     77 <remove_from_list+0x77>
  3c:   48 83 7d f8 00          cmpq   $0x0,-0x8(%rbp)
  </pre>
  </blockquote>

<p>There&rsquo;s still a lot of missing information here (how does the linker know what
address to fill in?), but it&rsquo;s a clear starting point and gives you questions
to ask.</p>

<h3 id="pattern-9-starting-out-abstract">pattern 9: starting out abstract</h3>

<p>Imagine I try to explain to you what a Unix signal using the <a href="https://en.wikipedia.org/wiki/Signal_(IPC)">definition from Wikipedia</a>.</p>

<blockquote>
<p>Signals are a limited form of inter-process communication (IPC), typically
used in Unix, Unix-like, and other POSIX-compliant operating systems. A signal
is an asynchronous notification sent to a process or to a specific thread
within the same process to notify it of an event. Signals originated in 1970s
Bell Labs Unix and were later specified in the POSIX standard.</p>
</blockquote>

<p>By itself, this probably isn&rsquo;t going to help you understand signals if you&rsquo;ve
never heard of them before! It&rsquo;s very abstract and jargon-heavy (&ldquo;asynchonous
notification&rdquo;, &ldquo;inter-process communication&rdquo;) and doesn&rsquo;t have any information
about what Unix signals are used for in practice.</p>

<p>Of course, the Wikipedia explanation isn&rsquo;t &ldquo;bad&rdquo; exactly &ndash; it&rsquo;s probably
written like that because teaching people about signals for the first time isn&rsquo;t really the
goal of the Wikipedia article on signals.</p>

<h4 id="instead-start-out-concrete">instead: start out concrete</h4>

<p>For example, I wrote this page explaining signals a few years ago.</p>

<p><a href="https://wizardzines.com/comics/signals/"><img src="https://wizardzines.com/comics/signals/signals.png"></a></p>

<p>I start out by relating signals to the reader&rsquo;s experience (&ldquo;have you used
<code>kill</code>? you&rsquo;ve used signals!&ldquo;) before explaining how they work.</p>

<h3 id="pattern-10-unsupported-statements">pattern 10: unsupported statements</h3>

<p>Here&rsquo;s an explanation of C header files, from <a href="https://riptutorial.com/c/topic/6257/create-and-include-header-files">this page</a>.</p>

<blockquote>
<p>In modern C, <strong>header files are crucial tools</strong> that must be designed and used
correctly. They allow the compiler to cross-check independently compiled parts
of a program.</p>

<p>Headers declare types, functions, macros etc that are needed by the consumers
of a set of facilities. All the code that uses any of those facilities includes
the header. All the code that defines those facilities includes the header.
This allows the compiler to check that the uses and definitions match.</p>
</blockquote>

<p>This says &ldquo;In modern C, header files are crucial tools&hellip;&rdquo; (which is true), but
it doesn&rsquo;t explain <strong>why</strong> header files are crucial. This of course wouldn&rsquo;t be
a problem if the audience already understood why header files in C are
important (it&rsquo;s a very fundamental concept!). But the whole point here is to explain
header files, so it needs to be explained.</p>

<h4 id="instead-prove-that-your-statements-are-true">instead: Prove that your statements are true!</h4>

<p>For example, I might write:</p>

<blockquote class="julia">

<p>
Almost every C program includes header files. For example, if you've ever
written <code>#include &lt;stdio.h&gt;</code> at the beginning of a C program, <code>stdio.h</code> is a
header file. <code>#include</code> basically tells the C preprocessor to paste
the contents of <code>stdio.h</code> at the beginning of the program.
</p>

<p>
One reason header files are important is that <strong>they define types and
constants you need in your programs</strong>.  For example, this code by itself
will fail to compile with the error <code>error: unknown type name
'FILE'</code>, because the <code>FILE</code> type is undefined.
</p>

<pre>
int main() {
    FILE *fp;
    fp  = fopen("data.txt", "w");
}
</pre>
<p>
<code>FILE</code> is defined in <code>stdio.h</code> and if you add a
<code>#include &lt;stdio.h&gt;</code>, at the top, then the program will
compile.
</p>

</blockquote>

<p>This example program lets the reader actually run that program themselves and
verify that it doesn&rsquo;t compile if they want &ndash; they don&rsquo;t have to take my word
for it!</p>

<h3 id="pattern-11-no-examples">pattern 11: no examples</h3>

<p>Another problem with the previous explanation of header files is &ndash; there
aren&rsquo;t any examples! Leaving out examples makes it harder for the reader to
relate the new terminology to their own experiences.</p>

<p>Almost anyone who&rsquo;s ever written a C program has definitely used header files,
so a simple example (like mentioning <code>stdio.h</code>) can really help.</p>

<p>In that header files example, I replaced</p>

<blockquote>
<p>In modern C, header files are crucial tools&hellip;</p>
</blockquote>

<p>with an explanation that includes a simple example:</p>

<blockquote class="julia">
Almost every C program includes header files -- if you've ever seen something
like <code>#include <stdio.h></code> at the beginning of a C program, <code>stdio.h</code> is a
header file.
</blockquote>

<h3 id="pattern-12-explaining-the-wrong-way-to-do-something-without-saying-it-s-wrong">pattern 12: explaining the &ldquo;wrong&rdquo; way to do something without saying it&rsquo;s wrong</h3>

<p>Here&rsquo;s a pattern I see sometimes in tutorials (though unfortunately I don&rsquo;t have an example):</p>

<ol>
<li>Explain the &ldquo;wrong&rdquo; way of doing something without saying up front that it&rsquo;s wrong</li>
<li>Later on, show the consequences of doing the &ldquo;wrong&rdquo; thing</li>
<li>Explain the &ldquo;right&rdquo; way</li>
</ol>

<p>I think the intention of this is to imitate the real-life experience of making
mistakes. Usually when you make a mistake, you don&rsquo;t know that it&rsquo;s wrong at
the time!</p>

<p>But often the reader will end up feeling misled or confused about which way is
actually &ldquo;correct&rdquo;. And it&rsquo;s possible that they would never even have made that
particular mistake on their own!</p>

<h4 id="instead-here-are-four-options-for-presenting-mistakes">instead: here are four options for presenting mistakes</h4>

<p>Here are a few ways of accomplishing the same thing without misleading the
reader:</p>

<ol>
<li>Frame the &ldquo;wrong&rdquo; thing as an experiment (&ldquo;what if we try doing it X way?&rdquo;)</li>
<li>State an incorrect belief the reader might have: (&ldquo;You might think that the
command line tool would need to run as root (because it&rsquo;s talking to the
kernel, but&hellip;&ldquo;)</li>
<li>Explain a common mistake (for example &ldquo;Avoid Striding and Slicing in a Single Expression&rdquo; in <a href="https://effectivepython.com/">Effective Python</a>)<br /></li>
<li>Tell a story about a mistake you made and why it caused problems (here&rsquo;s one of mine: <a href="https://jvns.ca/blog/2015/11/27/why-rubys-timeout-is-dangerous-and-thread-dot-raise-is-terrifying/">Why Ruby&rsquo;s Timeout is dangerous (and Thread.raise is terrifying)</a>)</li>
</ol>

<p>Talking about mistakes is very important, just say up front that the thing is a
mistake!</p>

<h3 id="pattern-13-what-without-why">pattern 13: &ldquo;what&rdquo; without &ldquo;why&rdquo;</h3>

<p>I very often see people introduce new technologies with <strong>a list of features</strong>
instead of <strong>explaining why people choose the technology</strong>.</p>

<p>For example, the <a href="https://kubernetes.io/">kubernetes homepage</a> lists a bunch of
Kubernetes&rsquo; features: automated rollouts and rollbacks, service discovery and
load balancing, storage orchestration, secret and configuration management,
automatic bin packing, etc. This kind of feature list is pretty common on a
project homepage, but by itself it doesn&rsquo;t help someone understand whether
Kubernetes is right for them.</p>

<p>I think one reason writers leave out the &ldquo;why&rdquo; is that it&rsquo;s hard to write
a simple universal answer to &ldquo;why do people use Kubernetes?&rdquo;. There are a lot of reasons!
And if you get the &ldquo;why&rdquo; wrong, it&rsquo;s very noticeable and it feels embarrassing.
So it feels safer to just list some features and move on.</p>

<p>But as a reader, I find that <strong>a weak &ldquo;why&rdquo; is much better than no &ldquo;why&rdquo;</strong>. I&rsquo;d
rather read &ldquo;well, we use Kubernetes because it provides a decent basic
deployment system and GKE means we don&rsquo;t have to think about servers&rdquo; than an
attempt at covering every single company&rsquo;s business reasons for using Kubernetes.</p>

<h4 id="instead-talk-about-your-reasons-for-using-the-technology">instead: talk about your reasons for using the technology</h4>

<p>Of course, if you have a clear universal explanation of the problems a
technology solves, that&rsquo;s great. But I think a lot of the time authors
(including me!!) just don&rsquo;t have a great grasp of why other people are choosing
a given technology. That&rsquo;s okay!</p>

<p>If you don&rsquo;t feel you can give a universal &ldquo;why&rdquo;, I think it&rsquo;s better to just
be open about that and give an example from your personal experience.</p>

<p>For example, I might say about Kubernetes:</p>

<blockquote class="julia">
The only problem I've solved with Kubernetes was: we had a distributed cron job
system (Chronos) that wasn't working reliably (cron jobs would sometimes just not run), and we <a href="https://stripe.com/blog/operating-kubernetes">replaced the system with
Kubernetes</a>. Kubernetes' distributed cron was a lot more reliable.
</blockquote>

<p>This isn&rsquo;t a good explanation of why people in general use Kubernetes! But
I find reading many specific personal stories like this WAY more helpful than
an attempt at cramming &ldquo;here&rsquo;s what&rsquo;s Kubernetes is for&rdquo; into a few paragraphs.</p>

<p>I want to be clear here that even just explaining your own personal experience
isn&rsquo;t that easy. Technology projects can be messy, and sometimes their goals
change in the middle. I started out
trying to give an example of why I&rsquo;ve used <a href="https://www.envoyproxy.io/">Envoy</a>
and I realized I would need to think about it for several hours and have a few
conversations with old coworkers to explain it coherently so I decided to use a
different example.</p>

<h3 id="that-s-all-for-now">that&rsquo;s all for now!</h3>

<p>Originally I thought it would be simple to put together these patterns (&ldquo;there
are so many confusing explanations!&ldquo;) but it was surprisingly hard to
articulate exactly what was confusing to me about each explanation in a
convincing way.</p>

<p>It&rsquo;s definitely incomplete, but I&rsquo;ve already spent two weeks and 3000 words on
it so I&rsquo;ll stop here and I&rsquo;d love to hear what I&rsquo;ve missed :)</p>

<p><small> thanks to Laura, Dan, Kamal, Alyssa, Lindsey, Paul, Ivan, Edith, Hazem,
Anton, and John for helping improve this post </small></p>

<!-- css -->

<style>
.julia {
    border-left: 6px solid green;
}

article blockquote {
    border-left: 6px solid #e22;
}

blockquote code {
    display: inline-block;
    white-space: no-wrap;
    background-color: #f7f7f7;
    font-size: 0.8em;
    line-height: 1.5em;
    border: 1px solid #cccccc;
    padding: 0 2px;
    margin: -1px 0px;
}
</style>

<h3 id="translations">translations</h3>

<p>here is a translation:</p>

<ul>
<li><a href="https://velog.io/@roeniss/%EC%9E%98-%EC%84%A4%EB%AA%85%ED%95%98%EA%B3%A0-%EA%B3%84%EC%8B%A0%EA%B0%80%EC%9A%94-%EB%82%98%EC%81%9C-%EC%84%A4%EB%AA%85%EC%9D%98-%ED%8C%A8%ED%84%B4%EB%93%A4">Korean</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write good examples by starting with real code]]></title>
    <link href="https://jvns.ca/blog/2021/07/08/writing-great-examples/"/>
    <updated>2021-07-08T11:00:46+00:00</updated>
    <id>https://jvns.ca/blog/2021/07/08/writing-great-examples/</id>
    <content type="html"><![CDATA[

<p>When I write about programming, I spend a lot of time trying to come up with
good examples. I haven&rsquo;t seen a lot written about how to make examples, so
here&rsquo;s a little bit about my approach to writing examples!</p>

<p>The basic idea here is to start with real code that you wrote and then remove
irrelevant details to make it into a self-contained example instead of coming
up with examples out of thin air.</p>

<p>I&rsquo;ll talk about two kinds of examples: realistic examples and suprising
examples.</p>

<h3 id="good-examples-are-realistic">good examples are realistic</h3>

<p>To see why examples should be realistic, let&rsquo;s first talk about an unrealistic
example! Let&rsquo;s say we&rsquo;re trying to explain Python lambdas (which is just the
first concept I thought of). You could give this example, of using <code>map</code> and a
lambda to double a set of numbers.</p>

<pre><code>numbers = [1, 2, 3, 4]
squares = map(lambda x: x * x, numbers)
</code></pre>

<p>I think this example is unrealistic for a couple of reasons:</p>

<ul>
<li>squaring a set of numbers isn&rsquo;t something you&rsquo;re super likely to do in a real
program unless it&rsquo;s for Project Euler or something (there are LOTS of
operations on lists that are a lot more likely)</li>
<li>This usage of <code>map</code> is not idiomatic Python, even if you were doing this I
would write <code>[x*x for x in numbers]</code> instead</li>
</ul>

<p>A more realistic example of Python lambdas is using them with <code>sort</code>, like this;</p>

<pre><code>children = [{&quot;name&quot;: &quot;ashwin&quot;, &quot;age&quot;: 12}, {&quot;name&quot;: &quot;radhika&quot;, &quot;age&quot;: 3}]
sorted_children = sorted(children, key=lambda x: x['age'])
</code></pre>

<p>But this example is still pretty contrived (why exactly do we need to sort
these children by age?). So how do we actually make realistic examples?</p>

<h3 id="how-to-make-your-examples-realistic-look-at-actual-code-you-wrote">how to make your examples realistic: look at actual code you wrote</h3>

<p>I think the easiest way to make realistic examples is, instead of pulling an
example out of thin air (like I did with that <code>children</code> example), instead just
start by looking at real code!</p>

<p>For example, if I grep a bunch of Python code I wrote for <code>sort.+key</code>, I find
LOTS of real examples of me sorting a list by some criterion, like:</p>

<ul>
<li><code>tasks.sort(key=lambda task: task['completed_time'])</code></li>
<li><code>emails = reversed(sorted(emails, key=lambda x:x['receivedAt']))</code></li>
<li><code>sorted_keysizes = sorted(scores.keys(), key=scores.get)</code></li>
<li><code>shows = sorted(dates[date], key=lambda x: x['time']['performanceTime'])</code></li>
</ul>

<p>It&rsquo;s pretty easy to see a pattern here &ndash; a lot of these are sorting by time!
So now we can make a simple realistic example of sorting some objects (emails,
events, etc) by time, like sorting some calendar events by their unix timestamp:</p>

<pre><code>events = [
    { 'date': 1625837042, 'name': 'birthday party'},
    { 'date': 1620581136, 'name': 'dinner with Yifei'},
    { 'date': 1589045136, 'name': 'dentist appointment'},
]
sorted_events = sorted(events, key=lambda x: x['date'])
</code></pre>

<p>I think this is more realistic than the &ldquo;sort children by age&rdquo; example, and
it&rsquo;s just as simple!</p>

<h3 id="realistic-examples-help-sell-the-concept-you-re-trying-to-explain">realistic examples help &ldquo;sell&rdquo; the concept you&rsquo;re trying to explain</h3>

<p>When I&rsquo;m trying to explain an idea (like Python lambdas), I&rsquo;m usually also trying
to convince the reader that it&rsquo;s worth learning! Python lambdas are super
useful! And to convince someone that lambdas are useful, it really helps to
show someone how lambdas could help them do a task that they could actually
imagine themselves doing, and ideally a task that they&rsquo;ve done before.</p>

<h3 id="distilling-down-examples-from-real-code-can-take-a-long-time">distilling down examples from real code can take a long time</h3>

<p>The example I just gave of explaining how to use <code>sort</code> with <code>lambda</code> is
pretty simple and it didn&rsquo;t take me a long time to come up with, but turning
real code into a standalone example can take a really long time!</p>

<p>For example, I was thinking of including an example of some weird CSS behaviour
in this post to illustrate how it&rsquo;s fun to create examples with weird or
surprising behaviour. I spent 2 hours taking a real problem I had this week,
making sure I understood what was actually happening with the CSS, and making
it into a minimal example.</p>

<p>In the end it &ldquo;just&rdquo; took <a href="https://codepen.io/wizardzines/pen/0eda7725a46c919dcfdd3fa80aff3d41">5 lines of HTML and a tiny bit of CSS</a> to
demonstrate the problem and it doesn&rsquo;t really look like it took hours to write.
But originally it was hundreds of lines of JS/CSS/JavaScript, and it takes time
to untangle all that and come up with something small that gets at the heart of
the issue!</p>

<p>But I think it&rsquo;s worth it to take the time to make examples really clear and
minimal &ndash; if hundreds of people are reading your example, you&rsquo;re saving them
all so much time!</p>

<h3 id="that-s-all-for-now">that&rsquo;s all for now!</h3>

<p>I think there&rsquo;s a lot more to say about examples &ndash; for instance I think there
are a few different types of useful examples, like:</p>

<ul>
<li>examples that are surprising to the reader, which are more about changing
someone&rsquo;s mental model than providing code to use directly</li>
<li>examples that are easy to copy and paste to use as a starting point</li>
</ul>

<p>but maybe I&rsquo;ll write about that another day. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reasons why bugs might feel "impossible"]]></title>
    <link href="https://jvns.ca/blog/2021/06/08/reasons-why-bugs-might-feel-impossible/"/>
    <updated>2021-06-08T09:28:08+00:00</updated>
    <id>https://jvns.ca/blog/2021/06/08/reasons-why-bugs-might-feel-impossible/</id>
    <content type="html"><![CDATA[

<p>Hello! I&rsquo;m <a href="https://jvns.ca/blog/2019/06/23/a-few-debugging-resources/">very slowly</a>
working on writing a zine about debugging, so I <a href="https://twitter.com/b0rk/status/1400169409277218821">asked on Twitter the other day</a>:</p>

<blockquote>
<p>If you&rsquo;ve run into a bug where it felt &ldquo;impossible&rdquo; to understand what was happening &ndash; what made it feel that way?</p>
</blockquote>

<p>Of course, bugs always happen for logical reasons, but I&rsquo;ve definitely run into
bugs that felt like they might be impossible for me to understand (until I
figured them out!)</p>

<p>I got about 400 responses, which I&rsquo;ll try to summarize here. I&rsquo;m not going to
talk about how to deal with these various kinds of &ldquo;impossible&rdquo; bugs in this
post, I&rsquo;ll just try to classify them.</p>

<p>Here are the categories I came up with for ways a bug might feel impossible
to understand. Each one of them has a bunch of sub variants which are bolded below.</p>

<ol>
<li>it&rsquo;s hard to reproduce</li>
<li>you don&rsquo;t understand the overall system well</li>
<li>it&rsquo;s hard to get data about the bug</li>
<li>one of your assumptions is wrong</li>
<li>the bug is really complex</li>
</ol>

<h3 id="1-the-bug-is-hard-to-reproduce-locally">1. the bug is hard to reproduce locally</h3>

<p>I thought <a href="https://twitter.com/BFormations/status/1400180379051597824">this description</a> was really great:</p>

<blockquote>
<p>The ones that make me contemplate a career change are usually bugs that are
only happen to a few users, can’t be reproduced consistently by users or at all
in-house, and have slightly varying descriptions in each bug report (kinda like
Bigfoot sightings).</p>
</blockquote>

<p>Here are some specific ways a bug can be hard to reproduce:</p>

<p><strong>the bug is nondeterministic</strong></p>

<p>You run your program with the exact same inputs 1000 times, and it only fails
once. This happens a lot with race conditions in multithreaded programs.</p>

<p><strong>the bug only happens in production</strong></p>

<p>Lots of bugs are hard to reproduce in your dev environment, either because it&rsquo;s
hard to figure out exactly which inputs trigger the bug, or because they only
happen under certain conditions (like a lot of traffic) which are hard to
recreate.</p>

<p><strong>you don&rsquo;t have access to the machine where the bug is happening</strong></p>

<p>Three examples of this:</p>

<ul>
<li>you&rsquo;re shipping software (a binary or a website) that runs on your customer&rsquo;s
computer, they have a problem, and you don&rsquo;t have direct access to their
computer to see what&rsquo;s going on.</li>
<li>the problem involves a managed cloud service that you don&rsquo;t have a lot of
access to.</li>
<li>the problem only happens on an input of data that you don&rsquo;t have access to (perhaps because the data is classified/private)</li>
</ul>

<p><strong>you don&rsquo;t have access to the data you need to reproduce the bug</strong></p>

<p>One person mentioned a case where the bug was easy to reproduce, but the data
they needed to reproduce it was confidential, so they weren&rsquo;t allowed to have
access to it.</p>

<p><strong>it&rsquo;s very slow to reproduce</strong></p>

<p>There are bugs where you know exactly <em>how</em> to reproduce it, but it takes a long
time (like 20 minutes or way longer) to reproduce the bug. This is hard because
it&rsquo;s hard to maintain your focus: maybe you can only try 1 experiment per day!</p>

<h3 id="2-you-don-t-understand-the-overall-system-well">2. you don&rsquo;t understand the overall system well</h3>

<p>Even if you can reproduce the bug, if you don&rsquo;t understand how the part of
the program with the bug works, you can end up VERY stuck.</p>

<p>Some examples of this that came up:</p>

<p><strong>unknown unknowns: the bug involves a system or concept you&rsquo;ve didn&rsquo;t know about</strong></p>

<p>Sometimes bugs are caused by a part of the system that you didn&rsquo;t even know
existed. For example, when I was debugging <a href="https://jvns.ca/blog/2015/11/21/why-you-should-understand-a-little-about-tcp/">this TCP issue</a>,
I&rsquo;d never heard of Nagle&rsquo;s algorithm or delayed ACKs. So it was pretty
difficult to recognize that they were causing the problem!</p>

<p>The only reason I was able to diagnose that bug was that someone at work had
coincidentally posted a blog post about it and I remembered the symptoms were
similar.</p>

<p>Here&rsquo;s another example of this from the Twitter replies:</p>

<blockquote>
<p>I was sending strings containing null bytes (long story) between two systems
that support them, but in some cases, theres a step along the way that doesn&rsquo;t
support them</p>
</blockquote>

<p>Another example of &ldquo;the bug is in a surprising place&rdquo; is <a href="http://www.dkriesel.com/en/blog/2013/0802_xerox-workcentres_are_switching_written_numbers_when_scanning">this case of a bug in a scanner</a>.</p>

<p>The next few sections are more specific ways confusion about the program works
can make a bug difficult to solve.</p>

<p><strong>the bug is in an external library you don&rsquo;t understand</strong></p>

<p>Sometimes the bug is in a library or an open source program you&rsquo;re
completely unfamiliar with, but you have to fix it anyway. This makes debugging hrad because:</p>

<ol>
<li>you need to learn how the library works</li>
<li>it&rsquo;s not always easy to modify the library and get your program to use your
modified version of the library, so it&rsquo;s hard to experiment and make changes
or add extra instrumentation to the library</li>
</ol>

<p><strong>you don&rsquo;t understand the error message at all</strong></p>

<p>Some error messages initially seem totally incomprehensible. A couple of examples of this:</p>

<ul>
<li>&ldquo;values of β may give rise to dom!&rdquo;, from <a href="https://www.youtube.com/watch?v=FyLnF9U18rY">this talk by Mark Allen on that error message</a> or</li>
<li>&ldquo;Size must be between and 16793600(16MB) First element: oints&rdquo; from the talk <a href="https://youtu.be/QxtwVsHxvC4?t=471">The tales of the cursed operating systems textbook</a> by Kiran Bhattaram</li>
<li>Some compiler error messages can be very confusing if you don&rsquo;t know what they mean</li>
</ul>

<p>These are tricky because it&rsquo;s not clear where to start &ndash; what is β? What is this element oints doing here?</p>

<p>Another variant of this is debugging output that&rsquo;s formatted in a confusing way.</p>

<p><strong>you don&rsquo;t know what keywords to search to get more information</strong></p>

<p>One case that a lot of people mentioned is: you search for a keyword that you
think is related to your bug, you get 10 million results, and none of them are helpful.</p>

<p><strong>the bug is in a proprietary system</strong></p>

<p>Figuring out an unfamiliar system is already hard, and it&rsquo;s even worse when you
can&rsquo;t even read the source code!</p>

<p><strong>the system is poorly documented</strong></p>

<p>A few variants of this:</p>

<ul>
<li>there&rsquo;s no documentation, or very sparse documentation</li>
<li>the only information about the system is from someone you can&rsquo;t contact &ndash;
person who <em>does</em> understand it has left the company, or you don&rsquo;t know who
they are, or they work at a company you can&rsquo;t find any contact information
for</li>
<li>the information you need is in a 2000 page PDF and you don&rsquo;t know where to
start looking</li>
</ul>

<h3 id="3-it-s-hard-to-get-information-about-the-program-s-internal-state">3. it&rsquo;s hard to get information about the program&rsquo;s internal state</h3>

<p>Even if you generally understand the system you&rsquo;re working with and you can
reproduce the bug, debugging is almost impossible if you can&rsquo;t get enough
information about the program&rsquo;s internal state when the bug happens.</p>

<p>Here are a few specific reasons it can be hard to get data about the program&rsquo;s
internal state.</p>

<p><strong>there&rsquo;s no output at all</strong></p>

<p>Your program failed, but there&rsquo;s no output at all to read to tell you why it
failed. Not even an error message! It just didn&rsquo;t work.</p>

<p>This has happened to me before with operating systems bugs &ndash; my toy OS didn&rsquo;t
start and because it failed before I had any way of printing output, I had no
idea was wrong &ndash; it just didn&rsquo;t work!</p>

<p><strong>there&rsquo;s way too much output</strong></p>

<p>It&rsquo;s also easy to drown in <em>too much</em> output &ndash; I&rsquo;ve turned on debug output and
then been totally overwhelmed by how much information there is. It&rsquo;s very hard
to tell what&rsquo;s relevant and what&rsquo;s irrelevant in a million log lines!</p>

<p><strong>information about the bug is split across many places</strong></p>

<p>When investigating a distributed systems bug, the log lines related to the bug
are often spread across a bunch of different services. And sometimes there&rsquo;s no
request ID that you can use to easily figure out which log lines from service A
corresponded to the exception you saw in service B.</p>

<p>So you end up spending a long time manually staring at logs and trying to
correlate them. I&rsquo;ve spent more of my life doing this than I&rsquo;d prefer :)</p>

<p><strong>it&rsquo;s not possible to use a debugger/add print statements</strong></p>

<p>For example, if you want to know something about the state of your database
(like Postgres), you&rsquo;re definitely not going to attach a debugger to your
production database, and you probably don&rsquo;t want to recompile it to add extra
logging information. (though I have definitely recompiled programs just to add
extra logging information I needed!)</p>

<p>So you need to rely on the program&rsquo;s existing logging mechanisms and hope that
they have the information you need.</p>

<p><strong>the bug goes away when you use a debugger</strong></p>

<p>Here&rsquo;s a story from the Twitter replies about that:</p>

<blockquote>
<p>I had a bug in C++ code that would cause a seg fault. When I compiled with
the debug flag on, it worked fine. So really hard to find. Turned out I was
copying a string that was 2 bytes too big into a struct. The debug flag created
extra space for it!</p>
</blockquote>

<p>Another reason a debugger can cause a bug to go away is if it&rsquo;s a race
condition &ndash; debuggers often make the program run a little bit slower which can
cause the race not to happen.</p>

<p>A related story about how a print statement can make the bug disappear:</p>

<blockquote>
<p>In c or c++ printf can act as an ad-hoc synchronization point/cooperative MT
point so adding printf changes the execution order of the threads, making them
problem go away.</p>
</blockquote>

<h3 id="4-one-of-your-assumptions-is-wrong">4. one of your assumptions is wrong</h3>

<p>For example, in almost all cases it&rsquo;s fair to assume that the compiler does not
have a bug and that the bug is in your code. But as someone on Twitter pointed
out, very rarely it is a compiler bug! (<a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=38644">here&rsquo;s the compiler bug they
experienced</a>)</p>

<p>Other examples of (more mundane) assumptions that can be wrong:</p>

<ul>
<li>assuming your new code is being run when in fact something is being cached</li>
<li>assuming some environment variable is set when it isn&rsquo;t</li>
<li>assuming the bug is in the software when it&rsquo;s in the hardware (like a bad cable!)</li>
<li>assuming the documentation is correct</li>
</ul>

<p>Let&rsquo;s go over a few variants of &ldquo;one of your assumptions is wrong&rdquo;.</p>

<p><strong>the red herring</strong></p>

<p>Sometimes you see something early on when debugging that looks VERY suspicious
and spend a long time investigating it, but then it turns out to be totally
unrelated to the bug. This is pretty normal and it often doesn&rsquo;t mean you did
anything wrong (you can&rsquo;t take the perfect most efficient path to understanding
the bug every time!). But it can be really demoralizing.</p>

<p><strong>the case that works and the case that doesn&rsquo;t work look EXACTLY the same</strong></p>

<p>This one is SO frustrating when it happens &ndash; you&rsquo;re 100% sure nothing changed
but somehow the code is no longer working! (of course, the answer is that something did change, you just can&rsquo;t see it)</p>

<p>A few examples of this.</p>

<ol>
<li>one input causes your code to break, but it succeeds on a bunch of other
inputs and you can&rsquo;t figure out what&rsquo;s different about the input that makes
the code break</li>
<li>there&rsquo;s a typo that your brain is just refusing to notice</li>
<li>a very small code change has caused a bug and you really think it shouldn&rsquo;t
have made any difference</li>
<li>the exact same code is running on the same inputs, but there&rsquo;s some external
factor causing the bug that you haven&rsquo;t considered (like a file on disk or
an environment variable)</li>
</ol>

<p>The last type we&rsquo;ll talk about is bugs that are just really complex!</p>

<h3 id="5-the-bug-is-really-complicated">5. the bug is really complicated</h3>

<p>I wanted to separate this one out because a lot of bugs that are VERY DIFFICULT
to understand are actually pretty simple in the end! They&rsquo;re just difficult to
understand because of some of the above reasons (incorrect assumptions! you
don&rsquo;t understand the system! it&rsquo;s hard to observe the program&rsquo;s state!).</p>

<p>But some bugs are genuinely very complicated. A few variants of this one:</p>

<p><strong>the code is complicated</strong></p>

<p>One <a href="https://twitter.com/EllieOnSoftware/status/1400494936877846530">example from twitter</a>:</p>

<blockquote>
<p>too many, far-flung, and unknown influences on system behavior. e.g. multiple
inheritance run amok <em>across</em> libraries</p>
</blockquote>

<p><strong>the error message has 0 results when you Google it</strong></p>

<p>This doesn&rsquo;t always mean the bug is complicated, but it&rsquo;s alarming when there
are 0 results, or there&rsquo;s 1 result and it&rsquo;s&hellip; the library&rsquo;s source code, or 1
sad person on a forum posting about your exact bug but there are no replies.
(&ldquo;Oh no, has NOBODY ever run into this bug before?!?!&rdquo;)</p>

<p><strong>the bug is actually 3 bugs</strong></p>

<p>With most bugs, only one thing is going wrong &ndash; everything in the system is
working correctly except 1 thing and you just need to identify the 1 thing
that&rsquo;s causing the problem.</p>

<p>It&rsquo;s a lot harder when multiple things are broken at once &ndash; maybe there&rsquo;s
a bug in your program, and also a bug in a library you&rsquo;re using, and also some
unexpected behaviour on the part of your load balancer.</p>

<p>One common example of this is security vulnerabilities &ndash; they often involve
pretty complex bugs that take a long time to explain and understand even when
you figure out exactly what&rsquo;s going on.</p>

<h3 id="bonus-you-re-tired">bonus: you&rsquo;re tired</h3>

<p>This isn&rsquo;t really a technical reason, but tricky bugs are WAY harder to fix
when you&rsquo;re tired or stressed out after a long day.</p>

<h3 id="it-s-fun-to-see-that-many-people-have-the-same-types-of-impossible-bugs">it&rsquo;s fun to see that many people have the same types of impossible bugs</h3>

<p>I really enjoyed seeing how many people talked about the same reasons for
&ldquo;impossible&rdquo; bugs. Debugging sometimes feels like a really intense personal
struggle (WHY is this happening to ME?!?!) and I thought it was really cool to
see that even some of the weirdest reasons for bugs are shared by a lot of
people! More than one person mentioned &ldquo;the debugger stops the bug from
happening&rdquo;!</p>

<h3 id="many-of-these-can-happen-all-at-once">many of these can happen all at once</h3>

<p>I was chatting with my partner about a performance problem at work that took
them months to diagnose. It was challenging because:</p>

<ul>
<li>it was intermittent (only happened when there was a lot of traffic)</li>
<li>it only happened in production</li>
<li>they didn&rsquo;t have direct access to the system where it was happening (it was managed by a vendor)</li>
<li>it involved a Linux kernel system that they didn&rsquo;t previously know existed</li>
</ul>

<p>They figured it out, but because there were so many things that made it difficult, it took a lot of time!</p>

<p><small>
If you&rsquo;re interested in hearing about this debugging zine if/when I ever finish
it, you can subscribe to my <a href="https://wizardzines.com/zine-announcements/">zine announcements</a> mailing list. And
of course I&rsquo;ll post about it on this blog.
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You can now buy print version of my zines!]]></title>
    <link href="https://jvns.ca/blog/2021/06/02/you-can-now-buy-print-version-of-my-zines-/"/>
    <updated>2021-06-02T10:48:15+00:00</updated>
    <id>https://jvns.ca/blog/2021/06/02/you-can-now-buy-print-version-of-my-zines-/</id>
    <content type="html"><![CDATA[

<p>Hello! Quick announcement: I opened a new <a href="https://store.wizardzines.com">print zine
store</a> last week, so now you can buy print
copies of my zines! To start I&rsquo;ve printed 350 copies of each of the &ldquo;Bite
Size&hellip;&rdquo; zines.</p>

<p>Here&rsquo;s a photo of the front of the zines and some stickers:</p>

<div align="center">
<img src="https://jvns.ca/images/print-front.jpg">
</div>

<p>and the back covers:
<div align="center">
<img src="https://jvns.ca/images/print-back.jpg">
</div></p>

<p>Here are some notes about how the store works:</p>

<h3 id="great-print-quality">great print quality!</h3>

<p>I worked with a really good print company (<a href="https://www.girliepress.com/">Girlie Press</a>) and printed the zines on some nice paper,
so they look WAY nicer than they do when printed on a home printer :). I&rsquo;m
delighted with how they turned out.</p>

<p>When I originally started working on this project I thought about using a
print-on-demand company briefly (it sounds so convenient!) but I ordered test
prints from all the ones I could find and it turns out that none of them could
produce the print quality I wanted.</p>

<h3 id="free-shipping">free shipping!</h3>

<p>I never like paying for shipping, so I&rsquo;ve set up free shipping for US orders
over $30, and international orders over $50.</p>

<p>All of the shipping is being managed by a delightful small company called
<a href="https://www.whitesquirrel.com/">White Squirrel</a> near Seattle, who specialize in
shipping for artists. (I&rsquo;m not handling it myself because I am extremely
forgetful and I would just get distracted and forget to ship your order,
everybody would suffer)</p>

<h3 id="stickers">stickers!</h3>

<p>I&rsquo;ve also added also some stickers on the store as a bonus &ndash; there&rsquo;s an strace
sticker because of my great love for strace, a TCP witch (from the cover of
<a href="https://wizardzines.com/zines/tcpdump">let&rsquo;s learn tcpdump</a>), and a REALLY CUTE space penguin who I&rsquo;m personally obsessed with from the cover of
<a href="https://wizardzines.com/zines/containers">how containers work</a>.</p>

<p>If you order the pack of all 4 zines, you&rsquo;ll get all of the stickers as well as
a sticker sheet of the cover of Bite Size Command Line, so you can have awk and
grep stickers :)</p>

<h3 id="a-discount-if-you-already-bought-the-pdf-version">a discount if you already bought the PDF version!</h3>

<p>If you already bought the PDF version of these zines &ndash; thank you so much!! You
can use the PASTBUYER discount code for 40% off. You&rsquo;ll need to use the same
email address you used when you bought the PDF. If you run into any problems
with that, email me at julia@wizardzines.com.</p>

<h3 id="all-print-zines-include-the-pdf-version-too">all print zines include the PDF version too!</h3>

<p>If you order the print version and you don&rsquo;t already have the PDF version &ndash;
it&rsquo;s included! You&rsquo;ll get a link with your confirmation email that&rsquo;ll let you
download the PDF right away.</p>

<h3 id="more-zines-coming-soon">more zines coming soon!</h3>

<p>Right now only 4 zines (the &ldquo;Bite Size&hellip;&rdquo;  zines) are available on this store
because I wasn&rsquo;t sure how many to order and didn&rsquo;t want to end up with
thousands of zines in a warehouse by accident (think of the trees!).</p>

<p>But I&rsquo;ll definitely be adding more zines relatively soon!</p>

<h3 id="hopefully-also-bulk-rates-and-posters">hopefully also bulk rates and posters</h3>

<p>I&rsquo;m hoping to add bulk rates soon &ndash; like if you want to buy 10 copies of a
zine for everyone on team, 30 copies for a class, or 100 copies as swag for a
conference.</p>

<p>I&rsquo;d also like to add some posters to the store at some point, like a
<a href="https://wizardzines.com/comics/wizard-programmer/">how to be a wizard programmer</a> poster.</p>

<p>All of that is coming later though! Sales have been going pretty well so far
(we&rsquo;ve sold almost half of the initial print run!), so thank you ❤.</p>

<h3 id="the-link-again">the link again</h3>

<p>The print zines ore at <a href="https://store.wizardzines.com">https://store.wizardzines.com</a>, or you can find it linked from each zine&rsquo;s page at <a href="https://wizardzines.com/zines/bite-size-bash">https://wizardzines.com/zines/bite-size-bash</a> (click on &ldquo;print version&rdquo;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog about what you've struggled with]]></title>
    <link href="https://jvns.ca/blog/2021/05/24/blog-about-what-you-ve-struggled-with/"/>
    <updated>2021-05-24T13:59:07+00:00</updated>
    <id>https://jvns.ca/blog/2021/05/24/blog-about-what-you-ve-struggled-with/</id>
    <content type="html"><![CDATA[

<p>I was talking to <a href="https://jemma.dev/">Jemma</a> recently about what stops people
from blogging. One barrier that stood out to me was: it&rsquo;s hard to identify
which things you know will be useful to other people!</p>

<p>The process I use for a lot of my blog posts is:</p>

<ol>
<li>Struggle with something (usually computer-related)</li>
<li>Eventually (days or months or years later), figure out how to solve some of
the problems I had</li>
<li>Write a blog post about what helped me</li>
</ol>

<p>I think this approach is effective because if I struggled with something,
there&rsquo;s a pretty good chance that other people are struggling with it too, and
what I learned is likely to be useful to at least some of them!</p>

<p>Obviously this isn&rsquo;t the only approach to blogging, but it&rsquo;s my approach, so
that&rsquo;s what I&rsquo;m going to write about here :). I&rsquo;ll give a few examples of
specific blog posts that came out of something I struggled with.</p>

<h3 id="it-s-not-about-the-struggle-it-s-about-what-you-learned">it&rsquo;s not about the struggle, it&rsquo;s about what you learned</h3>

<p>The first important thing here is that the blog posts aren&rsquo;t about the
struggle, exactly. I&rsquo;m still not that great at writing Rust, but I wouldn&rsquo;t
write a blog post called &ldquo;I find Rust hard&rdquo; &ndash; that wouldn&rsquo;t help anyone!</p>

<p>Instead, when I learn something that helps me, I write about it so that it can
help other people too. For example, one specific thing I struggled with in Rust
was understanding references, and so I wrote <a href="https://jvns.ca/blog/2017/11/27/rust-ref/">what&rsquo;s a reference in
Rust?</a> about what I learned.</p>

<h3 id="what-you-struggled-with-shows-you-what-to-focus-on">what you struggled with shows you what to focus on</h3>

<p>Okay, Julia, you might be thinking &ndash; if it&rsquo;s about what you learned, why isn&rsquo;t
this blog post called &ldquo;Blog about what you learned&rdquo; then? Well, we&rsquo;ve all
learned lots of things! For example at some point in the last 8 years I learned
Go. But what&rsquo;s worth talking about with Go? Should I explain the syntax? Talk
about <code>net/http</code>? Explain Go modules?</p>

<p>If I instead think about what I&rsquo;ve struggled with Go, it suddenly gets MUCH
clearer &ndash; one thing I&rsquo;ve had trouble with is deadlocks! That&rsquo;s way more
specific, and a lot more likely to be useful to other people than an intro
to Go modules &ndash; it&rsquo;s not obvious how to use Go&rsquo;s concurrency features well!</p>

<h3 id="it-can-take-years-to-figure-out-what-you-learned">it can take years to figure out what you learned</h3>

<p>When I started my first job at a &ldquo;big&rdquo; company 7 years ago (&ldquo;big&rdquo; being more
than 5 people), I really didn&rsquo;t understand how to work with my manager
effectively and it sometimes caused misunderstandings. It wasn&rsquo;t great!</p>

<p>But when I was first having problems with this, I didn&rsquo;t have anything that
useful to say about this other than &ldquo;oh no, um, this is hard&rdquo;. This was because
I hadn&rsquo;t solved my problems for myself yet, so I definitely could not tell
anyone else what I learned! It took me a few years to figure out how to work
with a manager well.</p>

<p>And I&rsquo;m still figuring out new ways to explain what I learned &ndash; for example just a few
months ago I realized (while talking to my old manager) that there are a lot of
concrete facts that managers don&rsquo;t know, and if you think your manager <strong>does</strong>
know those facts, you&rsquo;ll end up with a lot of miscommunications and problems.</p>

<p>So I wrote <a href="https://jvns.ca/blog/things-your-manager-might-not-know/">Things your manager might not
know</a> as another
attempt at helping people who are learning to work with their manager
effectively. I wrote that post a year and a half after I left my job, so I
didn&rsquo;t even have a manager at the time!</p>

<h3 id="write-it-down-while-you-still-remember-what-was-hard">write it down while you still remember what was hard</h3>

<p>It&rsquo;s very easy to misidentify what you learned if you don&rsquo;t remember what it
was like to struggle with the topic.</p>

<p>When I first started using git at work, it was confusing and I made
a lot of mistakes. But that was in 2011 and I can&rsquo;t remember what was hard
about it anymore! So I could say that the most important thing to learn to
solve your git issues is git&rsquo;s object model (like how branches / commits work),
but I don&rsquo;t exactly know if that&rsquo;s true! I know that I used to struggle with
git, and now I don&rsquo;t, and now I have a pretty good model of how git&rsquo;s object
works, but I don&rsquo;t really remember exactly what got me from there to here.</p>

<h3 id="advanced-mode-write-about-other-people-s-struggles">advanced mode: write about other people&rsquo;s struggles</h3>

<p>But if you don&rsquo;t remember what was hard about something, not all is lost! It&rsquo;s
definitely possible to write about a topic that somebody else is struggling
with. I find that the easiest way to do this is to first teach the topic, so
here&rsquo;s a quick story about that.</p>

<p>In 2019, I wrote a zine about SQL. When I started, I thought it would be easy
because I was pretty comfortable with SQL &ndash; I&rsquo;d done a LOT of data analysis in
SQL and so I thought I could explain it.</p>

<p>But I couldn&rsquo;t have been more wrong. It turned out that when I started I had no
idea what was actually challenging about learning SQL.</p>

<p>I spent a lot of time talking to a friend who was new to SQL about how it
worked, and we realized that one of the blockers was that it wasn&rsquo;t obvious to
them in what order a given SQL query was running. So I wrote <a href="https://jvns.ca/blog/2019/10/03/sql-queries-don-t-start-with-select/">SQL queries don&rsquo;t
start with
SELECT</a>,
and a bunch of related examples and that helped a lot of people understand SQL
queries better!</p>

<p>The cool thing about this is that when I dig into something that I think is
easy but someone else is struggling with, often I learn something new too. For
example I did sort of know in what order SQL queries ran but I&rsquo;d never really
thought about it explicitly. And being more explicit about how it worked helped
me understand window functions better, which was something I was a bit shaky
on!</p>

<h3 id="sometimes-you-just-haven-t-learned-enough-about-a-topic-yet-and-that-s-ok">sometimes you just haven&rsquo;t learned enough about a topic yet (and that&rsquo;s ok)</h3>

<p>There are still a lot of programming and career things that I&rsquo;ve struggled with
in the past where  I still don&rsquo;t have a concrete lesson that I can write about.
For example, I&rsquo;ve struggled a lot with Kubernetes and Envoy and I&rsquo;ve written
about that a bit on this blog, but I&rsquo;m still not sure what I learned from some
of the problems I had. And I don&rsquo;t work with either of them anymore so it&rsquo;s
possible I&rsquo;ll never really be able to say! This kind of feels bad, but it&rsquo;s
okay.</p>

<p>Every so often I&rsquo;ll think about a topic I&rsquo;ve struggled with in the past and
reflect on whether I&rsquo;ve learned anything I can write about. Usually the answer
is no, but sometimes the answer is yes!</p>

<h3 id="it-s-a-bit-weird-to-be-vulnerable-on-the-internet">it&rsquo;s a bit weird to be vulnerable on the internet</h3>

<p>Talking about things I struggled with on the internet is kind of scary
sometimes! Here are a few things I do to make it less scary:</p>

<ul>
<li>Mostly talk about technical problems! Talking about computer problems I had
(<a href="https://jvns.ca/blog/2017/11/20/groups/">&ldquo;I didn&rsquo;t understand how groups worked on
Linux&rdquo;</a>) feels very neutral to me.
We&rsquo;re not born learning how groups work on Linux and everyone has to learn it
at some point.</li>
<li>Be a little vague when talking about people problems! For example, <a href="https://jvns.ca/blog/brag-documents/">get your
work recognized: write a brag document</a>
comes out of some stress I had around getting promoted. I&rsquo;m not very specific
about my problems because everyone&rsquo;s experience with getting promoted is
super different and I think focusing too much on my specific issues would
distract from the lesson (&ldquo;track your accomplishments!&rdquo;).</li>
<li>Spend a lot of time processing things! In general the more I struggled with
something, the more time I need to spend processing it before I can figure
out how to talk about what I learned from it in public.</li>
<li>Don&rsquo;t talk about everything! There are obviously lots of things I never talk
about on my blog at all :)</li>
</ul>

<p>I wrote another blog post about <a href="https://jvns.ca/blog/2017/03/20/blogging-principles/">blogging principles I use</a> a few years ago that talks about some more tactics I use here.</p>

<h3 id="you-can-practice-identifying-what-you-learned">you can practice identifying what you learned</h3>

<p>Going from &ldquo;I have a problem!&rdquo; to &ldquo;I don&rsquo;t have that problem anymore!&rdquo; to &ldquo;here
are the specific things I learned!&rdquo; is not actually that easy! But it is
something you can practice. It&rsquo;s easy to skip that last step &ndash; you can
learn things on an intuitive level but never actually identify what exactly it
was that you learned.</p>

<p>For example, I&rsquo;m definitely better at testing than I used to be but I haven&rsquo;t
taken the time to identify exactly what I&rsquo;ve learned about testing over the
years! I think I&rsquo;d write better tests if I explicitly wrote down what I&rsquo;ve
learned about testing so that I could more consistently do those things in the
future.</p>

<h3 id="talk-to-a-friend-or-coworker-to-figure-out-what-you-ve-learned">talk to a friend or coworker to figure out what you&rsquo;ve learned</h3>

<p>It can be really hard to notice things you&rsquo;ve learned on your own. Like we just
talked about, I don&rsquo;t really konw what I&rsquo;ve learned about testing!</p>

<p>I find that having conversations with friends or coworkers makes it MUCH easier
to figure out what I want to write about a topic. A few reasons talking to
others is great:</p>

<ul>
<li>It can help clarify your thoughts!</li>
<li>They probably have different ideas from you!</li>
<li>They can tell you if what you&rsquo;re saying resonates with them or not!</li>
</ul>

<h3 id="why-i-like-writing-about-what-i-learned-in-public">why I like writing about what I learned in public</h3>

<p>I think that whether or not you write about what you learned in public, it&rsquo;s
super valuable to keep track of what you learned from doing hard things. It
helps you remember what you&rsquo;ve learned so that you can do better work in the
future!</p>

<p>Here are a few things I like about writing about what I&rsquo;ve learned in public,
though:</p>

<ul>
<li>It helps other people! It feels way better to have struggled with a super
confusing situation and come out of it with something concrete that can help
others navigate a similar situation</li>
<li>Putting the writing on the internet really forces me to think about whether
the lessons I think I learned actually make sense (&ldquo;wait, is this REALLY
true?&ldquo;)</li>
<li>When I&rsquo;m writing I often come up with additional questions and do a little
bit of extra research, so I learn even more!</li>
<li>Seeing other people&rsquo;s reactions often helps me learn something new</li>
<li>If I want to remember what I learned about something in the past, I can just
look it up on my blog!</li>
</ul>

<p><small>Thanks to Jemma, Kamal, Shae, Matthieu, and Travis for feedback on a
draft of this. </small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to look at the stack with gdb]]></title>
    <link href="https://jvns.ca/blog/2021/05/17/how-to-look-at-the-stack-in-gdb/"/>
    <updated>2021-05-17T09:14:37+00:00</updated>
    <id>https://jvns.ca/blog/2021/05/17/how-to-look-at-the-stack-in-gdb/</id>
    <content type="html"><![CDATA[

<p>I was chatting with someone yesterday and they mentioned that they don&rsquo;t really
understand exactly how the stack works or how to look at it.</p>

<p>So here&rsquo;s a quick walkthrough of how you can use gdb to look at the stack of a C
program. I think this would be similar for a Rust program, but I&rsquo;m going to use
C because I find it a little simpler for a toy example and also you can do Terrible
Things in C more easily.</p>

<h3 id="our-test-program">our test program</h3>

<p>Here&rsquo;s a simple C program that declares a few variables and reads two strings
from standard input. One of the strings is on the heap, and one is on the
stack.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main() {
    char stack_string[10] = &quot;stack&quot;;
    int x = 10;
    char *heap_string;

    heap_string = malloc(50);

    printf(&quot;Enter a string for the stack: &quot;);
    gets(stack_string);
    printf(&quot;Enter a string for the heap: &quot;);
    gets(heap_string);
    printf(&quot;Stack string is: %s\n&quot;, stack_string);
    printf(&quot;Heap string is: %s\n&quot;, heap_string);
    printf(&quot;x is: %d\n&quot;, x);
}
</code></pre>

<p>This program uses the extremely unsafe function <code>gets</code> which you should never
use, but that&rsquo;s on purpose &ndash; we learn more when things go wrong.</p>

<h3 id="step-0-compile-the-program">step 0: compile the program.</h3>

<p>We can compile it with <code>gcc -g -O0 test.c -o test</code>.</p>

<p>The <code>-g</code> flag compiles the program with debugging symbols, which is going to
make it a lot easier to look at our variables.</p>

<p><code>-O0</code> tells gcc to turn off optimizations which I did just to make sure our <code>x</code>
variable didn&rsquo;t get optimized out.</p>

<h3 id="step-1-start-gdb">step 1: start gdb</h3>

<p>We can start gdb like this:</p>

<pre><code>$ gdb ./test
</code></pre>

<p>It prints out some stuff about the GPL and then gives a prompt. Let&rsquo;s create a breakpoint on the <code>main</code> function.</p>

<pre><code>(gdb) b main
Breakpoint 1 at 0x1171: file test.c, line 4.
</code></pre>

<p>Then we can run the program:</p>

<pre><code>(gdb) run
Starting program: /home/bork/work/homepage/test 

Breakpoint 1, main () at test.c:4
4	int main() {
</code></pre>

<p>Okay, great! The program is running and we can start looking at the stack</p>

<h3 id="step-2-look-at-our-variables-addresses">step 2: look at our variables&rsquo; addresses</h3>

<p>Let&rsquo;s start out by learning about our variables. Each of them has an address in
memory, which we can print out like this:</p>

<pre><code>(gdb) p &amp;x
$3 = (int *) 0x7fffffffe27c
(gdb) p &amp;heap_string
$2 = (char **) 0x7fffffffe280
(gdb) p &amp;stack_string
$4 = (char (*)[10]) 0x7fffffffe28e
</code></pre>

<p>So if we look at the stack at those addresses, we should be able to see all of
these variables!</p>

<h3 id="concept-the-stack-pointer">concept: the stack pointer</h3>

<p>We&rsquo;re going to need to use the stack pointer so I&rsquo;ll try to explain it really
quickly.</p>

<p>There&rsquo;s an x86 register called ESP called the &ldquo;stack pointer&rdquo;. Basically
it&rsquo;s the address of the start of the stack for the current function. In gdb you can access it
with <code>$sp</code>. When you call a new function or return from a function, the value
of the stack pointer changes.</p>

<h3 id="step-3-look-at-our-variables-on-the-stack-at-the-beginning-of-main">step 3: look at our variables on the stack at the beginning of <code>main</code></h3>

<p>First, let&rsquo;s look at the stack at the start of the <code>main</code> function. Here&rsquo;s
the value of our stack pointer right now:</p>

<pre>
(gdb) p $sp
$7 = (void *) 0x7fffffffe270
</pre>

<p>So the stack for our current function starts at <code>0x7fffffffe270</code>. Cool.</p>

<p>Now let&rsquo;s use gdb to print out the first 40 words (aka 160 bytes) of memory
after the start of the current function&rsquo;s stack. It&rsquo;s possible that some of
this memory isn&rsquo;t part of the stack because I&rsquo;m not totally sure how big the
stack is here. But at least the beginning of this is part of the stack.</p>

<pre>
(gdb) x/40x $sp
0x7fffffffe270: 0x00000000  0x00000000  0x55555250  <strong style="color: red">0x00005555</strong>
0x7fffffffe280: <strong style="color: blue">0x00000000  0x00000000</strong>  0x55555070  0x000055<strong style="color: purple">55</strong>
0x7fffffffe290: <strong style="color: purple">0xffffe390  0x00007fff</strong>  0x00000000  0x00000000
0x7fffffffe2a0: 0x00000000  0x00000000  0xf7df4b25  0x00007fff
0x7fffffffe2b0: 0xffffe398  0x00007fff  0xf7fca000  0x00000001
0x7fffffffe2c0: 0x55555169  0x00005555  0xffffe6f9  0x00007fff
0x7fffffffe2d0: 0x55555250  0x00005555  0x3cae816d  0x8acc2837
0x7fffffffe2e0: 0x55555070  0x00005555  0x00000000  0x00000000
0x7fffffffe2f0: 0x00000000  0x00000000  0x00000000  0x00000000
0x7fffffffe300: 0xf9ce816d  0x7533d7c8  0xa91a816d  0x7533c789
</pre>

<p>I&rsquo;ve bolded approximately where the <code>stack_string</code>, <code>heap_string</code>, and <code>x</code>
variables are and colour coded them:</p>

<ul>
<li><code>x</code> is red and starts at <code>0x7fffffffe27c</code></li>
<li><code>heap_string</code> is blue and starts at <code>0x7fffffffe280</code></li>
<li><code>stack_string</code> is purple and starts at <code>0x7fffffffe28e</code></li>
</ul>

<p>I think I might have bolded the location of some of those variables a bit wrong
here but that&rsquo;s approximately where they are.</p>

<p>One weird thing you might notice here is that <code>x</code> is the number <code>0x5555</code>, but
we set <code>x</code> to 10! That because <code>x</code> doesn&rsquo;t actually get set until after our
<code>main</code> function starts, and we&rsquo;re at the very beginning of <code>main</code>.</p>

<h3 id="step-3-look-at-the-stack-again-on-line-10">step 3: look at the stack again on line 10</h3>

<p>Let&rsquo;s skip a few lines and wait for our variables to actually get set to the
values we initialized them to. By the time we get to line 10, <code>x</code> should be set to 10.</p>

<p>First, we need to set another breakpoint:</p>

<pre><code>(gdb) b test.c:10
Breakpoint 2 at 0x5555555551a9: file test.c, line 11.
</code></pre>

<p>and continue the program running:</p>

<pre><code>(gdb) continue
Continuing.

Breakpoint 2, main () at test.c:11
11	    printf(&quot;Enter a string for the stack: &quot;);
</code></pre>

<p>Okay! Let&rsquo;s look at all the same things again! <code>gdb</code> is formatting the bytes in
a slightly different way here and I don&rsquo;t actually know why. Here&rsquo;s a reminder of where to find our variables on the stack:</p>

<ul>
<li><code>x</code> is red and starts at <code>0x7fffffffe27c</code></li>
<li><code>heap_string</code> is blue and starts at <code>0x7fffffffe280</code></li>
<li><code>stack_string</code> is purple and starts at <code>0x7fffffffe28e</code></li>
</ul>

<pre>
(gdb) x/80x $sp
0x7fffffffe270:  0x00  0x00  0x00  0x00  0x00  0x00  0x00  0x00
0x7fffffffe278:  0x50  0x52  0x55  0x55  <strong style="color: red">0x0a  0x00  0x00  0x00</strong>
0x7fffffffe280:  <strong style="color: blue">0xa0  0x92  0x55  0x55  0x55  0x55  0x00  0x00</strong>
0x7fffffffe288:  0x70  0x50  0x55  0x55  0x55  0x55  <strong style="color: purple">0x73  0x74</strong>
0x7fffffffe290:  <strong style="color: purple">0x61  0x63  0x6b  0x00  0x00  0x00  0x00  0x00</strong>
0x7fffffffe298:  0x00  0x80  0xf7  0x8a  0x8a  0xbb  0x58  0xb6
0x7fffffffe2a0:  0x00  0x00  0x00  0x00  0x00  0x00  0x00  0x00
0x7fffffffe2a8:  0x25  0x4b  0xdf  0xf7  0xff  0x7f  0x00  0x00
0x7fffffffe2b0:  0x98  0xe3  0xff  0xff  0xff  0x7f  0x00  0x00
0x7fffffffe2b8:  0x00  0xa0  0xfc  0xf7  0x01  0x00  0x00  0x00
</pre>

<p>There are a couple of interesting things to discuss here before we go further in the program.</p>

<h3 id="how-stack-string-is-represented-in-memory">how <code>stack_string</code> is represented in memory</h3>

<p>Right now (on line 10) <code>stack_string</code> is set to &ldquo;stack&rdquo;. Let&rsquo;s take a look at
how that&rsquo;s represented in memory.</p>

<p>We can print out the bytes in the string like this:</p>

<pre><code>(gdb) x/10x stack_string
0x7fffffffe28e:	0x73	0x74	0x61	0x63	0x6b	0x00	0x00	0x00
0x7fffffffe296:	0x00	0x00
</code></pre>

<p>The string &ldquo;stack&rdquo; is 5 characters which corresponds to 5 ASCII bytes &ndash;
<code>0x73</code>, <code>0x74</code>, <code>0x61</code>, <code>0x63</code>, and <code>0x6b</code>. <code>0x73</code> is <code>s</code> in ASCII, <code>0x74</code> is
<code>t</code>, etc.</p>

<p>We can also get gdb to show us the string  with <code>x/1s</code>:</p>

<pre><code>(gdb) x/1s stack_string
0x7fffffffe28e:	&quot;stack&quot;
</code></pre>

<h3 id="how-heap-string-and-stack-string-are-different">how <code>heap_string</code> and <code>stack_string</code> are different</h3>

<p>You&rsquo;ll notice that <code>stack_string</code> and <code>heap_string</code> are represented in very
different ways on the stack:</p>

<ul>
<li><code>stack_string</code> has the contents of the string (&ldquo;stack&rdquo;)</li>
<li><code>heap_string</code> is a pointer to an address somewhere else in memory</li>
</ul>

<p>Here are the bytes on the stack for the <code>heap_string</code> variable:</p>

<pre><code>0xa0  0x92  0x55  0x55  0x55  0x55  0x00  0x00
</code></pre>

<p>These bytes actually get read backwards because x86 is little-endian, so the
memory address of <code>heap_string</code> is <code>0x5555555592a0</code></p>

<p>Another way to see the address of <code>heap_string</code> in gdb is just to print it out
with <code>p</code>:</p>

<pre><code>(gdb) p heap_string
$6 = 0x5555555592a0 &quot;&quot;
</code></pre>

<h3 id="the-bytes-that-represent-the-integer-x">the bytes that represent the integer <code>x</code></h3>

<p><code>x</code> is a 32-bit integer, and the bytes that represent it are <code>0x0a  0x00    0x00    0x00</code>.</p>

<p>We need to read these bytes backwards again (the same way reason we read the
bytes for <code>heap_string</code> address backwards), so this corresponds to the number
<code>0x000000000a</code>, or <code>0xa</code>, which is 10.</p>

<p>That makes sense! We set <code>int x = 10;</code>!</p>

<h3 id="step-4-read-input-from-standard-input">step 4: read input from standard input</h3>

<p>Okay, we&rsquo;ve initialized the variables, now let&rsquo;s see how the stack changes when
this part of the C program runs:</p>

<pre><code>printf(&quot;Enter a string for the stack: &quot;);
gets(stack_string);
printf(&quot;Enter a string for the heap: &quot;);
gets(heap_string);
</code></pre>

<p>We need to set another breakpoint:</p>

<pre><code>(gdb) b test.c:16
Breakpoint 3 at 0x555555555205: file test.c, line 16.
</code></pre>

<p>and continue running the program</p>

<pre><code>(gdb) continue
Continuing.
</code></pre>

<p>We&rsquo;re prompted for 2 strings, and I entered <code>123456789012</code> for the stack string
and <code>bananas</code> for the heap.</p>

<h3 id="let-s-look-at-stack-string-first-there-s-a-buffer-overflow">let&rsquo;s look at <code>stack_string</code> first (there&rsquo;s a buffer overflow!)</h3>

<pre><code>(gdb) x/1s stack_string
0x7fffffffe28e:	&quot;123456789012&quot;
</code></pre>

<p>That seems pretty normal, right? We entered <code>123456789012</code> and now it&rsquo;s set to <code>123456789012</code>.</p>

<p>But there&rsquo;s something weird about this. Here&rsquo;s what those bytes look like on
the stack. They&rsquo;re highlighted in purple again.</p>

<pre>
0x7fffffffe270:  0x00  0x00  0x00  0x00  0x00  0x00  0x00  0x00
0x7fffffffe278:  0x50  0x52  0x55  0x55  0x0a  0x00  0x00  0x00
0x7fffffffe280:  0xa0  0x92  0x55  0x55  0x55  0x55  0x00  0x00
0x7fffffffe288:  0x70  0x50  0x55  0x55  0x55  0x55  <strong style="color: purple">0x31  0x32</strong>
0x7fffffffe290:  <strong style="color: purple">0x33  0x34  0x35  0x36  0x37  0x38  0x39  0x30</strong>
0x7fffffffe298:  <strong style="color: purple">0x31  0x32  0x00</strong>  0x8a  0x8a  0xbb  0x58  0xb6
0x7fffffffe2a0:  0x00  0x00  0x00  0x00  0x00  0x00  0x00  0x00
0x7fffffffe2a8:  0x25  0x4b  0xdf  0xf7  0xff  0x7f  0x00  0x00
0x7fffffffe2b0:  0x98  0xe3  0xff  0xff  0xff  0x7f  0x00  0x00
0x7fffffffe2b8:  0x00  0xa0  0xfc  0xf7  0x01  0x00  0x00  0x00
</pre>

<p>The weird thing about this is that <strong>stack_string was only supposed to be 10
bytes</strong>. But now suddenly we&rsquo;ve put 13 bytes in it? What&rsquo;s happening?</p>

<p>This is a classic buffer overflow, and what&rsquo;s happening is that <code>stack_string</code>
wrote over other data from the program. This hasn&rsquo;t caused a problem yet in our
case, but it can crash your program or, worse, open you up to Very Bad Security
Problems.</p>

<p>For example, if <code>stack_string</code> were before <code>heap_string</code> in memory, then we
could overwrite the address that <code>heap_string</code> points to. I&rsquo;m not sure exactly
what&rsquo;s in memory after <code>stack_string</code> here but we could probably use this to do
some kind of shenanigans.</p>

<h3 id="something-actually-detects-the-buffer-overflow">something actually detects the buffer overflow</h3>

<p>When I cause this buffer overflow problem, here&rsquo;s</p>

<pre>
 ./test
Enter a string for the stack: 01234567891324143
Enter a string for the heap: adsf
Stack string is: 01234567891324143
Heap string is: adsf
x is: 10
*** stack smashing detected ***: terminated
fish: Job 1, './test' terminated by signal SIGABRT (Abort)
</pre>

<p>My guess about what&rsquo;s happening here is that the <code>stack_string</code> variable is
actually at the end of this function&rsquo;s stack, and so the extra bytes are going into a
different region of memory.</p>

<p>When you do this intentionally as a security exploit it&rsquo;s called &ldquo;stack
smashing&rdquo;, and somehow something is detecting that this is happening.
Originally I wasn&rsquo;t sure how this was being detected, but a couple of people
emailed me to say that it&rsquo;s a compiler feature called &ldquo;stack protection&rdquo;.
Basically it adds a &ldquo;canary&rdquo; value to the end of the stack and when the
function returns it checks to see if that value has been changed. Here&rsquo;s an
<a href="https://wiki.osdev.org/Stack_Smashing_Protector">article about the stack smashing protector on the OSDev wiki</a>.</p>

<p>That&rsquo;s all I have to say about buffer overflows.</p>

<h3 id="now-let-s-look-at-heap-string">now let&rsquo;s look at <code>heap_string</code></h3>

<p>We also read a value (<code>bananas</code>) into the <code>heap_string</code> variable. Let&rsquo;s see what that
looks like in memory.</p>

<p>Here&rsquo;s what <code>heap_string</code> looks on the stack after we read the variable in.</p>

<pre>
(gdb) x/40x $sp
0x7fffffffe270:  0x00  0x00  0x00  0x00  0x00  0x00  0x00  0x00
0x7fffffffe278:  0x50  0x52  0x55  0x55  0x0a  0x00  0x00  0x00
0x7fffffffe280:  <strong style="color: blue">0xa0  0x92  0x55  0x55  0x55  0x55  0x00  0x00</strong>
0x7fffffffe288:  0x70  0x50  0x55  0x55  0x55  0x55  0x31  0x32
0x7fffffffe290:  0x33  0x34  0x35  0x36  0x37  0x38  0x39  0x30
</pre>

<p>The thing to notice here is that it looks exactly the same! It&rsquo;s an address,
and the address hasn&rsquo;t changed. But let&rsquo;s look at what&rsquo;s at that address.</p>

<pre><code>(gdb) x/10x 0x5555555592a0
0x5555555592a0:	0x62	0x61	0x6e	0x61	0x6e	0x61	0x73	0x00
0x5555555592a8:	0x00	0x00
</code></pre>

<p>Those are the bytes for <code>bananas</code>! Those bytes aren&rsquo;t in the stack at all,
they&rsquo;re somewhere else in memory (on the heap)</p>

<h3 id="where-are-the-stack-and-the-heap">where are the stack and the heap?</h3>

<p>We&rsquo;ve talked about how the stack and the heap are different regions of memory,
but how can you tell where they are in memory?</p>

<p>There&rsquo;s a file for each process called <code>/proc/$PID/maps</code> that shows you the
memory maps for each process. Here&rsquo;s where you can see the stack and the heap
in there.</p>

<pre><code>$ cat /proc/24963/maps
... lots of stuff omitted ... 
555555559000-55555557a000 rw-p 00000000 00:00 0                          [heap]
... lots of stuff omitted ... 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]
</code></pre>

<p>One thing to notice is that here the heap addresses start with <code>0x5555</code> and
the stack addresses start with <code>0x7fffff</code>. So it&rsquo;s pretty easy to tell the
difference between an address on the stack and an address on the heap.</p>

<h3 id="playing-about-with-gdb-like-this-is-really-helpful">playing about with gdb like this is really helpful</h3>

<p>This was kind of a whirlwind tour and I didn&rsquo;t explain everything, but
hopefully seeing what the data actually looks like in memory makes it a little
more clear what the stack actually is.</p>

<p>I really recommend playing around with gdb like this &ndash; even if you don&rsquo;t
understand every single thing that you see in memory, I find that actually
seeing the data in my program&rsquo;s memory like this makes these abstract concepts
like &ldquo;the stack&rdquo; and &ldquo;the heap&rdquo; and &ldquo;pointers&rdquo; a lot easier to understand.</p>

<h3 id="maybe-lldb-is-easier-to-use">maybe lldb is easier to use</h3>

<p>A couple of people suggested that lldb is easier to use than gdb. I haven&rsquo;t
used it yet but I looked at it quickly, and it does seem like it might be
simpler!  As far as I can tell from a quick inspection everything in this
walkthrough also works in lldb, except that you need to do <code>p/s</code> instead of
<code>p/1s</code>.</p>

<h3 id="ideas-for-more-exercises">ideas for more exercises</h3>

<p>A few ideas (in no particular order) for followup exercises to think about the
stack:</p>

<ul>
<li>try adding another function to <code>test.c</code> and make a breakpoint at the
beginning of that function and see if you can find the stack from <code>main</code>!
They say that &ldquo;the stack grows down&rdquo; when you call a function, can you see
that happening in gdb?</li>
<li>return a pointer from a function to a string on the stack and see what goes
wrong. Why is it bad to return a pointer to a string on the stack?</li>
<li>try causing a stack overflow in C and try to understand exactly what happens
when the stack overflows by looking at it in gdb!</li>
<li>look at the stack in a Rust program and try to find the variables!</li>
<li>try some of the buffer overflow challenges in the <a href="https://github.com/guyinatuxedo/nightmare">nightmare
course</a>. The README for each
challenge is the solution so avoid reading it if you don&rsquo;t want to be spoiled.
The idea with all of those challenges is that you&rsquo;re given a binary and you need to figure out how to
cause a buffer overflow to get it to print out the &ldquo;flag&rdquo; string.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The OSI model doesn't map well to TCP/IP]]></title>
    <link href="https://jvns.ca/blog/2021/05/11/what-s-the-osi-model-/"/>
    <updated>2021-05-11T14:58:41+00:00</updated>
    <id>https://jvns.ca/blog/2021/05/11/what-s-the-osi-model-/</id>
    <content type="html"><![CDATA[

<p><a href="https://en.wikipedia.org/wiki/Internet_protocol_suite">TCP/IP</a> is the set of networking protocols that we use on the modern internet &ndash;
TCP, UDP, IP, ARP, ICMP, DNS, etc. When I talk about &ldquo;networking&rdquo;, I&rsquo;m
basically always talking about TCP/IP.</p>

<p>Many explanations of TCP/IP start with something called the &ldquo;OSI model&rdquo;. I
don&rsquo;t use the OSI model when explaining networking because when I first
started learning about internet networking I found all of the OSI model
explanations really confusing &ndash; it wasn&rsquo;t clear to me at all how the OSI
model corresponded to TCP/IP.</p>

<p>So if you&rsquo;re just starting to learn about networking and you&rsquo;re confused about
the OSI model, here&rsquo;s an explanation of how it corresponds to TCP/IP, how
it doesn&rsquo;t, and why it&rsquo;s safe to mostly just ignore it if you don&rsquo;t find it helpful.</p>

<h3 id="the-osi-model-has-7-layers">the OSI model has 7 layers</h3>

<p>Let&rsquo;s very briefly discuss what the OSI model is: it&rsquo;s an abstract model for
how networking works with 7 numbered layers:</p>

<ul>
<li>Layer 1: physical layer</li>
<li>Layer 2: data link</li>
<li>Layer 3: network</li>
<li>Layer 4: transport</li>
<li>Layer 5: session</li>
<li>Layer 6: presentation</li>
<li>Layer 7: application</li>
</ul>

<p>I won&rsquo;t say more about what each of those is supposed to mean, there are a
thousand explanations of it online.</p>

<h3 id="how-the-osi-model-corresponds-to-tcp-ip">how the OSI model corresponds to TCP/IP</h3>

<p>Some parts of the OSI model do correspond to TCP/IP. Basically for any TCP or
UDP packet you can split up the packet into different sections and give each
section a layer number.</p>

<ul>
<li>Layer 2 corresponds to Ethernet</li>
<li>Layer 3 corresponds to IP</li>
<li>Layer 4 corresponds to TCP or UDP (or ICMP etc)</li>
<li>Layer 7 corresponds to whatever is inside the TCP or UDP packet (for example a DNS query)</li>
</ul>

<p>Here&rsquo;s a diagram from my <a href="https://wizardzines.com/zines/networking/">Networking! ACK!</a> zine showing how you can
assign layers to different parts of a packet.</p>

<p><small>
I just noticed that for some reason this is a UDP packet containing the start
of a HTTP request which is unrealistic, but let&rsquo;s go with it, you could make a
UDP packet like that if you wanted :). I think I did that to save space.
</small></p>

<p><img src="https://jvns.ca/images/networking-layers.png"></p>

<p>Now that we&rsquo;ve talked about how the OSI model does correspond to TCP/IP, let&rsquo;s
talk about how it doesn&rsquo;t!</p>

<h3 id="people-refer-to-layers-2-3-4-and-7-all-the-time">people refer to layers 2, 3, 4, and 7 all the time</h3>

<p>It&rsquo;s important to know about the OSI model because the terms &ldquo;layer 2&rdquo;, &ldquo;layer
3&rdquo;, &ldquo;layer 4&rdquo; and &ldquo;layer 7&rdquo; are used a LOT. You&rsquo;ll hear about &ldquo;layer 2
routing&rdquo;, &ldquo;layer 7 load balancers&rdquo;, &ldquo;layer 4 load balancers&rdquo;, etc.</p>

<p>So even thought I don&rsquo;t really use those terms myself when talking about
networking, I need to understand them to be able to read documentation and
understand what people are saying.</p>

<h3 id="there-s-no-layer-5-or-6-in-tcp-ip">there&rsquo;s no layer 5 or 6 in TCP/IP</h3>

<p>I&rsquo;ve heard a few different interpretations of what layers 5 or 6 could mean in
TCP/IP, including:</p>

<ul>
<li>TLS is layer 6</li>
<li>TCP is actually layers 5 + 6 + 7 smushed together</li>
</ul>

<p>But layers 5 and 6 definitely don&rsquo;t have a clear correspondence like &ldquo;every
layer has a corresponding header in the TCP packet&rdquo; the way layers 2, 3, and 4
do.</p>

<p>And I&rsquo;ve never seen anyone actually refer to layer 5 or 6 in practice when
talking about TCP/IP, even though people talk about layers 2, 3, 4, and 7 all
the time.</p>

<h3 id="what-layer-is-an-arp-packet">what layer is an ARP packet?</h3>

<p>Also, some parts of TCP/IP don&rsquo;t fit well into the OSI model even around
layers 2-4 &ndash; for example, what layer is an ARP packet?</p>

<p>ARP is a protocol for discovering what MAC address corresponds to an IP
address: when a machine wants to know who has a certain IP address, it sends
out an ARP message saying &ldquo;help! who is 192.168.1.1?&rdquo; and it&rsquo;ll get a response
from the owner of the IP saying &ldquo;it&rsquo;s me! I&rsquo;m 192.168.1.1&rdquo;</p>

<p>ARP packets contain IP addresses and IP addresses are layer 3, but when people
talk about &ldquo;layer 3&rdquo; packets they usually mean a packet which have an IP header, and
ARP packets don&rsquo;t have an IP header, they just have an Ethernet header and
then some data on top of that which contains an IP.</p>

<h3 id="the-osi-model-is-a-literal-description-of-some-obsolete-protocols">the OSI model is a literal description of some obsolete protocols</h3>

<p>So, if the OSI model doesn&rsquo;t literally describe TCP/IP, where did it come
from?</p>

<p>Some very brief research on Wikipedia says that in addition to an abstract
description of 7 layers, the OSI model also contained a <a href="https://en.wikipedia.org/wiki/OSI_protocols">bunch of specific
protocols implementing those
layers</a>. Apparently this happened
during the <a href="https://en.wikipedia.org/wiki/Protocol_Wars">Protocol Wars</a> in the
70s and 80s, where the OSI model lost and TCP/IP won.</p>

<p>This explains why the OSI model doesn&rsquo;t really correspond that well to TCP/IP,
since if the OSI protocols had &ldquo;won&rdquo; then the OSI model <em>would</em> correspond
exactly to how internet networking actually works.</p>

<h3 id="you-can-talk-about-specific-network-protocols-instead-of-using-layer-numbers">you can talk about specific network protocols instead of using layer numbers</h3>

<p>When talking about networking, instead of using numbered layers I like to
instead just talk about specific networking protocols I mean. Like
instead of &ldquo;layer 2&rdquo; I&rsquo;ll use something like &ldquo;Ethernet&rdquo; or &ldquo;MAC address&rdquo;. I&rsquo;ve
written many blog posts talking about MAC addresses and zero posts talking
about &ldquo;layer 2&rdquo;.</p>

<p>As another example, when talking about load balancers usually I say &ldquo;HTTP load
balancer&rdquo; instead of &ldquo;layer 7 load balancer&rdquo;. Basically every layer 7 load
balancer I&rsquo;ve used has been a HTTP load balancer, and if it&rsquo;s not using HTTP
then I&rsquo;d rather know which other protocol it&rsquo;s using!</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>Hopefully this will help clear things up for somebody!  I wish someone had
told me when I started learning networking that I could just learn
approximately how layers 2, 3, 4, and 7 of the OSI model relate to TCP/IP and
then ignore everything else about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I put all of my comics online!]]></title>
    <link href="https://jvns.ca/blog/2021/05/02/publishing-comics/"/>
    <updated>2021-05-02T11:41:59+00:00</updated>
    <id>https://jvns.ca/blog/2021/05/02/publishing-comics/</id>
    <content type="html"><![CDATA[

<p>Hello! As you probably know, I write a lot of comics about programming, and I publish collections of them as zines you can buy at <a href="https://wizardzines.com">https://wizardzines.com</a>.</p>

<p>I also usually post the comics on Twitter as I write them. But there are a lot of problems with just posting them to Twitter, like:</p>

<ul>
<li><strong>the pages are hard to find</strong>. For example, if you want to find the one on
<code>socat</code>, you can <a href="https://twitter.com/search?q=socat%20from%3Ab0rk&amp;src=typed_query&amp;f=live">search twitter</a>
and you&rsquo;ll find it, but then you have to somehow magically guess what words I
used in the tweet, and also sort through a bunch of other tweets.</li>
<li><strong>they&rsquo;re annoying to link to</strong>. Twitter isn&rsquo;t really the best user interface for this sort of thing.</li>
<li><strong>I can&rsquo;t make updates</strong>. Twitter doesn&rsquo;t have an edit button!</li>
<li><strong>work that never made it into a zine is basically impossible to find</strong>. For example I
wrote 12 pages of a sequel to &ldquo;bite size linux&rdquo; but never quite finished it,
and it&rsquo;s basically impossible for anyone to find those pages. Or I have a
couple of <a href="https://wizardzines.com/comics/kubernetes-components/">pages</a> about <a href="https://wizardzines.com/comics/scenes-from-kubernetes/">Kubernetes</a> I wrote one time that will probably never
make it into a zine either.</li>
</ul>

<p>If someone wants to see the page on socat, I&rsquo;d really like them to just be able to find it at <a href="https://wizardzines.com/comics/socat">https://wizardzines.com/comics/socat</a></p>

<h3 id="now-they-re-all-online-in-one-place">now they&rsquo;re all online in one place!</h3>

<p>the tl;dr is that (almost) all of my comics are now online in one place at <a href="https://wizardzines.com/comics">https://wizardzines.com/comics</a>. Hooray!</p>

<h3 id="you-can-search">you can search!</h3>

<p>There are 273 comics right now which is a lot, so I&rsquo;ve added a very simple
search using <a href="https://listjs.com/">list.js</a>. Here&rsquo;s what it looks like.</p>

<p><img src="https://jvns.ca/images/dns-search.png"></p>

<p>It searches based on the title and also a few keywords I manually added, which
is why &ldquo;authoritative nameservers&rdquo; matches the search &ldquo;dns&rdquo;.</p>

<p>I wrote a small custom search function that only matches starting at the
beginning of the word, so that the search &ldquo;tar&rdquo; doesn&rsquo;t give you &ldquo;start&rdquo;. It
feels pretty good to use.</p>

<p>If you want to read the pages from the Bite Size Linux sequel I mentioned that
I started writing 2 years ago and never finished, you can search for &ldquo;linux2&rdquo;.</p>

<h3 id="what-s-not-there">what&rsquo;s not there</h3>

<p>Some parts of the zines aren&rsquo;t there just because it wouldn&rsquo;t make sense &ndash; for
example most of the zines have an introduction and a conclusion page, and those
pages don&rsquo;t really work as a standalone comic.</p>

<p>Also a lot of the pages from my free zines aren&rsquo;t there yet because a lot of
them don&rsquo;t work as well as standalone pages. I might add them in the future
though, we&rsquo;ll see.</p>

<p>Other things that are missing that I think I will add:</p>

<ul>
<li>the comics from <a href="https://drawings.jvns.ca">https://drawings.jvns.ca</a></li>
<li>any other pages I&rsquo;ve posted over the years on Twitter that aren&rsquo;t in a zine,
assuming that I can find them (for example <a href="https://twitter.com/b0rk/status/1056560207562711041">scenes from distributed systems</a>)</li>
</ul>

<h3 id="why-i-didn-t-do-this-earlier">why I didn&rsquo;t do this earlier</h3>

<p>This isn&rsquo;t actually that hard of a change to make technically &ndash; I just needed
to write some Python scripts and write a little search function.</p>

<p>But I felt a bit worried about making all the comics more easily available
online because &ndash; what if I put them online and then nobody wants to buy the
zines anymore?</p>

<p>I decided this week not to worry about that and just do it because I&rsquo;m really
excited about being able to easily link any comic that I want.</p>

<p>The zine business is going really well in general so I think it&rsquo;s a lot nicer
to operate with a spirit of abundance instead of a spirit of scarcity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on building debugging puzzles]]></title>
    <link href="https://jvns.ca/blog/2021/04/16/notes-on-debugging-puzzles/"/>
    <updated>2021-04-16T09:02:55+00:00</updated>
    <id>https://jvns.ca/blog/2021/04/16/notes-on-debugging-puzzles/</id>
    <content type="html"><![CDATA[

<p>Hello! This week I started building some choose-your-own-adventure-style puzzles about
debugging networking problems. I&rsquo;m pretty excited about it and I&rsquo;m trying to organize my thoughts so here&rsquo;s a blog post!</p>

<p>The two I&rsquo;ve made so far are:</p>

<ul>
<li><a href="https://mysteries.wizardzines.com/connection-timeout.html">The Case of the Connection Timeout</a></li>
<li><a href="https://mysteries.wizardzines.com/slow-website.html">The Case of the Slow Website</a></li>
</ul>

<p>I&rsquo;ll talk about how I came to this idea, design decisions I made, how it works,
what I think is hard about making these puzzles, and some feedback I&rsquo;ve gotten so far.</p>

<h3 id="why-this-choose-your-own-adventure-format">why this choose-your-own-adventure format?</h3>

<p>I&rsquo;ve been thinking a lot about DNS recently, and how to help people
troubleshoot their DNS issues. So on Tuesday I was sitting in a park with a
couple of friends chatting about this.</p>

<p>We started out by talking about the idea of flowcharts (&ldquo;here&rsquo;s a flowchart
that will help you debug any DNS problem&rdquo;). I&rsquo;ve don&rsquo;t think I&rsquo;ve ever seen a
flowchart that I found helpful in solving a problem, so I found it really hard
to imagine creating one &ndash; there are so many possibilities! It&rsquo;s hard to be
exhaustive! It would be disappointing if the flowchart failed and didn&rsquo;t give
you your answer!</p>

<p>But then someone mentioned choose-your-own-adventure games, and I thought about
something I <strong>could</strong> relate to &ndash; debugging a problem together with someone
who knows things that I don&rsquo;t!</p>

<p>So I thought &ndash; what if I made a choose-your-own-adventure game where you&rsquo;re
given the symptoms of a specific networking bug, and you have to figure out how
to diagnose it?</p>

<p>I got really excited about this and immediately went home and started putting
something together in Twine.</p>

<p>Here are some design decisions I&rsquo;ve made so far. Some of them might change.</p>

<h3 id="design-decision-the-mystery-has-1-specific-bug">design decision: the mystery has 1 specific bug</h3>

<p>Each mystery has one very specific bug, ideally a bug that I&rsquo;ve actually run
into in the past. Your mission is to figure out the cause of the bug and fix
it.</p>

<h3 id="design-decision-show-people-the-actual-output-of-the-tools-they-re-using">design decision: show people the actual output of the tools they&rsquo;re using</h3>

<p>All of the bugs I&rsquo;m starting with are networking issues, and the way you solve
them is to use various tools (like dig, curl, tcpdump, ping, etc) to get more
information.</p>

<p>Originally I thought of writing the game like this:</p>

<ol>
<li>You choose &ldquo;Use curl&rdquo;</li>
<li>It says &ldquo;You run <code>&lt;command&gt;</code>. You see that the output tells you <code>&lt;interpretation&gt;</code>&ldquo;</li>
</ol>

<p>But I realized that immediately interpreting the output of a command for
someone is extremely unrealistic &ndash; one of the biggest problems with using some
of these command line networking tools is that their output is hard to interpret!</p>

<p>So instead, the puzzle:</p>

<ol>
<li>Asks what tool you want to use</li>
<li>Tells you what command they ran, and shows you the output of the command</li>
<li>Asks you to interpret the output (you type it in in a freeform text box)</li>
<li>Tells you the &ldquo;correct&rdquo; interpretation of the output and shows you how you
could have figured it out (by highlighting the relevant parts of the output)</li>
</ol>

<p>This really lines up with how I&rsquo;ve learned about these tools in real life &ndash; I
don&rsquo;t learn about how to read all of the output all at once, I learn it in bits
and pieces by debugging real problems.</p>

<h3 id="design-decision-make-the-output-realistic">design decision: make the output realistic</h3>

<p>This is sort of obvious, but in order to give someone output to help them
diagnose a bug, the output needs to be a realistic representation of what would
actually happen.</p>

<p>I&rsquo;ve been doing this by reproducing the bug in a virtual machine (or on my
laptop), and then running the commands in the same way I would to fix the bug
in real life and paste their output.</p>

<p>Reproducing the bug isn&rsquo;t always easy, but once I&rsquo;ve reproduced it it
makes building the puzzle much more straightforward than trying to imagine what
tcpdump would theoretically output in a given situation.</p>

<h3 id="design-decision-let-people-collect-knowledge-throughout-the-mystery">design decision: let people collect &ldquo;knowledge&rdquo; throughout the mystery</h3>

<p>When I debug, I think about it as slowly collecting new pieces of information
as I go. So in this mystery, every time you figure out a new piece of
information, you get a little box that looks like this:</p>

<p><img src="https://jvns.ca/images/newinfo.png"></p>

<p>And in the sidebar, you have a sort of &ldquo;inventory&rdquo; that lists all of the
knowledge you&rsquo;ve collected so far. It looks like this:</p>

<p><img src="https://jvns.ca/images/sidebar-mystery.png"></p>

<h3 id="design-decision-you-always-figure-out-the-bug">design decision: you always figure out the bug</h3>

<p>My friend Sumana pointed out an interesting difference between this and normal
choose-your-own-adventure games: in the choose-your-own-adventure games I grew
up reading, you lose a lot! You make the wrong choice, and you fall into a pit
and die.</p>

<p>But that&rsquo;s not how debugging works in my experience. When debugging, if you
make a &ldquo;wrong&rdquo; choice (for example by making a guess about the bug that isn&rsquo;t
correct), there&rsquo;s no cost except your time! So you can always go back, keep
trying, and eventually figure out what&rsquo;s going on.</p>

<p>I think that &ldquo;you always win&rdquo; is sort of realistic in the sense that with any bug you can always figure out what the bug is, given:</p>

<ol>
<li>enough time</li>
<li>enough understanding of how the systems you&rsquo;re debugging work</li>
<li>tools that can give you information about what&rsquo;s happening</li>
</ol>

<p>I&rsquo;m still not sure if I want all bugs to result in &ldquo;you fix the bug!&rdquo; &ndash;
sometimes bugs are impossible to fix if they&rsquo;re caused by a system that&rsquo;s
outside of your control! One really interesting idea Sumana had was to have the
resolution sometimes be to tell someone else (like your ISP) about the issue,
which made me think about how it&rsquo;s a useful skill to be able to write a really
clear and convincing bug report so that the people with the ability to fix the
bug will be able to easily recognize that you&rsquo;ve accurately diagnosed the
issue.</p>

<h3 id="design-decision-include-red-herrings-sometimes">design decision: include red herrings sometimes</h3>

<p>In debugging in real life, there are a lot of red herrings! Sometimes you see
something that looks weird, and you spend three hours looking into it, and then
you realize that wasn&rsquo;t it at all.</p>

<p>One of the mysteries right now has a red herring, and the way I came up with it was
that I ran a command and I thought &ldquo;wait, the output of that is pretty
confusing, it&rsquo;s not clear how to interpret that&rdquo;. So I just included the
confusing output in the mystery and said &ldquo;hey, what do you think it means?&rdquo;.</p>

<p>One thing I like about including red herrings is that it lets me show how you
can prove what the cause of the bug <strong>isn&rsquo;t</strong> which is even harder than proving
what the cause of the bug is.</p>

<h3 id="design-decision-use-free-form-text-boxes">design decision: use free form text boxes</h3>

<p>Here&rsquo;s an example of what it looks like to be asked to interpret some output.
You&rsquo;re asked a question and you fill in the answer in a text box.</p>

<p><img src="https://jvns.ca/images/textboxes.png"></p>

<p>I think I like using free form text boxes instead of multiple choice because it
feels a little more realistic to me &ndash; in real life, when you see some output
like this, you don&rsquo;t get a list of choices!</p>

<h3 id="design-decision-don-t-do-anything-with-what-you-enter-in-the-text-box">design decision: don&rsquo;t do anything with what you enter in the text box</h3>

<p>No matter what you enter in the text box (or if you say &ldquo;I don&rsquo;t know&rdquo;),
exactly the same thing happens. It&rsquo;ll send you to a page that tells you the
answer and explains the reasoning. So you have to think about what you
think the answer might be, but if you get it &ldquo;wrong&rdquo;, it&rsquo;s no big deal.</p>

<p>The reason I&rsquo;m doing this is basically &ldquo;it&rsquo;s very easy to implement&rdquo;, but I
think there&rsquo;s maybe also something nice about it for the person using it &ndash; if
you don&rsquo;t know, it&rsquo;s totally okay! You can learn something new and keep moving!
You don&rsquo;t get penalized for your &ldquo;wrong&rdquo; answers in any way.</p>

<h3 id="design-decision-the-epilogue">design decision: the epilogue</h3>

<p>At the end of the game, there&rsquo;s a very short epilogue where it talks about how
likely you are to run into this bug in real life / how realistic this is. I
think I need to expand on this to answer other questions people might have had
while going through it, but I think it&rsquo;s going to be a nice place to wrap up
loose ends.</p>

<h3 id="how-long-each-one-takes-to-play-5-minutes">how long each one takes to play: 5 minutes</h3>

<p>People seem to report so far that each mystery takes about 5 minutes to play,
which feels reasonable to me. I think I&rsquo;m most likely to extend this by making
lots of different 5-minute mysteries rather than making one really long
mystery, but we&rsquo;ll see.</p>

<h3 id="what-s-hard-reproducing-the-bug">what&rsquo;s hard: reproducing the bug</h3>

<p>Figuring out how to reproduce a given bug is actually not that easy &ndash; I think
I want to include some pretty weird bugs, and setting up a computer where that
bug is happening in a realistic way isn&rsquo;t actually that easy. I think this just
takes some work and creativity though.</p>

<h3 id="what-s-hard-giving-realistic-options">what&rsquo;s hard: giving realistic options</h3>

<p>The most common critique I got was of the form &ldquo;In this situation I would
have done X but you didn&rsquo;t include X as an option&rdquo;. Some examples of X: &ldquo;ping the
problem host&rdquo;, &ldquo;ssh to the problem host and run tcpdump there&rdquo;, &ldquo;look at the
log file&rdquo;, &ldquo;use netstat&rdquo;, etc.</p>

<p>I think it&rsquo;s possible to make a lot of progress on this with
playtesting &ndash; if I playtest a mystery with a bunch of people and ask them to
tell me when there was an option they wish they had, I can add that option
pretty easily!</p>

<p>Because I can actually reproduce the bug, providing an option like &ldquo;run
netstat&rdquo; is pretty straightforward &ndash; all I have to do is go to the VM where
I&rsquo;ve reproduced the bug, run <code>netstat</code>, and put the output into the game.</p>

<p>A couple of people also said that the game felt too &ldquo;linear&rdquo; or didn&rsquo;t branch
enough. I&rsquo;m curious about whether that will naturally come out of having more
realistic options.</p>

<h3 id="how-it-works-it-s-a-twine-game">how it works: it&rsquo;s a Twine game!</h3>

<p>I felt like Twine was the obvious choice for this even though I&rsquo;d never used it
before &ndash; I&rsquo;d heard so many good things about it over the years.</p>

<p>You can see all of the source code for The Case of the Connection Timeout in <a href="https://github.com/jvns/twine-stories/blob/2914c4326e3ff760a0187b2cfb15161928d6335b/connection-timeout.twee">connection-timeout.twee</a> and <a href="https://github.com/jvns/twine-stories/blob/2914c4326e3ff760a0187b2cfb15161928d6335b/common.twee">common.twee</a>, which has some shared code between all the games.</p>

<p>A few notes about using Twine:</p>

<ul>
<li>I&rsquo;m using SugarCube, the <a href="https://www.motoslave.net/sugarcube/2/docs/">sugarcube docs are very good</a></li>
<li>I&rsquo;m using <a href="https://www.motoslave.net/tweego/">tweego</a> to translate the <code>.twee</code> files in to a HTML page. I started out using the visual Twine editor to do my editing but switched to <code>tweego</code> pretty quickly because I wanted to use version control and have a more text-based workflow.</li>
<li>The final output is one big HTML file that includes all the images and CSS and Javascript inline. The final HTML files are about 800K which seems reasonable to me.</li>
<li>I base64-encode all the images in the game and include them inline in the file</li>
<li>The <a href="https://twinery.org/wiki/">Twine wiki</a> and forums have a lot of great information and between the Twine wiki, the forums, and the Sugarcube docs I could pretty easily find answers to all my questions.</li>
</ul>

<p>I used pretty much the exact Twine workflow from Em Lazerwalker&rsquo;s great post <a href="https://dev.to/lazerwalker/a-modern-developer-s-workflow-for-twine-4imp">A Modern Developer&rsquo;s Workflow For Twine</a>.</p>

<p>I won&rsquo;t explain how Twine works because it has great documentation and it would make this post way too long.</p>

<h3 id="some-feedback-so-far">some feedback so far</h3>

<p>I posted this on Twitter and asked for feedback. Some common pieces of feedback I got:</p>

<p>things people liked:</p>

<ul>
<li>maybe 180 &ldquo;I love this, this was so fun, I learned something new&rdquo;</li>
<li>A bunch of people specifically said that they liked learning how to interpret tcpdump&rsquo;s output format</li>
<li>A few people specifically mentioned that they liked the &ldquo;what you know&rdquo; list and the mechanic of hunting for clues and how it breaks down the debugging process.</li>
</ul>

<p>some suggestions for improvements:</p>

<ul>
<li>Like I mentioned before, lots of people said &ldquo;I wanted to try X but it wasn&rsquo;t an option&rdquo;</li>
<li>One of the puzzles had a resolution to the bug that some people found unsatisfying (they felt it was more of a workaround than a fix, which I agreed with). I updated it to add a different resolution that was more satisfying.</li>
<li>There were some technical issues (it could be more mobile-friendly, one of the images was hard to read, I needed to add a &ldquo;Submit&rdquo; button to one of the forms)</li>
<li>Right now the way the text boxes work is that no matter what you type, the exact same thing happens. Some people found this a bit confusing, like  &ldquo;why did it act like I answered correctly if my answer was wrong&rdquo;. This definitely needs some work.</li>
</ul>

<h3 id="some-goals-of-this-project">some goals of this project</h3>

<p>Here&rsquo;s what I think the goals of this project are:</p>

<ol>
<li>help people learn about <strong>tools</strong> (like tcpcdump, dig, and curl). How do you use each tool? What questions can they be used to answer? How do you interpret their output?</li>
<li>help people learn about <strong>bugs</strong>. There are some super common bugs that we run into over and over, and once you see a bug once it&rsquo;s easier to recognize the same bug in the future.</li>
<li>help people get better at the <strong>debugging process</strong> (gathering data, asking questions)</li>
</ol>

<h3 id="what-experience-is-this-trying-to-imitate">what experience is this trying to imitate?</h3>

<p>Something I try to keep in mind with all my projects is &ndash; what real-life
experience does this reproduce? For example, I kind of think of my zines as
being the experience &ldquo;your coworker explains something to you in a really clear
way&rdquo;.</p>

<p>I think the experience here might be &ldquo;you&rsquo;re debugging a problem together with
your coworker and they&rsquo;re really knowledgeable about the tools you&rsquo;re using&rdquo;.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>I&rsquo;m pretty excited about this project right now &ndash; I&rsquo;m going to build at least
a couple more of these and see how it goes! If things go well I might make this
into my first non-zine thing for sale &ndash; maybe it&rsquo;ll be a collection of 12
small debugging mysteries! We&rsquo;ll see.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What problems do people solve with strace?]]></title>
    <link href="https://jvns.ca/blog/2021/04/03/what-problems-do-people-solve-with-strace/"/>
    <updated>2021-04-03T09:06:28+00:00</updated>
    <id>https://jvns.ca/blog/2021/04/03/what-problems-do-people-solve-with-strace/</id>
    <content type="html"><![CDATA[

<p>Yesterday I <a href="https://twitter.com/b0rk/status/1378014888405168132">asked on Twitter about what problems people are solving with strace</a> and
as usual everyone really delivered! I got 200 answers and then spent a bunch of
time manually categorizing them into 9 categories of problems.</p>

<p>All of the problems are about either finding files a program depends on,
figuring out why a program is stuck or slow, or finding out why a program is
failing. These generally matched up with what I use strace for myself, but
there were some things I hadn&rsquo;t thought of too!</p>

<p>I&rsquo;m not going to explain what strace is in this post but I have a <a href="https://wizardzines.com/zines/strace">free zine about it</a> and <a href="https://www.youtube.com/watch?v=4pEHfGKB-OE">a talk</a> and <a href="https://jvns.ca/categories/strace">lots of blog posts</a>.</p>

<h3 id="problem-1-where-s-the-config-file">problem 1: where&rsquo;s the config file?</h3>

<p>The #1 most popular problem was &ldquo;this program has a configuration file and I don&rsquo;t
know where it is&rdquo;. This is probably my most common use for strace too, because it&rsquo;s such a simple question.</p>

<p>This is great because there are a million ways for a program to document where
its config file is (in a man page, on its website, in <code>--help</code>, etc), but
there&rsquo;s only one way for it to actually open it (with a system call!)</p>

<h3 id="problem-2-what-other-files-does-this-program-depend-on">problem 2: what other files does this program depend on?</h3>

<p>You can also use strace to find other types of files a program depends on, like:</p>

<ul>
<li>dynamically linked libraries (&ldquo;why is my program loading the wrong version of this <code>.so</code> file?&ldquo;) like <a href="https://jvns.ca/blog/2014/03/10/debugging-shared-library-problems-with-strace/">this ruby problem I debugged in 2014</a></li>
<li>where it&rsquo;s looking for its Ruby gems (Ruby specifically came up a few times!)</li>
<li>SSL root certificates</li>
<li>a game&rsquo;s save files</li>
<li>a closed-source program&rsquo;s data files</li>
<li><a href="https://indexandmain.com/post/shrink-node-modules-with-refining">which node_modules files aren&rsquo;t being used</a></li>
</ul>

<h3 id="problem-3-why-is-this-program-hanging">problem 3: why is this program hanging?</h3>

<p>You have a program, it&rsquo;s just sitting there doing nothing, what&rsquo;s going
on? This one is especially easy to answer because a lot of the time you just
need to run <code>strace -p PID</code> and look at what system call is currently running.
You don&rsquo;t even have to look through hundreds of lines of output!</p>

<p>The answer is usually &lsquo;waiting for some kind of I/O&rsquo;. Some possible answers for &ldquo;why is this stuck&rdquo; (though there are a lot more!):</p>

<ul>
<li>it&rsquo;s polling forever on a <code>select()</code></li>
<li>it&rsquo;s <code>wait()</code>ing for a subprocess to finish</li>
<li>it&rsquo;s making a network request to something that isn&rsquo;t responding</li>
<li>it&rsquo;s doing <code>write()</code> but it&rsquo;s blocked because the buffer is full</li>
<li>it&rsquo;s doing a <code>read()</code> on stdin and it&rsquo;s waiting for input</li>
</ul>

<p>Someone also gave a nice example of using strace to debug a stuck <code>df</code>: &lsquo;with strace df -h you can find the stuck mount and unmount it&rdquo;.</p>

<h3 id="problem-4-is-this-program-stuck">problem 4: is this program stuck?</h3>

<p>A variation on the previous one: sometimes a program has been running for
longer than you expected, and you just want to know if it&rsquo;s stuck or of it&rsquo;s
still making progress.</p>

<p>As long as the program makes system calls while it&rsquo;s running, this is super
easy to answer with strace &ndash; just strace it and see if it&rsquo;s making new
system calls!</p>

<h3 id="problem-5-why-is-this-program-slow">problem 5: why is this program slow?</h3>

<p>You can use strace as a sort of coarse profiling tool &ndash; <code>strace -t</code> will show
the timestamp of each system call, so you can look for big gaps and find the culprit.</p>

<p>Here are 9 short stories from Twitter of people using strace to debug &ldquo;why is this program slow?&rdquo;.</p>

<ul>
<li>Back in 2000, a Java-based web site that I helped support was dying under
modest load: pages loaded slowly, if at all. We straced the J2EE application
server and found that it was reading class files one. byte. at. a. time. Devs
weren&rsquo;t using BufferedReader, classic Java mistake.</li>
<li>Optimizing app startup times&hellip; running strace can be an eye-opening
experience, in terms of the amount of unnecessary file system interaction
going on (e.g. open/read/close on the same config file over and over again;
loading gobs of font files over a slow NFS mount, etc)</li>
<li>Asked myself why reading from session files in PHP (usually &lt;100 bytes)
was incredibly slow. Turned out some <code>flock</code>-syscalls took ~60s</li>
<li>A program was behaving abnormally slow. Used strace to figure out it was
re-initializing its internal pseudo-random number generator on every request
by reading from /dev/random and exhausting entropy</li>
<li>Last thing I remember was attaching to a job worker and seeing just how many network calls it was making (which was unexpected).</li>
<li>Why is this program so slow to start?  strace shows it opening/reading the same config file thousands of times.</li>
<li>Server using 100% CPU time randomly with low actual traffic. Turns out it&rsquo;s hitting the number of open files limit accepting a socket, and retrying forever after getting EMFILE and not reporting it.</li>
<li>A workflow was running super slow but no logs, ends up it was trying to do a post request that was taking 30s before timing out and then retrying 5 times&hellip; ends up the backend service was overwhelmed but also had no visibility</li>
<li>using strace to notice that gethostbyname() is taking a long time to return (you can&rsquo;t see the <code>gethostbyname</code> directly but you can see the DNS packets in strace)</li>
</ul>

<h3 id="problem-6-hidden-permissions-errors">problem 6: hidden permissions errors</h3>

<p>Sometimes a program is failing for a mysterious reason, but the problem is just
that there&rsquo;s some file that it doesn&rsquo;t have permission to open. In an ideal
world programs would report those errors (&ldquo;Error opening file /dev/whatever:
permission denied&rdquo;), but of course the world is not perfect, so strace can
really help with this!</p>

<p>This is actually the most recent thing I used strace for: I was using an
AxiDraw pen plotter and it printed out an inscrutable error message when I
tried to start it. I <code>strace</code>d it and it turned out that my user just didn&rsquo;t
have permission to open the USB device.</p>

<h3 id="problem-7-what-command-line-arguments-are-being-used">problem 7: what command line arguments are being used?</h3>

<p>Sometimes a script is running another program, and you want to know what
command line flags it&rsquo;s passing!</p>

<p>A couple of examples from Twitter:</p>

<ul>
<li>find what compiler flags are actually being used to build some code</li>
<li>a command was failing due to having too long a command line</li>
</ul>

<h3 id="problem-8-why-is-this-network-connection-failing">problem 8: why is this network connection failing?</h3>

<p>Basically the goal here is just to find which domain / IP address the network
connection is being made to. You can look at the DNS request to find the domain
or the <code>connect</code> system call to find the IP.</p>

<p>In general there are a lot of stories about using strace to debug network
issues when <code>tcpdump</code> isn&rsquo;t available for some reason or just because it&rsquo;s what
the person is more familiar with.</p>

<h3 id="problem-9-why-does-this-program-succeed-when-run-one-way-and-fail-when-run-in-another-way">problem 9: why does this program succeed when run one way and fail when run in another way?</h3>

<p>For example:</p>

<ul>
<li>the same binary works on one machine, fails on another machine</li>
<li>works when you run it, fails when spawned by a systemd unit file</li>
<li>works when you run it, fails when you run it as “su - user /some/script”</li>
<li>works when you run it, fails when run as a cron job</li>
</ul>

<p>Being able to compare the strace output in both cases is very helpful. Though
my first step when debugging &ldquo;this works as my user and fails when run in a
different way on the same computer&rdquo; would be &ldquo;look at my environment
variables&rdquo;.</p>

<h3 id="problem-10-how-does-this-linux-kernel-api-work">problem 10: how does this Linux kernel API work?</h3>

<p>Another one quite a few people mentioned is figuring out how a Linux kernel
API (for example netlink, io_uring, hdparm, I2C, etc).</p>

<p>Even though these APIs are usually documented, sometimes the documentation is
confusing or there aren&rsquo;t very many examples, so often it&rsquo;s easier to just
strace an existing application and see how it interacts with the Linux kernel.</p>

<h3 id="problem-11-general-reverse-engineering">problem 11: general reverse engineering</h3>

<p>strace is also great for just generally figuring out &ldquo;how does this program
work?&ldquo;.  As a simple example of this, here&rsquo;s a blog post on <a href="https://jvns.ca/blog/2013/12/22/fun-with-strace/">figuring out how killall works using strace</a>.</p>

<h3 id="what-i-m-doing-with-this-slowly-building-some-challenges">what I&rsquo;m doing with this: slowly building some challenges</h3>

<p>The reason I&rsquo;m thinking about this is that I&rsquo;ve been slowly working on some
challenges to help people practice using strace and other command line tools.
The idea is that you&rsquo;re given a problem to solve, a terminal, and you&rsquo;re free
to solve it in any way you want.</p>

<p>So my goal is to use this to build some practice problems that you can solve
with strace that reflect the kinds of problems that people actually use it for
in real life.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>There are probably more problems that can be solved with strace that I haven&rsquo;t
covered here &ndash; I&rsquo;d love to hear what I&rsquo;ve missed!</p>

<p>I really loved seeing how many of the same uses came up over and over and over
again &ndash; at least 20 different people replied saying that they use strace to
find config files. And as always I think it&rsquo;s really delightful how such a
simple tool (&ldquo;trace system calls!&rdquo;) can be used to solve so many different
kinds of problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A tool to spy on your DNS queries: dnspeep]]></title>
    <link href="https://jvns.ca/blog/2021/03/31/dnspeep-tool/"/>
    <updated>2021-03-31T11:21:24+00:00</updated>
    <id>https://jvns.ca/blog/2021/03/31/dnspeep-tool/</id>
    <content type="html"><![CDATA[

<p>Hello! Over the last few days I made a little tool called <a href="https://github.com/jvns/dnspeep">dnspeep</a> that lets
you see what DNS queries your computer is making, and what responses it&rsquo;s getting. It&rsquo;s about <a href="https://github.com/jvns/dnspeep/blob/f5780dc822df5151f83703f05c767dad830bd3b2/src/main.rs">250 lines of Rust right now</a>.</p>

<p>I&rsquo;ll talk about how you can try it, what it&rsquo;s for, why I made it, and some problems I ran into while writing it.</p>

<h3 id="how-to-try-it">how to try it</h3>

<p>I built some binaries so you can quickly try it out.</p>

<p>For Linux (x86):</p>

<pre><code>wget https://github.com/jvns/dnspeep/releases/download/v0.1.0/dnspeep-linux.tar.gz
tar -xf dnspeep-linux.tar.gz
sudo ./dnspeep
</code></pre>

<p>For Mac:</p>

<pre><code>wget https://github.com/jvns/dnspeep/releases/download/v0.1.0/dnspeep-macos.tar.gz
tar -xf dnspeep-macos.tar.gz
sudo ./dnspeep
</code></pre>

<p>It needs to run as root because it needs access to all the DNS packets your computer is sending. This is the same reason <code>tcpdump</code> needs to run as root &ndash; it uses <code>libpcap</code> which is the same library that tcpdump uses.</p>

<p>You can also read the source and build it yourself at
<a href="https://github.com/jvns/dnspeep">https://github.com/jvns/dnspeep</a> if you don&rsquo;t want to just download binaries and
run them as root :).</p>

<h3 id="what-the-output-looks-like">what the output looks like</h3>

<p>Here&rsquo;s what the output looks like. Each line is a DNS query and the response.</p>

<pre><code>$ sudo dnspeep
query   name                 server IP      response
A       firefox.com          192.168.1.1    A: 44.235.246.155, A: 44.236.72.93, A: 44.236.48.31
AAAA    firefox.com          192.168.1.1    NOERROR
A       bolt.dropbox.com     192.168.1.1    CNAME: bolt.v.dropbox.com, A: 162.125.19.131
</code></pre>

<p>Those queries are from me going to <code>neopets.com</code> in my browser, and the
<code>bolt.dropbox.com</code> query is because I&rsquo;m running a Dropbox agent and I guess it phones
home behind the scenes from time to time because it needs to sync.</p>

<h3 id="why-make-another-dns-tool">why make another DNS tool?</h3>

<p>I made this because I think DNS can seem really mysterious when you don&rsquo;t know
a lot about it!</p>

<p>Your browser (and other software on your computer) is making DNS queries all
the time, and I think it makes it seem a lot more &ldquo;real&rdquo; when you can actually
see the queries and responses.</p>

<p>I also wrote this to be used as a debugging tool. I think the question &ldquo;is this a
DNS problem?&rdquo; is harder to answer than it should be &ndash; I get the impression that
when trying to check if a problem is caused by DNS people often use trial and
error or guess instead of just looking at the DNS responses that their
computer is getting.</p>

<h3 id="you-can-see-which-software-is-secretly-using-the-internet">you can see which software is &ldquo;secretly&rdquo; using the Internet</h3>

<p>One thing I like about this tool is that it gives me a sense for what programs
on my computer are using the Internet! For example, I found out that something
on my computer is making requests to <code>ping.manjaro.org</code> from time to time
for some reason, probably to check I&rsquo;m connected to the internet.</p>

<p>A friend of mine actually discovered using this tool that he had some corporate
monitoring software installed on his computer from an old job that he&rsquo;d
forgotten to uninstall, so you might even find something you want to remove.</p>

<h3 id="tcpdump-is-confusing-if-you-re-not-used-to-it">tcpdump is confusing if you&rsquo;re not used to it</h3>

<p>My first instinct when trying to show people the DNS queries their computer is
making was to say &ldquo;well, use tcpdump&rdquo;! And <code>tcpdump</code> does parse DNS packets!</p>

<p>For example, here&rsquo;s what a DNS query for <code>incoming.telemetry.mozilla.org.</code> looks like:</p>

<pre><code>11:36:38.973512 wlp3s0 Out IP 192.168.1.181.42281 &gt; 192.168.1.1.53: 56271+ A? incoming.telemetry.mozilla.org. (48)
11:36:38.996060 wlp3s0 In  IP 192.168.1.1.53 &gt; 192.168.1.181.42281: 56271 3/0/0 CNAME telemetry-incoming.r53-2.services.mozilla.com., CNAME prod.data-ingestion.prod.dataops.mozgcp.net., A 35.244.247.133 (180)
</code></pre>

<p>This is definitely possible to learn to read, for example let&rsquo;s break down the query:</p>

<p><code>192.168.1.181.42281 &gt; 192.168.1.1.53: 56271+ A? incoming.telemetry.mozilla.org. (48)</code></p>

<ul>
<li><code>A?</code> means it&rsquo;s a DNS <strong>query</strong> of type A</li>
<li><code>incoming.telemetry.mozilla.org.</code> is the name being qeried</li>
<li><code>56271</code> is the DNS query&rsquo;s ID</li>
<li><code>192.168.1.181.42281</code> is the source IP/port</li>
<li><code>192.168.1.1.53</code> is the destination IP/port</li>
<li><code>(48)</code> is the length of the DNS packet</li>
</ul>

<p>And in the response breaks down like this:</p>

<p><code>56271 3/0/0 CNAME telemetry-incoming.r53-2.services.mozilla.com., CNAME prod.data-ingestion.prod.dataops.mozgcp.net., A 35.244.247.133 (180)</code></p>

<ul>
<li><code>3/0/0</code> is the number of records in the response: 3 answers, 0 authority, 0 additional. I think tcpdump will only ever print out the answer responses though.</li>
<li><code>CNAME telemetry-incoming.r53-2.services.mozilla.com</code>,  <code>CNAME prod.data-ingestion.prod.dataops.mozgcp.net.</code>, and <code>A 35.244.247.133</code> are the three answers</li>
<li><code>56271</code> is the responses ID, which matches up with the query&rsquo;s ID. That&rsquo;s how you can tell it&rsquo;s a response to the request in the previous line.</li>
</ul>

<p>I think what makes this format the most difficult to deal with (as a human who
just wants to look at some DNS traffic) though is that you have to manually
match up the requests and responses, and they&rsquo;re not always on adjacent lines.
That&rsquo;s the kind of thing computers are good at!</p>

<p>So I decided to write a little program (<code>dnspeep</code>) which would do this matching
up and also remove some of the information I felt was extraneous.</p>

<h3 id="problems-i-ran-into-while-writing-it">problems I ran into while writing it</h3>

<p>When writing this I ran into a few problems.</p>

<ul>
<li>I had to patch the <code>pcap</code> crate to make it work properly with Tokio on Mac OS (<a href="https://github.com/ebfull/pcap/pull/168">this change</a>). This was one of those bugs which took many hours to figure out and 1 line to fix :)</li>
<li>Different Linux distros seem to have different versions of <code>libpcap.so</code>, so I couldn&rsquo;t easily distribute a binary that dynamically links libpcap
(you can see other people having the same problem <a href="https://github.com/google/gopacket/issues/734">here</a>). So I decided
to statically compile libpcap into the tool on Linux. I still don&rsquo;t really
know how to do this properly in Rust, but I got it to work by copying the
<code>libpcap.a</code> file into <code>target/release/deps</code> and then just running <code>cargo build</code>.</li>
<li>The <code>dns_parser</code> crate I&rsquo;m using doesn&rsquo;t support all DNS query types, only
the most common ones. I probably need to switch to a different crate for
parsing DNS packets but I haven&rsquo;t found the right one yet.</li>
<li>Becuase the <code>pcap</code> interface just gives you raw bytes (including the Ethernet frame), I needed to <a href="https://github.com/jvns/dnspeep/blob/f5780dc822df5151f83703f05c767dad830bd3b2/src/main.rs#L136">write code to figure out how many bytes to strip from the beginning to get the packet&rsquo;s IP header</a>. I&rsquo;m pretty sure there are some cases I&rsquo;m still missing there.</li>
</ul>

<p>I also had a hard time naming it because there are SO MANY DNS tools already
(dnsspy! dnssnoop! dnssniff! dnswatch!). I basically just looked at every
synonym for &ldquo;spy&rdquo; and then picked one that seemed fun and did not already have
a DNS tool attached to it.</p>

<p>One thing this program doesn&rsquo;t do is tell you which process made the DNS query,
there&rsquo;s a tool called <a href="https://github.com/lilydjwg/dnssnoop">dnssnoop</a> I found that does that.
It uses eBPF and it looks cool but I haven&rsquo;t tried it.</p>

<h3 id="there-are-probably-still-lots-of-bugs">there are probably still lots of bugs</h3>

<p>I&rsquo;ve only tested this briefly on Linux and Mac and I already know of at least
one bug (caused by not supporting enough DNS query types), so please report
problems you run into!</p>

<p>The bugs aren&rsquo;t dangerous though &ndash; because the libpcap interface is read-only
the worst thing that can happen is that it&rsquo;ll get some input it doesn&rsquo;t
understand and print out an error or crash.</p>

<h3 id="writing-small-educational-tools-is-fun">writing small educational tools is fun</h3>

<p>I&rsquo;ve been having a lot of fun writing small educational DNS tools recently.</p>

<p>So far I&rsquo;ve made:</p>

<ul>
<li><a href="https://dns-lookup.jvns.ca">https://dns-lookup.jvns.ca</a> (a simple way to make DNS queries)</li>
<li><a href="https://dns-lookup.jvns.ca/trace.html">https://dns-lookup.jvns.ca/trace.html</a> (shows you exactly what happens behind the scenes when you make a DNS query)</li>
<li>this tool (<code>dnspeep</code>)</li>
</ul>

<p>Historically I&rsquo;ve mostly tried to explain existing tools (like <code>dig</code> or
<code>tcpdump</code>) instead of writing my own tools, but often I find that the output of
those tools is confusing, so I&rsquo;m interested in making more friendly ways to see
the same information so that everyone can understand what DNS queries their
computer is making instead of just tcpdump wizards :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get better at programming by learning how things work]]></title>
    <link href="https://jvns.ca/blog/learn-how-things-work/"/>
    <updated>2021-03-24T15:33:37+00:00</updated>
    <id>https://jvns.ca/blog/learn-how-things-work/</id>
    <content type="html"><![CDATA[

<p>When we talk about getting better at programming, we often talk about testing,
writing reusable code, design patterns, and readability.</p>

<p>All of those things are important. But in this blog post, I want to talk about
a different way to get better at programming: learning how the systems you&rsquo;re
using work! This is the main way I approach getting better at programming.</p>

<h3 id="examples-of-how-things-work">examples of &ldquo;how things work&rdquo;</h3>

<p>To explain what I mean by &ldquo;how things work&rdquo;, here are some different types of
programming and examples of what you could learn about how they work.</p>

<p>Frontend JS:</p>

<ul>
<li>how the event loop works</li>
<li>HTTP methods like GET and POST</li>
<li>what the DOM is and what you can do with it</li>
<li>the same-origin policy and CORS</li>
</ul>

<p>CSS:</p>

<ul>
<li>how inline elements are rendered differently from block elements</li>
<li>what the &ldquo;default flow&rdquo; is</li>
<li>how flexbox works</li>
<li>how CSS decides which selector to apply to which element (the &ldquo;cascading&rdquo;
part of the cascading style sheets)</li>
</ul>

<p>Systems programming:</p>

<ul>
<li>the difference between the stack and the heap</li>
<li>how virtual memory works</li>
<li>how numbers are represented in binary</li>
<li>what a symbol table is</li>
<li>how code from external libraries gets loaded (e.g. dynamic/static linking)</li>
<li>Atomic instructions and how they&rsquo;re different from mutexes</li>
</ul>

<h3 id="you-can-use-something-without-understanding-how-it-works-and-that-can-be-ok">you can use something without understanding how it works (and that can be ok!)</h3>

<p>We work with a LOT of different systems, and it&rsquo;s unreasonable to expect that
every single person understands everything about all of them. For example, many
people write programs that send email, and most of those people probably don&rsquo;t
understand everything about how email works. Email is really complicated!
That&rsquo;s why we have abstractions.</p>

<p>But if you&rsquo;re working with something (like CSS, or HTTP, or goroutines, or
email) more seriously and you don&rsquo;t really understand how it works, sometimes
you&rsquo;ll start to run into problems.</p>

<h3 id="your-bugs-will-tell-you-when-you-need-to-improve-your-mental-model">your bugs will tell you when you need to improve your mental model</h3>

<p>When I&rsquo;m programming and I&rsquo;m missing a key concept about how something works,
it doesn&rsquo;t always show up in an obvious way. What will happen is:</p>

<ul>
<li>I&rsquo;ll have bugs in my programs because of an incorrect mental model</li>
<li>I&rsquo;ll struggle to fix those bugs quickly and I won&rsquo;t be able to find the right questions to ask to diagnose them</li>
<li>I feel really frustrated</li>
</ul>

<p>I think it&rsquo;s actually an important skill <strong>just to be able to recognize that
this is happening</strong>: I&rsquo;ve slowly learned to recognize the feeling of &ldquo;wait, I&rsquo;m
really confused, I think there&rsquo;s something I don&rsquo;t understand about how this
system works, what is it?&rdquo;</p>

<p>Being a senior developer is less about knowing absolutely everything and more
about quickly being able to recognize when you <strong>don&rsquo;t</strong> know something and
learn it. Speaking of being a senior developer&hellip;</p>

<h3 id="even-senior-developers-need-to-learn-how-their-systems-work">even senior developers need to learn how their systems work</h3>

<p>So far I&rsquo;ve never stopped learning how things work, because there are so many
different types of systems we work with!</p>

<p>For example, I know a lot of the fundamentals of how C programs work and web
programming (like the examples at the top of this post), but when it comes to
graphics programming/OpenGL/GPUs, I know very few of the fundamental ideas. And
sometimes I&rsquo;ll discover a new fact that I&rsquo;m missing about a system I thought I
knew, like last year I <a href="https://jvns.ca/blog/debugging-attitude-matters/">discovered</a> that I was
missing a LOT of information about how CSS works.</p>

<p>It can feel bad to realise that you really don&rsquo;t understand how a system you&rsquo;ve
been using works when you have 10 years of experience (&ldquo;ugh, shouldn&rsquo;t I know
this already? I&rsquo;ve been using this for so long!&ldquo;), but it&rsquo;s normal! There&rsquo;s a
lot to know about computers and we are constantly inventing new things to know,
so nobody can keep up with every single thing.</p>

<h3 id="how-i-go-from-i-m-confused-to-ok-i-get-it">how I go from &ldquo;I&rsquo;m confused&rdquo; to &ldquo;ok, I get it!&rdquo;</h3>

<p>When I notice I&rsquo;m confused, I like to approach it like this:</p>

<ol>
<li>Notice I&rsquo;m confused about a topic (&ldquo;hey, when I write <code>await</code> in my
Javascript program, what is actually happening?&ldquo;)</li>
<li>Break down my confusion into specific factual questions, like &ldquo;when there&rsquo;s
an <code>await</code> and it&rsquo;s waiting, how does it decide which part of my code runs
next? Where is that information stored?&rdquo;</li>
<li>Find out the answers to those questions (by writing a program, reading
something on the internet, or asking someone)</li>
<li>Test my understanding by writing a program (&ldquo;hey, that&rsquo;s why I was having
that async bug! And I can fix it like this!&ldquo;)</li>
</ol>

<p>The last &ldquo;test my understanding&rdquo; step is really important. The whole point of
understanding how computers work is to actually write code to make them do
things!</p>

<p>I find that if I can use my newfound understanding to do something concrete
like implement a new feature or fix a bug or even just write a test program
that demonstrates how the thing works, it feels a LOT more real than if I just
read about it. And then it&rsquo;s much more likely that I&rsquo;ll be able to use it in
practice later.</p>

<h3 id="just-learning-a-few-facts-can-help-a-lot">just learning a few facts can help a lot</h3>

<p>Learning how things work doesn&rsquo;t need to be a big huge thing. For example, I
used to not really know how floating point numbers worked, and I felt nervous
that something weird would happen that I didn&rsquo;t understand.</p>

<p>And then one day in 2013 I went to a talk by Stefan Karpinski explaining how
floating point numbers worked (containing roughly the information in <a href="https://wizardzines.com/comics/floating-point/">this comic</a>, but with more weird
details). And now I feel totally confident using floating point numbers! I know
what their basic limitations are, and when not to use them (to represent
integers larger than 2^53). And I know what I <em>don&rsquo;t</em> know &ndash; I know it&rsquo;s hard
to write numerically stable linear algebra algorithms and I have no idea how to
do that.</p>

<h3 id="connect-new-facts-to-information-you-already-know">connect new facts to information you already know</h3>

<p>When learning a new fact, it&rsquo;s easy to be able to recite a sentence like &ldquo;ok,
there are 8 bits in a byte&rdquo;. That&rsquo;s true, but so what? What&rsquo;s harder (and much
more useful!) is to be able to connect that information to what you already
know about programming.</p>

<p>For example, let&rsquo;s take this &ldquo;8 bits in a byte thing&rdquo;. In your program you
probably have strings, like &ldquo;Hello&rdquo;. You can already start asking lots of
questions about this, like:</p>

<ul>
<li>How many bytes in memory are used to represent the string &ldquo;Hello&rdquo;? (it&rsquo;s 6 &ndash; 5 characters plus a null byte at the end)</li>
<li>What bits exactly does the letter &ldquo;H&rdquo; correspond to? (the encoding for
&ldquo;Hello&rdquo; is going to be using ASCII, so you can look it up in an ASCII table!)</li>
<li>If you have a running program that&rsquo;s printing out the string &ldquo;Hello&rdquo;, can you
go look at its memory and find out where those bytes are in its memory? How
do you do that?</li>
</ul>

<p>The important thing here is to ask the questions and explore the connections
that <strong>you&rsquo;re</strong> curious about &ndash; maybe you&rsquo;re not so interested in how the
strings are represented in memory, but you really want to know how many bytes a
heart emoji is in Unicode! Or maybe you want to learn about how floating point
numbers work!</p>

<p>I find that when I connect new facts to things I&rsquo;m already familiar with (like
emoji or floating point numbers or strings), then the information sticks a lot
better.</p>

<p>Next up, I want to talk about 2 ways to get information: asking a person yes/no questions, and asking the computer.</p>

<h3 id="how-to-get-information-ask-yes-no-questions">how to get information: ask yes/no questions</h3>

<p>When I&rsquo;m talking to someone who knows more about the concept than me, I find it
helps to start by asking really simple questions, where the answer is just
&ldquo;yes&rdquo; or &ldquo;no&rdquo;. I&rsquo;ve written about yes/no questions before in <a href="https://jvns.ca/blog/good-questions/">how to ask good
questions</a>, but I love it a lot so let&rsquo;s
talk about it again!</p>

<p>I do this because it forces me to articulate exactly what my current mental
model <em>is</em>, and because I think yes/no questions are often easier for the
person I&rsquo;m asking to answer.</p>

<p>For example, here are some different types of questions:</p>

<ul>
<li>Check if your current understanding is correct<br />

<ul>
<li>Example: &ldquo;Is a pixel shader the same thing as a fragment shader?&rdquo;</li>
</ul></li>
<li>How concepts you&rsquo;ve heard of are related to each other

<ul>
<li>Example: &ldquo;Does shadertoy use OpenGL?&rdquo;</li>
<li>Example: &ldquo;Do graphics cards know about triangles?&rdquo;</li>
</ul></li>
<li>High-level questions about what the main purpose of something is

<ul>
<li>Example: &ldquo;Does mysql orchestrator proxy database queries?&rdquo;</li>
<li>Example: &ldquo;Does OpenGL give you more control or less control over the graphics card than Vulkan?&rdquo;</li>
</ul></li>
</ul>

<h3 id="yes-no-questions-put-you-in-control">yes/no questions put you in control</h3>

<p>When I ask very open-ended questions like &ldquo;how does X work?&rdquo;, I find that it often goes wrong in one of 2 ways:</p>

<ol>
<li>The person starts telling me a bunch of things that I already knew</li>
<li>The person starts telling me a bunch of things that I don&rsquo;t know, but which
aren&rsquo;t really what I was interested in understanding</li>
</ol>

<p>Both of these are frustrating, but of course neither of these things are their
fault! They can&rsquo;t know exactly what information I wanted about X,
because I didn&rsquo;t tell them. But it still always feels bad to have to interrupt
someone with &ldquo;oh no, sorry, that&rsquo;s not what I wanted to know at all!&rdquo;</p>

<p>I love yes/no questions because, even though they&rsquo;re harder to formulate, I&rsquo;m
WAY more likely to get the exact answers I want and less likely to waste the
time of the person I&rsquo;m asking by having them explain a bunch of things that I&rsquo;m
not interested in.</p>

<h3 id="asking-yes-no-questions-isn-t-always-easy">asking yes/no questions isn&rsquo;t always easy</h3>

<p>When I&rsquo;m asking someone questions to try to learn about something new,
sometimes this happens:</p>

<p><strong>me:</strong> so, just to check my understanding, it works like this, right?<br>
<strong>them:</strong> actually, no, it&rsquo;s &lt;completely different thing&gt;<br>
<strong>me (internally)</strong>: (brief moment of panic) <br>
<strong>me:</strong> ok, let me think for a minute about my next question</p>

<p>It never quite feels <em>good</em> to learn that my mental model was totally wrong,
even though it&rsquo;s incredibly helpful information. Asking this kind of
really specific question (even though it&rsquo;s more effective!) puts you in a more
vulnerable position than asking a broader question, because sometimes you have
to reveal specific things that you were totally wrong about!</p>

<p>When this happens, I like to just say that I&rsquo;m going to take a minute to
incorporate the new fact into my mental model and think about my next question.</p>

<p>Okay, that&rsquo;s the end of this digression into my love for yes/no questions :)</p>

<h3 id="how-to-get-information-ask-the-computer">how to get information: ask the computer</h3>

<p>Sometimes when I&rsquo;m trying to answer a question I have, there won&rsquo;t be anybody
to ask, and I&rsquo;ll Google it or search the documentation and won&rsquo;t find anything.</p>

<p>But the delightful thing about computers is that you can often get answers to
questions about computers by&hellip; asking your computer!</p>

<p>Here are a few examples (from past blog posts) of questions I&rsquo;ve had and computer experiments I ran to
answer them for myself:</p>

<ul>
<li>Are atomics faster or slower than mutexes? (blog post: <a href="https://jvns.ca/blog/2014/12/14/fun-with-threads/">trying out mutexes and atomics</a>)</li>
<li>If I add a user to a group, will existing processes running as that user have the new group? (blog post: <a href="https://jvns.ca/blog/2017/11/20/groups/">How do groups work on Linux?</a>)</li>
<li>On Linux, if you have a server listening on 0.0.0.0 but you don&rsquo;t have any network interfaces, can you connect to that server? (blog post: <a href="https://jvns.ca/blog/2017/09/03/network-interfaces/">what&rsquo;s a network interface?</a>)</li>
<li>How is the data in a SQLite database actually organized on disk? (blog post: <a href="https://jvns.ca/blog/2014/09/27/how-does-sqlite-work-part-1-pages/">How does SQLite work? Part 1: pages!</a>)</li>
</ul>

<h3 id="asking-the-computer-is-a-skill">asking the computer is a skill</h3>

<p>It definitely takes time to learn how to turn &ldquo;I&rsquo;m confused about X&rdquo; into
specific questions, and then to turn that question into an experiment you can
run on your computer to definitively answer it.</p>

<p>But it&rsquo;s a really powerful tool to have! If you&rsquo;re not limited to just the
things that you can Google / what&rsquo;s in the documentation / what the people
around you know, then you can do a LOT more.</p>

<h3 id="be-aware-of-what-you-still-don-t-understand">be aware of what you still don&rsquo;t understand</h3>

<p>Like I said earlier, the point here isn&rsquo;t to understand every single thing. But
especially as you get more senior, it&rsquo;s important to be aware of what you don&rsquo;t
know! For example, here are five things I don&rsquo;t know (out of a VERY large
list):</p>

<ul>
<li>How database transactions / isolation levels work</li>
<li>How vertex shaders work (in graphics)</li>
<li>How font rendering works</li>
<li>How BGP / peering work</li>
<li>How multiple inheritance works in Python</li>
</ul>

<p>And I don&rsquo;t really need to know how those things work right now! But one day
I&rsquo;m pretty sure I&rsquo;m going to need to know how database transactions work, and I
know it&rsquo;s something I can learn when that day comes :)</p>

<p>Someone who read this post asked me &ldquo;how do you figure out what you don&rsquo;t know?&rdquo;
and I didn&rsquo;t have a good answer, so I&rsquo;d love to hear your thoughts!</p>

<p><small>
Thanks to
Haider Al-Mosawi,
Ivan Savov,
Jake Donham,
John Hergenroeder,
Kamal Marhubi,
Matthew Parker,
Matthieu Cneude,
Ori Bernstein,
Peter Lyons,
Sebastian Gutierrez,
Shae Matijs Erisson,
Vaibhav Sagar,
and Zell Liew for reading a draft of this.
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things your manager might not know]]></title>
    <link href="https://jvns.ca/blog/things-your-manager-might-not-know/"/>
    <updated>2021-03-02T10:40:18+00:00</updated>
    <id>https://jvns.ca/blog/things-your-manager-might-not-know/</id>
    <content type="html"><![CDATA[

<p>When people talk about “managing up”, sometimes it’s framed as a bad thing &ndash;
massaging the ego of people in charge so that they treat you well.</p>

<p>In my experience, managing up is usually a lot more practical. Your manager
doesn’t (and can’t!) know every single detail about what you do in your job,
and being aware of what they might not know and giving them the information
they need to do their job well makes everyone’s job a lot easier.</p>

<p>Here are the facts your manager might not know about you and your team that
we’ll cover in this post:</p>

<ul>
<li>What’s slowing the team down</li>
<li>Exactly what individual people on the team are working on</li>
<li>Where the technical debt is</li>
<li>How to help you get better at your job</li>
<li>What your goals are</li>
<li>What issues they should be escalating</li>
<li>What extra work you’re doing</li>
<li>How compensation/promotions work at the company</li>
</ul>

<p>For each one, I’ll give specific ways you can help get them the information
they need. All of these ways you can help them will also help you &ndash; it’s not
just an altruistic endeavor :)</p>

<p>This post (like all my writing about working with a manager) assumes that you
generally have a good relationship with your manager.</p>

<h3 id="your-manager-can-t-know-every-detail-about-your-job">your manager can’t know every detail about your job</h3>

<p>I said this already, but I want to reiterate it: the reason your manager
doesn’t know all these things isn’t because they’re not doing their job. It’s
literally impossible for them to keep track of every detail about every
person’s on their team&rsquo;s job. It’s normal for managers to rely on their team to keep them
informed about important facts they need to know, especially with more senior
engineers.</p>

<p>Keeping them informed helps them do their job better, and it makes your job a
lot easier too. Let&rsquo;s talk about how that works!</p>

<h3 id="they-might-not-know-what-s-slowing-the-team-down">they might not know: what’s slowing the team down</h3>

<p>Sometimes, you’re working on a project and the project is going more slowly
than you hoped. There are always reasons for this &ndash; maybe there have been a
lot more bugs than you expected, maybe you’re using a new technology nobody on
the team has ever used before, maybe you’re waiting for another team to do
something. The reasons things are hard change a lot! Even if your manager knew
what was slowing you down 2 weeks ago, maybe that issue has been totally
resolved and you’re onto a totally different problem.</p>

<p>It’s a problem if your manager doesn’t know this mostly because if they know
why you’re stuck, they might be able to help.</p>

<h3 id="what-you-can-do-to-help-tell-them-what-s-hard-about-your-job">what you can do to help: tell them what’s hard about your job</h3>

<p>It can feel bad to admit that you’re having trouble with something, but tasks
usually aren’t hard because you’re “slow” or “bad at your job”. Usually it’s
because there’s something concrete that’s making it hard. Identifying what that
thing is and telling your manager about it helps them a lot!</p>

<p>For example, maybe you’re working on a feature and it’s turning out to be MUCH
more complicated than you expected because there are a lot of edge cases that
nobody had thought about. It’s useful for your manager to know that because
sometimes they can help address it! They might:</p>

<ul>
<li>Encourage you to take the time you need to figure it out (“it’s really
important to get all these edge cases right, I’m happy you’re doing this!”)</li>
<li>Suggest someone who could help you (“Ankita  was dealing with those exact
issues last year, you should talk to her!”)</li>
<li>Factor it into their planning (“Sounds like that won’t get done this week
then, good to know”)</li>
<li>Deprioritize the feature (“Oh, I thought this was going to be a quick fix, if
this is really complicated we should focus our energy on something else
instead”)</li>
</ul>

<h3 id="they-might-not-know-exactly-what-individual-people-on-the-team-are-working-on">they might not know: exactly what individual people on the team are working on</h3>

<p>Your manager almost certainly knows what the team as a whole is working on
(maybe you’re working on releasing some new site), but do they know that today
you’re working on getting a TLS certificate issued for the site and learning
how CAs work? Maybe not!</p>

<p>The reason this is a problem for them is that someone might ask them “hey
Manager, did your team get that TLS certificate yet?”, and it looks bad for
them to not know the answer, or not be able to easily find out.</p>

<h3 id="what-you-can-do-to-help-keep-them-informed-about-your-progress">what you can do to help: keep them informed about your progress</h3>

<p>You can ask your manager how they like to stay updated about what the team is
doing: maybe they want to track everything through the issue tracker, maybe
they want folks to write weekly digest, or maybe they have a different system.</p>

<p>If your team uses an issue tracker, taking a few minutes to keep it up to date
can really help your manager keep a handle on what’s going on! If they can
quickly look at the TLS ticket and see that you’re still working on it, that
saves them a lot of time and means that you can spend your 1:1s discussing more
important and interesting things than “hey, are you done with that TLS
ticket?”.</p>

<h3 id="they-might-not-know-where-the-technical-debt-is">they might not know: where the technical debt is</h3>

<p>Your manager probably broadly understands what technology your team is using.
But, especially if they’ve never worked as a software engineer on your specific
team, they probably don’t know that much about the details! They may not
completely understand the problems you’re having with your current
architecture, or which systems are going to fail soon. They rely on you for
that.</p>

<p>And it’s important for them to know about things like technical debt: if you
have a system that isn’t going to meet your current scaling needs soon and is
going to need a lot of work, that needs to get factored into planning!</p>

<h3 id="what-you-can-do-to-help-tell-them-about-technical-risks">what you can do to help: tell them about technical risks!</h3>

<p>A couple of examples of things you can tell them about:</p>

<ul>
<li>technical debt that’s slowing you down when building new features</li>
<li>systems that are causing a lot of disruption because they’re unreliable</li>
</ul>

<h3 id="they-might-not-know-how-to-help-you-get-better-at-your-job">they might not know: how to help you get better at your job</h3>

<p>When I started out, I often felt like there were things I could be doing
differently to do my job better. And that was definitely true! So I was
sometimes confused about why my manager wasn’t giving me feedback about how I
could be doing things better.</p>

<p>The reality is that in most cases, you probably know how to do your job better
than your manager does! You’ve spent a lot more time thinking about the
projects you’re working on, and they definitely can’t just parachute in and
tell you how to improve. Of course, there are lots of times when your manager
does have useful advice for you, but it’s not easy for them to figure out how
to give it to you! Here are a few reasons why:</p>

<ol>
<li>They don’t necessarily even know what you’re struggling with in the first
place (like we talked about in the last article)</li>
<li>Even if they do know, it might not be obvious to them what they can do to
improve the situation. Some managers are of course better at figuring this
out than others &ndash; it’s not easy!</li>
</ol>

<h3 id="what-you-can-do-to-help-identify-what-you-need-and-ask-for-it">what you can do to help: identify what you need and ask for it!</h3>

<p>Managers often LOVE it when you ask them for something that they can do that
will help you. Here are a few examples of things you could ask for:</p>

<ul>
<li><strong>less work</strong>: maybe you’re doing 3 projects and it’s too much and it’s
making all of 3 projects go slowly, and you need to only be working on 2
things.</li>
<li><strong>harder work</strong>: maybe you don’t feel like you’re learning anything with your
current work and you want to work on something that’s more of a challenge</li>
<li><strong>a learning budget</strong>: you’re learning about some new technology, and you
think going to a conference will really help you, and you want a couple of
days off and the budget to buy a ticket.</li>
<li><strong>help with an interpersonal situation</strong>: maybe you’re having a little bit of
trouble working with someone else on the team, and you need some advice to
understand what’s going on with that person and how to work with them more
effectively.</li>
<li><strong>specific feedback on work you did</strong>: asking for feedback on a specific
piece of work you did (“hey, do you have any feedback on that migration we
did?“) is MUCH more effective than just asking “do you have any feedback for
me?”.</li>
</ul>

<p>Learning how to do this well takes a lot of practice &ndash; if you want to improve
something about your job, it can be hard to break that down into “ok, the
problem is X” and it’s even harder to identify something specific somebody else
could do to address the problem. But if you can do it it’s WAY easier to get
what you want and good managers will be delighted to help you!</p>

<p>It’s also <strong>definitely</strong> okay to bring up problems when you don’t specifically
know what you need &ndash; if you’re not sure how to solve the problem you can
explore possible solutions together!</p>

<h3 id="more-you-can-do-to-help-tell-them-your-goals">more you can do to help: tell them your goals!</h3>

<p>“Get better at your job” also means different things to different people. So if
you have a specific career goal, it’s important to tell it to your manager! For
example if you want to become an architect / team lead / manager one day, tell
them that! Ask them what skills they think you’ll need to build to get there!
Good managers will be delighted to talk to you about this, figure out what you
need to do, and <a href="https://larahogan.me/blog/what-sponsorship-looks-like/">sponsor</a> your work to
help you get opportunities.</p>

<h3 id="they-might-not-know-what-issues-they-should-be-escalating">they might not know: what issues they should be escalating</h3>

<p>Sometimes issues come up on the team that should actually be dealt with by
someone higher up and that you can’t easily fix on your own. A few examples:</p>

<ul>
<li>You’re in a negotiation with a vendor and it’s not going well (vendor
negotiations happen infrequently and they can be really tricky to handle for
anyone!)</li>
<li>You’re stuck because of a conflict in priorities between teams (your team
needs another team to be doing X, but the other team thinks that the priority
is Y).</li>
</ul>

<p>It’s bad to try to handle issues you don’t have the power to fix on your own
because it’ll take forever, it’ll be frustrating for you, and you won’t be able
to make progress.</p>

<h3 id="what-you-can-do-practice-escalating-issues">what you can do: practice escalating issues!</h3>

<p>It’s usually not totally clear which things are part of your job and which
things you should be escalating to your manager. The best way to get better at
identifying what should be escalated is to ask your manager about it when you
notice an issue you’re really struggling with! Eventually you’ll learn what
kinds of issues should be escalated and which ones you should tackle on your
own.</p>

<p>Identifying which things you should be escalating to your manager (“hey, I
think you should know about this&hellip;”) isn’t easy, but it’s really a win/win
when you can do it &ndash; if you escalate it to them, you’re no longer stuck trying
to deal with an issue that’s impossible for you to fix, and they can make sure
it gets done by people who actually have the power to do it.</p>

<h3 id="they-might-not-know-what-extra-work-you-re-doing">they might not know: what extra work you’re doing</h3>

<p>If you’re doing a bunch of extra work outside your normal job description, your
manager might not realize that! It’s important to bring it up with your manager
so that they can give you credit for that work (put it in your <a href="https://jvns.ca/blog/brag-documents/">brag
document</a>!).</p>

<p>Sometimes there’s also extra work you’re doing that you shouldn’t be doing
(like in the previous section, maybe it’s something that should be escalated!),
and in those cases telling them can help you stop doing the work.</p>

<h3 id="they-might-not-know-how-the-company-s-compensation-and-promotions-systems-work">they might not know: how the company’s compensation and promotions systems work</h3>

<p>This one is a little different from the others because you’re not going
to be giving your manager information about this in the same way, but it’s important to be aware of.</p>

<p>I used to think that managers knew everything about compensation / promotions.
Then one day I had a really enlightening conversation with my old manager Jay
where I was asking a question about how compensation worked, and he said “yeah,
I don’t know!”.</p>

<p>I really appreciated how honest he was about it, and it made me realise that
there are a LOT of things a manager might not know about how these systems
work, like:</p>

<ul>
<li>what the system for issuing stock refreshes is</li>
<li>how raises are calculated when someone gets promoted</li>
<li>what’s actually expected for a promotion to a given level, and whether or not
it’s the same as what’s written down</li>
<li>whether / why exceptions are made to the rules</li>
<li>the basic facts about your compensation (I’ve had jobs where managers knew my
salary but not what my stock grants were. Apparently this is pretty common!)</li>
</ul>

<h3 id="what-you-can-do-to-help-ask-about-how-compensation-works">what you can do to help: ask about how compensation works!</h3>

<p>I’ve found it really valuable to start out conversations about compensation /
promotions in a fact-finding way &ndash; instead of saying ”hello, i want a raise”,
it’s a lot easier for everyone to start with “hey, how does this work? can you
explain it to me?”.</p>

<p>This can be especially helpful to new managers because even if they don’t know
the answers right away, they can often find out! So if you ask, it’s an
opportunity for them to go figure out how these systems work.</p>

<p>You can also get general information about how compensation and promotions work from other
managers who are not your manager, if there’s a different manager you have a
good relationship who you’d rather have that conversation with.</p>

<h3 id="some-other-sources-of-uncertainty">Some other sources of uncertainty</h3>

<p>There are also a lot of other things your manager might be uncertain about:</p>

<ul>
<li>They don’t know how priorities are going to change in the future &ndash; if
there’s a surprise change in priorities, often it’s a surprise to them too!</li>
<li>They might not know if they’re going to get headcount / how to get headcount:
if you’re stressed because your team is overloaded and you’d love to hire
someone, they might need to figure out how to get permission to do that themselves</li>
<li>They may not know how <em>they’re</em> performing. If they’re uncertain about how
their next performance review is going to come back or if they just got a bad
review, sometimes that uncertainty/stress can trickle down in weird ways.
People are human! I think this is good to be aware of as a possible
explanation for weird behaviour even if usually they won’t tell you that this
is happening.</li>
</ul>

<h3 id="if-you-get-good-at-this-it-s-a-superpower">If you get good at this, it’s a superpower</h3>

<p>Being good at telling your manager the right information at the right time and
asking for what you need is a superpower. It makes you way more valuable to
have on a team (because your manager knows they can trust you to give them the
information they need), and it’s more likely that you’ll get what you want
(because you’re making it easy for them to do that!).</p>

<p>This skill takes a lot of time to learn but it’s pretty easy to practice. You
can take a few minutes to reflect before your 1:1 with your manager and think
about what might be important to bring up with them.</p>

<p>The great thing about all of this is that you don’t have to guess: if you’re
curious about what your manager knows about a given topic or how you can help
get them the information they need, you can just ask them!</p>

<p>If you want to read more about how to build a good relationship with your manager,
I wrote a zine called <a href="https://wizardzines.com/zines/manager/">Help! I Have a Manager!</a> about it.</p>

<p><small>
Thanks to Jay Shirley for coming up with the idea for this post with me, and to
Akiva Leffert, Allison Kaptur, Camille Fournier, Chirag Davé, Duretti Hirpa,
Evy Kassirer, Jay Shirley, Juan Pablo Buriticá, Kamal Marhubi, Marc Hedlund,
Marco Rogers, and Ronnie Chen for their comments which made it a lot better.
All the problems with it are mine of course :)
</small></p>
]]></content>
  </entry>
  
</feed>
